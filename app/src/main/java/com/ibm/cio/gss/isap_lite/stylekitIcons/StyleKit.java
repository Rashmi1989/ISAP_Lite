package com.ibm.cio.gss.isap_lite.stylekitIcons;

import android.content.Context;
import android.graphics.Paint;
import android.graphics.PorterDuff;
import android.graphics.PorterDuffXfermode;
import android.graphics.Matrix;
import android.graphics.RectF;
import android.graphics.Shader;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.BitmapShader;
import android.graphics.BlurMaskFilter;
import android.graphics.Canvas;
import android.content.res.Resources;
import android.graphics.Color;
import android.graphics.Path;
import java.util.Stack;
import java.lang.ref.WeakReference;



/**
 * Created by Emre Kavlakoglu on Mar 15, 2018.
 * Copyright Â© 2018 IBM Corporation. All rights reserved.
 *
 * Generated by PaintCode
 * http://www.paintcodeapp.com
 *
 * @author Emre Kavlakoglu
 */
public class StyleKit {
    // Colors
    public static int _78BAC9 = Color.argb(255, 120, 186, 201);
    public static int _474F64 = Color.argb(255, 71, 79, 100);
    public static int _74888E = Color.argb(255, 116, 136, 142);
    public static int dAE4E9 = Color.argb(255, 218, 228, 233);
    public static int _000000 = Color.argb(255, 0, 0, 0);
    public static int fFFFFF = Color.argb(255, 255, 255, 255);
    public static int _00000025 = Color.argb(64, 0, 0, 0);
    public static int fFFFFF25 = Color.argb(64, 255, 255, 255);
    public static int _74888E50 = Color.argb(128, 116, 136, 142);
    public static int _474F6450 = Color.argb(130, 71, 79, 100);
    public static int dAE4E950 = Color.argb(129, 218, 228, 233);
    public static int _78BAC950 = Color.argb(128, 120, 186, 201);
    public static int fFFFFF10 = Color.argb(26, 255, 255, 255);
    public static int fF6800 = Color.argb(255, 255, 104, 0);
//    public static int _79a6f6 = Color.argb(255, 121, 166, 246);
    public static int _79a6f6 = Color.argb(255, 119, 118, 119);
    public static int _3b6caa = Color.argb(255, 59, 108, 170);
    //public static int ae97f4 = Color.argb(255, 174, 151, 244);
    public static int ae97f4 = Color.argb(255, 69, 108, 165);
//    public static int _473793 = Color.argb(255, 71, 55, 147);
    public static int _473793 = Color.argb(255, 67, 58, 142);
    public static int _78BAC925 = Color.argb(64, 120, 186, 201);
    public static int bBDCE4 = Color.argb(255, 187, 220, 228);

    
    
    // Images
    //public static Bitmap iPhone6SplashScreen(Resources resources) { return BitmapFactory.decodeResource(resources, R.drawable.iPhone6SplashScreen); }
    //public static Bitmap iPhone67SplashScreen(Resources resources) { return BitmapFactory.decodeResource(resources, R.drawable.iPhone67SplashScreen); }
    //public static Bitmap iPhoneBgImage67(Resources resources) { return BitmapFactory.decodeResource(resources, R.drawable.iPhoneBgImage67); }
    //public static Bitmap iPhoneBgimage67(Resources resources) { return BitmapFactory.decodeResource(resources, R.drawable.iPhoneBgimage67); }
    //public static Bitmap welcomeScreenBG67(Resources resources) { return BitmapFactory.decodeResource(resources, R.drawable.welcomeScreenBG67); }
    //public static Bitmap welcomeScreenBGIPhone67(Resources resources) { return BitmapFactory.decodeResource(resources, R.drawable.welcomeScreenBGIPhone67); }
    
    
    private static class GlobalCache {
        static PaintCodeBitmap iPhone6SplashScreen = new PaintCodeBitmap();
        static PaintCodeBitmap iPhone67SplashScreen = new PaintCodeBitmap();
        static PaintCodeBitmap iPhoneBgImage67 = new PaintCodeBitmap();
        static PaintCodeBitmap iPhoneBgimage67 = new PaintCodeBitmap();
        static PaintCodeBitmap welcomeScreenBG67 = new PaintCodeBitmap();
        static PaintCodeBitmap welcomeScreenBGIPhone67 = new PaintCodeBitmap();
        static PaintCodeBitmap image = new PaintCodeBitmap();
        static PorterDuffXfermode blendModeSourceIn = new PorterDuffXfermode(PorterDuff.Mode.SRC_IN);
    }
    
    // Resizing Behavior
    public enum ResizingBehavior {
        AspectFit, //!< The content is proportionally resized to fit into the target rectangle.
        AspectFill, //!< The content is proportionally resized to completely fill the target rectangle.
        Stretch, //!< The content is stretched to match the entire target rectangle.
        Center, //!< The content is centered in the target rectangle, but it is NOT resized.
    }
    
    // Canvas Drawings
    // Assets
    
    private static class CacheForPlan {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    public static void drawPlan(Canvas canvas) {
        StyleKit.drawPlan(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit);
    }
    
    public static void drawPlan(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForPlan.paint;
        
        // Local Colors
        int c0D0D6IconColor = Color.argb(255, 192, 208, 214);
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForPlan.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForPlan.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Bezier
        RectF bezierRect = CacheForPlan.bezierRect;
        bezierRect.set(3f, 2f, 41f, 42f);
        Path bezierPath = CacheForPlan.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(22.7f, 2f);
        bezierPath.lineTo(3f, 16.67f);
        bezierPath.lineTo(3f, 42f);
        bezierPath.lineTo(15.67f, 42f);
        bezierPath.lineTo(15.67f, 28.67f);
        bezierPath.lineTo(28.33f, 28.67f);
        bezierPath.lineTo(28.33f, 42f);
        bezierPath.lineTo(41f, 42f);
        bezierPath.lineTo(41f, 16.67f);
        bezierPath.lineTo(22.7f, 2f);
        bezierPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(2.74f);
        paint.setStrokeCap(Paint.Cap.SQUARE);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(c0D0D6IconColor);
        canvas.drawPath(bezierPath, paint);
        canvas.restore();
        
        canvas.restore();
    }
    
    private static class CacheForTouchID {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 145f, 145f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezier6Rect = new RectF();
        private static Path bezier6Path = new Path();
        private static RectF bezier7Rect = new RectF();
        private static Path bezier7Path = new Path();
        private static RectF bezier8Rect = new RectF();
        private static Path bezier8Path = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF bezier4Rect = new RectF();
        private static Path bezier4Path = new Path();
        private static RectF bezier9Rect = new RectF();
        private static Path bezier9Path = new Path();
        private static RectF bezier10Rect = new RectF();
        private static Path bezier10Path = new Path();
        private static RectF bezier11Rect = new RectF();
        private static Path bezier11Path = new Path();
        private static RectF bezier12Rect = new RectF();
        private static Path bezier12Path = new Path();
    }
    
    public static void drawTouchID(Canvas canvas) {
        StyleKit.drawTouchID(canvas, new RectF(0f, 0f, 145f, 145f), ResizingBehavior.AspectFit);
    }
    
    public static void drawTouchID(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForTouchID.paint;
        
        // Local Colors
        int c0D0D6IconColor = Color.argb(255, 192, 208, 214);
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForTouchID.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForTouchID.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 145f, resizedFrame.height() / 145f);
        
        // Bezier 6
        RectF bezier6Rect = CacheForTouchID.bezier6Rect;
        bezier6Rect.set(51.28f, 73.72f, 71.42f, 143.01f);
        Path bezier6Path = CacheForTouchID.bezier6Path;
        bezier6Path.reset();
        bezier6Path.moveTo(51.28f, 143.01f);
        bezier6Path.cubicTo(67.34f, 124.73f, 74.99f, 99.42f, 69.81f, 73.72f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(4f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(c0D0D6IconColor);
        canvas.drawPath(bezier6Path, paint);
        canvas.restore();
        
        // Bezier 7
        RectF bezier7Rect = CacheForTouchID.bezier7Rect;
        bezier7Rect.set(33.54f, 55.76f, 88.72f, 135.59f);
        Path bezier7Path = CacheForTouchID.bezier7Path;
        bezier7Path.reset();
        bezier7Path.moveTo(88.72f, 78.71f);
        bezier7Path.cubicTo(88.4f, 75.88f, 87.96f, 73.03f, 87.38f, 70.18f);
        bezier7Path.lineTo(87.4f, 70.17f);
        bezier7Path.cubicTo(85.44f, 60.45f, 75.97f, 54.15f, 66.24f, 56.11f);
        bezier7Path.cubicTo(56.51f, 58.07f, 50.22f, 67.55f, 52.18f, 77.28f);
        bezier7Path.cubicTo(52.7f, 81.63f, 58.35f, 112.38f, 33.54f, 135.59f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(4f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(c0D0D6IconColor);
        canvas.drawPath(bezier7Path, paint);
        canvas.restore();
        
        // Bezier 8
        RectF bezier8Rect = CacheForTouchID.bezier8Rect;
        bezier8Rect.set(72.08f, 93.43f, 89.28f, 145.4f);
        Path bezier8Path = CacheForTouchID.bezier8Path;
        bezier8Path.reset();
        bezier8Path.moveTo(72.08f, 145.4f);
        bezier8Path.cubicTo(82.42f, 130.29f, 88.58f, 112.34f, 89.28f, 93.43f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(4f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(c0D0D6IconColor);
        canvas.drawPath(bezier8Path, paint);
        canvas.restore();
        
        // Bezier
        RectF bezierRect = CacheForTouchID.bezierRect;
        bezierRect.set(1.07f, 25.88f, 19.38f, 87.9f);
        Path bezierPath = CacheForTouchID.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(19.38f, 25.88f);
        bezierPath.cubicTo(4.82f, 42.15f, -2.15f, 64.85f, 2.5f, 87.9f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(4f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(c0D0D6IconColor);
        canvas.drawPath(bezierPath, paint);
        canvas.restore();
        
        // Bezier 2
        RectF bezier2Rect = CacheForTouchID.bezier2Rect;
        bezier2Rect.set(29.81f, 2.01f, 113.46f, 16.31f);
        Path bezier2Path = CacheForTouchID.bezier2Path;
        bezier2Path.reset();
        bezier2Path.moveTo(113.46f, 14.67f);
        bezier2Path.cubicTo(98.02f, 4.04f, 78.45f, -0.56f, 58.62f, 3.44f);
        bezier2Path.cubicTo(47.82f, 5.62f, 38.08f, 10.12f, 29.81f, 16.31f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(4f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(c0D0D6IconColor);
        canvas.drawPath(bezier2Path, paint);
        canvas.restore();
        
        // Bezier 3
        RectF bezier3Rect = CacheForTouchID.bezier3Rect;
        bezier3Rect.set(123.97f, 23.5f, 143.08f, 59.56f);
        Path bezier3Path = CacheForTouchID.bezier3Path;
        bezier3Path.reset();
        bezier3Path.moveTo(143.08f, 59.56f);
        bezier3Path.cubicTo(140.23f, 45.41f, 133.39f, 33.08f, 123.97f, 23.5f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(4f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(c0D0D6IconColor);
        canvas.drawPath(bezier3Path, paint);
        canvas.restore();
        
        // Bezier 4
        RectF bezier4Rect = CacheForTouchID.bezier4Rect;
        bezier4Rect.set(143.12f, 59.55f, 144.55f, 75.17f);
        Path bezier4Path = CacheForTouchID.bezier4Path;
        bezier4Path.reset();
        bezier4Path.moveTo(144.53f, 75.17f);
        bezier4Path.cubicTo(144.63f, 70.03f, 144.18f, 64.8f, 143.12f, 59.55f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(4f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(c0D0D6IconColor);
        canvas.drawPath(bezier4Path, paint);
        canvas.restore();
        
        // Bezier 9
        RectF bezier9Rect = CacheForTouchID.bezier9Rect;
        bezier9Rect.set(22.08f, 64.14f, 38.56f, 124.42f);
        Path bezier9Path = CacheForTouchID.bezier9Path;
        bezier9Path.reset();
        bezier9Path.moveTo(38.21f, 64.14f);
        bezier9Path.cubicTo(36.75f, 69.41f, 36.47f, 75.09f, 37.62f, 80.82f);
        bezier9Path.lineTo(37.66f, 80.81f);
        bezier9Path.cubicTo(41.06f, 97.67f, 34.52f, 114.23f, 22.08f, 124.42f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(4f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(c0D0D6IconColor);
        canvas.drawPath(bezier9Path, paint);
        canvas.restore();
        
        // Bezier 10
        RectF bezier10Rect = CacheForTouchID.bezier10Rect;
        bezier10Rect.set(45.26f, 37.68f, 110.28f, 140.66f);
        Path bezier10Path = CacheForTouchID.bezier10Path;
        bezier10Path.reset();
        bezier10Path.moveTo(98.52f, 140.66f);
        bezier10Path.cubicTo(109.33f, 118.48f, 113.21f, 92.7f, 107.96f, 66.64f);
        bezier10Path.cubicTo(106.69f, 60.45f, 96.28f, 32.39f, 65.7f, 38.55f);
        bezier10Path.cubicTo(57.38f, 40.23f, 50.31f, 44.67f, 45.26f, 50.72f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(4f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(c0D0D6IconColor);
        canvas.drawPath(bezier10Path, paint);
        canvas.restore();
        
        // Bezier 11
        RectF bezier11Rect = CacheForTouchID.bezier11Rect;
        bezier11Rect.set(11.08f, 21.28f, 60.85f, 110.26f);
        Path bezier11Path = CacheForTouchID.bezier11Path;
        bezier11Path.reset();
        bezier11Path.moveTo(60.85f, 21.28f);
        bezier11Path.cubicTo(32.48f, 27.72f, 14.28f, 55.67f, 20.06f, 84.36f);
        bezier11Path.lineTo(20.09f, 84.35f);
        bezier11Path.cubicTo(22.1f, 94.32f, 18.32f, 104.12f, 11.08f, 110.26f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(4f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(c0D0D6IconColor);
        canvas.drawPath(bezier11Path, paint);
        canvas.restore();
        
        // Bezier 12
        RectF bezier12Rect = CacheForTouchID.bezier12Rect;
        bezier12Rect.set(75.2f, 19.98f, 128.21f, 124.24f);
        Path bezier12Path = CacheForTouchID.bezier12Path;
        bezier12Path.reset();
        bezier12Path.moveTo(123.69f, 124.24f);
        bezier12Path.cubicTo(128.85f, 104.88f, 129.76f, 84.07f, 125.53f, 63.1f);
        bezier12Path.lineTo(125.52f, 63.1f);
        bezier12Path.cubicTo(120.53f, 38.36f, 99.32f, 21.04f, 75.2f, 19.98f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(4f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(c0D0D6IconColor);
        canvas.drawPath(bezier12Path, paint);
        canvas.restore();
        
        canvas.restore();
    }
    
    private static class CacheForRelationships {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF oval2Rect = new RectF();
        private static Path oval2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF oval3Rect = new RectF();
        private static Path oval3Path = new Path();
    }
    
    public static void drawRelationships(Canvas canvas) {
        StyleKit.drawRelationships(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit);
    }
    
    public static void drawRelationships(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForRelationships.paint;
        
        // Local Colors
        int c0D0D6IconColor = Color.argb(255, 192, 208, 214);
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForRelationships.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForRelationships.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Group
        {
            // Bezier
            RectF bezierRect = CacheForRelationships.bezierRect;
            bezierRect.set(3f, 16.82f, 15.2f, 35.66f);
            Path bezierPath = CacheForRelationships.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(15.2f, 18.98f);
            bezierPath.cubicTo(14.6f, 17.7f, 13.3f, 16.82f, 11.79f, 16.82f);
            bezierPath.lineTo(6.77f, 16.82f);
            bezierPath.cubicTo(4.69f, 16.82f, 3f, 18.5f, 3f, 20.59f);
            bezierPath.lineTo(3f, 26.87f);
            bezierPath.lineTo(5.51f, 26.87f);
            bezierPath.lineTo(5.51f, 35.66f);
            bezierPath.lineTo(13.05f, 35.66f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.5f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(c0D0D6IconColor);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Oval
            RectF ovalRect = CacheForRelationships.ovalRect;
            ovalRect.set(6.05f, 6.05f, 13.15f, 13.15f);
            Path ovalPath = CacheForRelationships.ovalPath;
            ovalPath.reset();
            ovalPath.addOval(ovalRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.5f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(c0D0D6IconColor);
            canvas.drawPath(ovalPath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForRelationships.bezier2Rect;
            bezier2Rect.set(28.48f, 16.82f, 40.68f, 35.66f);
            Path bezier2Path = CacheForRelationships.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(28.48f, 18.98f);
            bezier2Path.cubicTo(29.09f, 17.7f, 30.39f, 16.82f, 31.89f, 16.82f);
            bezier2Path.lineTo(36.92f, 16.82f);
            bezier2Path.cubicTo(39f, 16.82f, 40.68f, 18.5f, 40.68f, 20.59f);
            bezier2Path.lineTo(40.68f, 26.87f);
            bezier2Path.lineTo(38.17f, 26.87f);
            bezier2Path.lineTo(38.17f, 35.66f);
            bezier2Path.lineTo(30.64f, 35.66f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.5f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(c0D0D6IconColor);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
            
            // Oval 2
            RectF oval2Rect = CacheForRelationships.oval2Rect;
            oval2Rect.set(30.5f, 6.05f, 37.6f, 13.15f);
            Path oval2Path = CacheForRelationships.oval2Path;
            oval2Path.reset();
            oval2Path.addOval(oval2Rect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.5f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(c0D0D6IconColor);
            canvas.drawPath(oval2Path, paint);
            canvas.restore();
            
            // Bezier 3
            RectF bezier3Rect = CacheForRelationships.bezier3Rect;
            bezier3Rect.set(14.31f, 16.82f, 29.38f, 40.68f);
            Path bezier3Path = CacheForRelationships.bezier3Path;
            bezier3Path.reset();
            bezier3Path.moveTo(25.61f, 40.68f);
            bezier3Path.lineTo(18.07f, 40.68f);
            bezier3Path.lineTo(18.07f, 30.64f);
            bezier3Path.lineTo(14.31f, 30.64f);
            bezier3Path.lineTo(14.31f, 21.84f);
            bezier3Path.cubicTo(14.31f, 19.07f, 16.56f, 16.82f, 19.33f, 16.82f);
            bezier3Path.lineTo(24.35f, 16.82f);
            bezier3Path.cubicTo(27.13f, 16.82f, 29.38f, 19.07f, 29.38f, 21.84f);
            bezier3Path.lineTo(29.38f, 30.64f);
            bezier3Path.lineTo(25.61f, 30.64f);
            bezier3Path.lineTo(25.61f, 40.68f);
            bezier3Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.5f);
            paint.setStrokeCap(Paint.Cap.SQUARE);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(c0D0D6IconColor);
            canvas.drawPath(bezier3Path, paint);
            canvas.restore();
            
            // Oval 3
            RectF oval3Rect = CacheForRelationships.oval3Rect;
            oval3Rect.set(16.75f, 3f, 26.95f, 13.2f);
            Path oval3Path = CacheForRelationships.oval3Path;
            oval3Path.reset();
            oval3Path.addOval(oval3Rect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.5f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(c0D0D6IconColor);
            canvas.drawPath(oval3Path, paint);
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForSettings {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    public static void drawSettings(Canvas canvas) {
        StyleKit.drawSettings(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit);
    }
    
    public static void drawSettings(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForSettings.paint;
        
        // Local Colors
        int c0D0D6IconColor = Color.argb(255, 192, 208, 214);
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForSettings.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForSettings.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Group
        {
            // Oval
            RectF ovalRect = CacheForSettings.ovalRect;
            ovalRect.set(18.25f, 17.5f, 26.95f, 26.2f);
            Path ovalPath = CacheForSettings.ovalPath;
            ovalPath.reset();
            ovalPath.addOval(ovalRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.74f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(c0D0D6IconColor);
            canvas.drawPath(ovalPath, paint);
            canvas.restore();
            
            // Bezier
            RectF bezierRect = CacheForSettings.bezierRect;
            bezierRect.set(3.48f, 2.75f, 41.68f, 40.96f);
            Path bezierPath = CacheForSettings.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(41.68f, 25.68f);
            bezierPath.lineTo(41.68f, 18.03f);
            bezierPath.lineTo(36.08f, 18.03f);
            bezierPath.cubicTo(35.82f, 17.02f, 35.31f, 16f, 34.8f, 14.98f);
            bezierPath.lineTo(38.75f, 11.03f);
            bezierPath.lineTo(33.4f, 5.68f);
            bezierPath.lineTo(29.45f, 9.63f);
            bezierPath.cubicTo(28.56f, 9.12f, 27.54f, 8.74f, 26.4f, 8.36f);
            bezierPath.lineTo(26.4f, 2.75f);
            bezierPath.lineTo(18.76f, 2.75f);
            bezierPath.lineTo(18.76f, 8.36f);
            bezierPath.cubicTo(17.74f, 8.61f, 16.72f, 9.12f, 15.7f, 9.63f);
            bezierPath.lineTo(11.75f, 5.68f);
            bezierPath.lineTo(6.41f, 11.03f);
            bezierPath.lineTo(10.35f, 14.98f);
            bezierPath.cubicTo(9.84f, 15.87f, 9.46f, 16.89f, 9.08f, 18.03f);
            bezierPath.lineTo(3.48f, 18.03f);
            bezierPath.lineTo(3.48f, 25.68f);
            bezierPath.lineTo(9.08f, 25.68f);
            bezierPath.cubicTo(9.33f, 26.69f, 9.84f, 27.71f, 10.35f, 28.73f);
            bezierPath.lineTo(6.41f, 32.68f);
            bezierPath.lineTo(11.75f, 38.03f);
            bezierPath.lineTo(15.7f, 34.08f);
            bezierPath.cubicTo(16.59f, 34.59f, 17.61f, 34.97f, 18.76f, 35.35f);
            bezierPath.lineTo(18.76f, 40.96f);
            bezierPath.lineTo(26.4f, 40.96f);
            bezierPath.lineTo(26.4f, 35.35f);
            bezierPath.cubicTo(27.42f, 35.1f, 28.44f, 34.59f, 29.45f, 34.08f);
            bezierPath.lineTo(33.4f, 38.03f);
            bezierPath.lineTo(38.75f, 32.68f);
            bezierPath.lineTo(34.8f, 28.73f);
            bezierPath.cubicTo(35.31f, 27.84f, 35.69f, 26.82f, 36.08f, 25.68f);
            bezierPath.lineTo(41.68f, 25.68f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.74f);
            paint.setStrokeCap(Paint.Cap.SQUARE);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(c0D0D6IconColor);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForProfile {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
    }
    
    public static void drawProfile(Canvas canvas) {
        StyleKit.drawProfile(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit);
    }
    
    public static void drawProfile(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForProfile.paint;
        
        // Local Colors
        int c0D0D6IconColor = Color.argb(255, 192, 208, 214);
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForProfile.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForProfile.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Group
        {
            // Bezier
            RectF bezierRect = CacheForProfile.bezierRect;
            bezierRect.set(4f, 27.13f, 41.2f, 40.05f);
            Path bezierPath = CacheForProfile.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(41.2f, 34.35f);
            bezierPath.cubicTo(41.2f, 32.17f, 39.81f, 30.23f, 37.71f, 29.49f);
            bezierPath.cubicTo(34.62f, 28.4f, 29.52f, 27.13f, 22.6f, 27.13f);
            bezierPath.cubicTo(15.68f, 27.13f, 10.58f, 28.4f, 7.49f, 29.49f);
            bezierPath.cubicTo(5.39f, 30.23f, 4f, 32.17f, 4f, 34.35f);
            bezierPath.lineTo(4f, 40.05f);
            bezierPath.lineTo(41.2f, 40.05f);
            bezierPath.lineTo(41.2f, 34.35f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.74f);
            paint.setStrokeCap(Paint.Cap.SQUARE);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(c0D0D6IconColor);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Rectangle
            RectF rectangleRect = CacheForProfile.rectangleRect;
            rectangleRect.set(13.05f, 4f, 31f, 23.47f);
            Path rectanglePath = CacheForProfile.rectanglePath;
            rectanglePath.reset();
            rectanglePath.addRoundRect(rectangleRect, 10f, 10f, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.74f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(c0D0D6IconColor);
            canvas.drawPath(rectanglePath, paint);
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForAlerts {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
    }
    
    public static void drawAlerts(Canvas canvas) {
        StyleKit.drawAlerts(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit);
    }
    
    public static void drawAlerts(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForAlerts.paint;
        
        // Local Colors
        int c0D0D6IconColor = Color.argb(255, 192, 208, 214);
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForAlerts.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForAlerts.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Group
        {
            // Bezier
            RectF bezierRect = CacheForAlerts.bezierRect;
            bezierRect.set(16.4f, 35.68f, 27.11f, 41.3f);
            Path bezierPath = CacheForAlerts.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(16.4f, 35.68f);
            bezierPath.cubicTo(16.4f, 35.81f, 16.4f, 35.81f, 16.4f, 35.94f);
            bezierPath.cubicTo(16.4f, 38.95f, 18.75f, 41.3f, 21.76f, 41.3f);
            bezierPath.cubicTo(24.76f, 41.3f, 27.11f, 38.95f, 27.11f, 35.94f);
            bezierPath.cubicTo(27.11f, 35.81f, 27.11f, 35.81f, 27.11f, 35.68f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.74f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(c0D0D6IconColor);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForAlerts.bezier2Rect;
            bezier2Rect.set(4f, 2.14f, 39.51f, 35.94f);
            Path bezier2Path = CacheForAlerts.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(34.81f, 20.41f);
            bezier2Path.cubicTo(34.81f, 17.54f, 34.81f, 15.06f, 34.81f, 15.06f);
            bezier2Path.cubicTo(34.81f, 8.14f, 28.67f, 2.14f, 21.76f, 2.14f);
            bezier2Path.cubicTo(14.84f, 2.14f, 8.7f, 8.27f, 8.7f, 15.19f);
            bezier2Path.cubicTo(8.7f, 15.19f, 8.7f, 17.54f, 8.7f, 20.41f);
            bezier2Path.cubicTo(8.7f, 26.28f, 4f, 27.33f, 4f, 30.59f);
            bezier2Path.cubicTo(4f, 33.59f, 10.92f, 35.94f, 21.76f, 35.94f);
            bezier2Path.cubicTo(32.59f, 35.94f, 39.51f, 33.59f, 39.51f, 30.59f);
            bezier2Path.cubicTo(39.51f, 27.33f, 34.81f, 26.28f, 34.81f, 20.41f);
            bezier2Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.74f);
            paint.setStrokeCap(Paint.Cap.SQUARE);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(c0D0D6IconColor);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForResources {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
    }
    
    public static void drawResources(Canvas canvas) {
        StyleKit.drawResources(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit);
    }
    
    public static void drawResources(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint = CacheForResources.paint;
        
        // Local Colors
        int c0D0D6IconColor = Color.argb(255, 192, 208, 214);
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForResources.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForResources.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Group
        {
            canvas.save();
            canvas.translate(22.1f, 21.6f);
            currentTransformation.peek().postTranslate(22.1f, 21.6f);
            
            // Bezier
            RectF bezierRect = CacheForResources.bezierRect;
            bezierRect.set(-6.7f, -18.6f, 6.7f, -13.29f);
            Path bezierPath = CacheForResources.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(-6.7f, -13.29f);
            bezierPath.lineTo(-6.7f, -18.6f);
            bezierPath.lineTo(6.7f, -18.6f);
            bezierPath.lineTo(6.7f, -13.29f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.5f);
            paint.setStrokeCap(Paint.Cap.SQUARE);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(c0D0D6IconColor);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForResources.bezier2Rect;
            bezier2Rect.set(-20.1f, -13.29f, 20.1f, 7.97f);
            Path bezier2Path = CacheForResources.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(-4.02f, 7.97f);
            bezier2Path.lineTo(-20.1f, 7.97f);
            bezier2Path.lineTo(-20.1f, -13.29f);
            bezier2Path.lineTo(20.1f, -13.29f);
            bezier2Path.lineTo(20.1f, 7.97f);
            bezier2Path.lineTo(4.02f, 7.97f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.5f);
            paint.setStrokeCap(Paint.Cap.SQUARE);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(c0D0D6IconColor);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
            
            // Bezier 3
            RectF bezier3Rect = CacheForResources.bezier3Rect;
            bezier3Rect.set(-17.42f, 7.97f, 17.42f, 18.6f);
            Path bezier3Path = CacheForResources.bezier3Path;
            bezier3Path.reset();
            bezier3Path.moveTo(17.42f, 7.97f);
            bezier3Path.lineTo(17.42f, 18.6f);
            bezier3Path.lineTo(-17.42f, 18.6f);
            bezier3Path.lineTo(-17.42f, 7.97f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.5f);
            paint.setStrokeCap(Paint.Cap.SQUARE);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(c0D0D6IconColor);
            canvas.drawPath(bezier3Path, paint);
            canvas.restore();
            
            // Rectangle
            RectF rectangleRect = CacheForResources.rectangleRect;
            rectangleRect.set(-4.03f, 3.37f, 4.02f, 11.82f);
            Path rectanglePath = CacheForResources.rectanglePath;
            rectanglePath.reset();
            rectanglePath.moveTo(rectangleRect.left, rectangleRect.top);
            rectanglePath.lineTo(rectangleRect.right, rectangleRect.top);
            rectanglePath.lineTo(rectangleRect.right, rectangleRect.bottom);
            rectanglePath.lineTo(rectangleRect.left, rectangleRect.bottom);
            rectanglePath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.5f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(c0D0D6IconColor);
            canvas.drawPath(rectanglePath, paint);
            canvas.restore();
            
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForGoals {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF bezier4Rect = new RectF();
        private static Path bezier4Path = new Path();
        private static RectF bezier5Rect = new RectF();
        private static Path bezier5Path = new Path();
    }
    
    public static void drawGoals(Canvas canvas) {
        StyleKit.drawGoals(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit);
    }
    
    public static void drawGoals(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForGoals.paint;
        
        // Local Colors
        int c0D0D6IconColor = Color.argb(255, 192, 208, 214);
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForGoals.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForGoals.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Group 4
        {
            // Group
            {
                // Oval
                RectF ovalRect = CacheForGoals.ovalRect;
                ovalRect.set(12f, 13f, 31.8f, 32.8f);
                Path ovalPath = CacheForGoals.ovalPath;
                ovalPath.reset();
                ovalPath.addOval(ovalRect, Path.Direction.CW);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2.74f);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(c0D0D6IconColor);
                canvas.drawPath(ovalPath, paint);
                canvas.restore();
                
                // Bezier
                RectF bezierRect = CacheForGoals.bezierRect;
                bezierRect.set(18.41f, 20.46f, 26.65f, 25.47f);
                Path bezierPath = CacheForGoals.bezierPath;
                bezierPath.reset();
                bezierPath.moveTo(18.41f, 22.96f);
                bezierPath.lineTo(21.16f, 25.47f);
                bezierPath.lineTo(26.65f, 20.46f);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2.74f);
                paint.setStrokeCap(Paint.Cap.SQUARE);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(c0D0D6IconColor);
                canvas.drawPath(bezierPath, paint);
                canvas.restore();
            }
            
            // Group 2
            {
                // Bezier 2
                RectF bezier2Rect = CacheForGoals.bezier2Rect;
                bezier2Rect.set(22.08f, 3.19f, 42.68f, 21.97f);
                Path bezier2Path = CacheForGoals.bezier2Path;
                bezier2Path.reset();
                bezier2Path.moveTo(22.08f, 3.19f);
                bezier2Path.lineTo(32.38f, 3.19f);
                bezier2Path.cubicTo(38.01f, 3.19f, 42.68f, 7.45f, 42.68f, 12.58f);
                bezier2Path.lineTo(42.68f, 12.58f);
                bezier2Path.cubicTo(42.68f, 17.71f, 38.01f, 21.97f, 32.38f, 21.97f);
                bezier2Path.lineTo(31.69f, 21.97f);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2.74f);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(c0D0D6IconColor);
                canvas.drawPath(bezier2Path, paint);
                canvas.restore();
                
                // Bezier 3
                RectF bezier3Rect = CacheForGoals.bezier3Rect;
                bezier3Rect.set(16.58f, 3.19f, 17.96f, 3.19f);
                Path bezier3Path = CacheForGoals.bezier3Path;
                bezier3Path.reset();
                bezier3Path.moveTo(16.58f, 3.19f);
                bezier3Path.lineTo(17.96f, 3.19f);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2.74f);
                paint.setStrokeCap(Paint.Cap.SQUARE);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(c0D0D6IconColor);
                canvas.drawPath(bezier3Path, paint);
                canvas.restore();
            }
            
            // Group 3
            {
                // Bezier 4
                RectF bezier4Rect = CacheForGoals.bezier4Rect;
                bezier4Rect.set(1.48f, 21.97f, 22.08f, 40.74f);
                Path bezier4Path = CacheForGoals.bezier4Path;
                bezier4Path.reset();
                bezier4Path.moveTo(12.46f, 21.97f);
                bezier4Path.lineTo(11.78f, 21.97f);
                bezier4Path.cubicTo(6.15f, 21.97f, 1.48f, 26.22f, 1.48f, 31.36f);
                bezier4Path.lineTo(1.48f, 31.36f);
                bezier4Path.cubicTo(1.48f, 36.49f, 6.15f, 40.74f, 11.78f, 40.74f);
                bezier4Path.lineTo(22.08f, 40.74f);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2.74f);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(c0D0D6IconColor);
                canvas.drawPath(bezier4Path, paint);
                canvas.restore();
                
                // Bezier 5
                RectF bezier5Rect = CacheForGoals.bezier5Rect;
                bezier5Rect.set(26.2f, 40.74f, 27.57f, 40.74f);
                Path bezier5Path = CacheForGoals.bezier5Path;
                bezier5Path.reset();
                bezier5Path.moveTo(26.2f, 40.74f);
                bezier5Path.lineTo(27.57f, 40.74f);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2.74f);
                paint.setStrokeCap(Paint.Cap.SQUARE);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(c0D0D6IconColor);
                canvas.drawPath(bezier5Path, paint);
                canvas.restore();
            }
        }
        
        canvas.restore();
    }
    
    private static class CacheForHelp {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
    }
    
    public static void drawHelp(Canvas canvas) {
        StyleKit.drawHelp(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit);
    }
    
    public static void drawHelp(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForHelp.paint;
        
        // Local Colors
        int c0D0D6IconColor = Color.argb(255, 192, 208, 214);
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForHelp.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForHelp.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Group
        {
            // Bezier
            RectF bezierRect = CacheForHelp.bezierRect;
            bezierRect.set(7.34f, 22.98f, 12.7f, 29.23f);
            Path bezierPath = CacheForHelp.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(7.34f, 29.23f);
            bezierPath.lineTo(12.7f, 22.98f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.74f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(c0D0D6IconColor);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForHelp.bezier2Rect;
            bezier2Rect.set(7.34f, 12.99f, 36.82f, 24.23f);
            Path bezier2Path = CacheForHelp.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(7.34f, 12.99f);
            bezier2Path.lineTo(22.08f, 24.23f);
            bezier2Path.lineTo(36.82f, 12.99f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.74f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(c0D0D6IconColor);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
            
            // Rectangle
            RectF rectangleRect = CacheForHelp.rectangleRect;
            rectangleRect.set(2f, 8f, 42.2f, 35.5f);
            Path rectanglePath = CacheForHelp.rectanglePath;
            rectanglePath.reset();
            rectanglePath.moveTo(rectangleRect.left, rectangleRect.top);
            rectanglePath.lineTo(rectangleRect.right, rectangleRect.top);
            rectanglePath.lineTo(rectangleRect.right, rectangleRect.bottom);
            rectanglePath.lineTo(rectangleRect.left, rectangleRect.bottom);
            rectanglePath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.74f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(c0D0D6IconColor);
            canvas.drawPath(rectanglePath, paint);
            canvas.restore();
            
            // Bezier 3
            RectF bezier3Rect = CacheForHelp.bezier3Rect;
            bezier3Rect.set(31.46f, 22.98f, 36.82f, 29.23f);
            Path bezier3Path = CacheForHelp.bezier3Path;
            bezier3Path.reset();
            bezier3Path.moveTo(36.82f, 29.23f);
            bezier3Path.lineTo(31.46f, 22.98f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.74f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(c0D0D6IconColor);
            canvas.drawPath(bezier3Path, paint);
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForInitiatives {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF bezier4Rect = new RectF();
        private static Path bezier4Path = new Path();
        private static RectF bezier5Rect = new RectF();
        private static Path bezier5Path = new Path();
        private static RectF bezier6Rect = new RectF();
        private static Path bezier6Path = new Path();
        private static RectF bezier7Rect = new RectF();
        private static Path bezier7Path = new Path();
        private static RectF bezier8Rect = new RectF();
        private static Path bezier8Path = new Path();
    }
    
    public static void drawInitiatives(Canvas canvas) {
        StyleKit.drawInitiatives(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit);
    }
    
    public static void drawInitiatives(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForInitiatives.paint;
        
        // Local Colors
        int c0D0D6IconColor = Color.argb(255, 192, 208, 214);
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForInitiatives.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForInitiatives.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Group 2
        {
            // Rectangle
            RectF rectangleRect = CacheForInitiatives.rectangleRect;
            rectangleRect.set(5f, 2f, 40f, 42f);
            Path rectanglePath = CacheForInitiatives.rectanglePath;
            rectanglePath.reset();
            rectanglePath.addRect(rectangleRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.74f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(c0D0D6IconColor);
            canvas.drawPath(rectanglePath, paint);
            canvas.restore();
            
            // Group
            {
                // Bezier
                RectF bezierRect = CacheForInitiatives.bezierRect;
                bezierRect.set(19.61f, 25.87f, 27.65f, 25.87f);
                Path bezierPath = CacheForInitiatives.bezierPath;
                bezierPath.reset();
                bezierPath.moveTo(27.65f, 25.87f);
                bezierPath.lineTo(19.61f, 25.87f);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2.74f);
                paint.setStrokeCap(Paint.Cap.SQUARE);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(c0D0D6IconColor);
                canvas.drawPath(bezierPath, paint);
                canvas.restore();
                
                // Bezier 2
                RectF bezier2Rect = CacheForInitiatives.bezier2Rect;
                bezier2Rect.set(10.93f, 25.87f, 12.27f, 25.87f);
                Path bezier2Path = CacheForInitiatives.bezier2Path;
                bezier2Path.reset();
                bezier2Path.moveTo(12.27f, 25.87f);
                bezier2Path.lineTo(10.93f, 25.87f);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2.74f);
                paint.setStrokeCap(Paint.Cap.SQUARE);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(c0D0D6IconColor);
                canvas.drawPath(bezier2Path, paint);
                canvas.restore();
                
                // Bezier 3
                RectF bezier3Rect = CacheForInitiatives.bezier3Rect;
                bezier3Rect.set(19.61f, 33.55f, 22.29f, 33.55f);
                Path bezier3Path = CacheForInitiatives.bezier3Path;
                bezier3Path.reset();
                bezier3Path.moveTo(22.29f, 33.55f);
                bezier3Path.lineTo(19.61f, 33.55f);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2.74f);
                paint.setStrokeCap(Paint.Cap.SQUARE);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(c0D0D6IconColor);
                canvas.drawPath(bezier3Path, paint);
                canvas.restore();
                
                // Bezier 4
                RectF bezier4Rect = CacheForInitiatives.bezier4Rect;
                bezier4Rect.set(10.93f, 33.55f, 12.27f, 33.55f);
                Path bezier4Path = CacheForInitiatives.bezier4Path;
                bezier4Path.reset();
                bezier4Path.moveTo(12.27f, 33.55f);
                bezier4Path.lineTo(10.93f, 33.55f);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2.74f);
                paint.setStrokeCap(Paint.Cap.SQUARE);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(c0D0D6IconColor);
                canvas.drawPath(bezier4Path, paint);
                canvas.restore();
                
                // Bezier 5
                RectF bezier5Rect = CacheForInitiatives.bezier5Rect;
                bezier5Rect.set(19.61f, 16.27f, 23.63f, 16.28f);
                Path bezier5Path = CacheForInitiatives.bezier5Path;
                bezier5Path.reset();
                bezier5Path.moveTo(23.63f, 16.28f);
                bezier5Path.lineTo(19.61f, 16.28f);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2.74f);
                paint.setStrokeCap(Paint.Cap.SQUARE);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(c0D0D6IconColor);
                canvas.drawPath(bezier5Path, paint);
                canvas.restore();
                
                // Bezier 6
                RectF bezier6Rect = CacheForInitiatives.bezier6Rect;
                bezier6Rect.set(10.93f, 16.27f, 12.27f, 16.28f);
                Path bezier6Path = CacheForInitiatives.bezier6Path;
                bezier6Path.reset();
                bezier6Path.moveTo(12.27f, 16.28f);
                bezier6Path.lineTo(10.93f, 16.28f);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2.74f);
                paint.setStrokeCap(Paint.Cap.SQUARE);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(c0D0D6IconColor);
                canvas.drawPath(bezier6Path, paint);
                canvas.restore();
                
                // Bezier 7
                RectF bezier7Rect = CacheForInitiatives.bezier7Rect;
                bezier7Rect.set(19.61f, 8.6f, 27.65f, 8.6f);
                Path bezier7Path = CacheForInitiatives.bezier7Path;
                bezier7Path.reset();
                bezier7Path.moveTo(27.65f, 8.6f);
                bezier7Path.lineTo(19.61f, 8.6f);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2.74f);
                paint.setStrokeCap(Paint.Cap.SQUARE);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(c0D0D6IconColor);
                canvas.drawPath(bezier7Path, paint);
                canvas.restore();
                
                // Bezier 8
                RectF bezier8Rect = CacheForInitiatives.bezier8Rect;
                bezier8Rect.set(10.93f, 8.6f, 12.27f, 8.6f);
                Path bezier8Path = CacheForInitiatives.bezier8Path;
                bezier8Path.reset();
                bezier8Path.moveTo(12.27f, 8.6f);
                bezier8Path.lineTo(10.93f, 8.6f);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2.74f);
                paint.setStrokeCap(Paint.Cap.SQUARE);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(c0D0D6IconColor);
                canvas.drawPath(bezier8Path, paint);
                canvas.restore();
            }
        }
        
        canvas.restore();
    }
    
    private static class CacheForAlertsSelected {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
    }
    
    public static void drawAlertsSelected(Canvas canvas) {
        StyleKit.drawAlertsSelected(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit);
    }
    
    public static void drawAlertsSelected(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForAlertsSelected.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForAlertsSelected.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForAlertsSelected.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Group
        {
            // Bezier
            RectF bezierRect = CacheForAlertsSelected.bezierRect;
            bezierRect.set(16.4f, 35.68f, 27.11f, 41.3f);
            Path bezierPath = CacheForAlertsSelected.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(16.4f, 35.68f);
            bezierPath.cubicTo(16.4f, 35.81f, 16.4f, 35.81f, 16.4f, 35.94f);
            bezierPath.cubicTo(16.4f, 38.95f, 18.75f, 41.3f, 21.76f, 41.3f);
            bezierPath.cubicTo(24.76f, 41.3f, 27.11f, 38.95f, 27.11f, 35.94f);
            bezierPath.cubicTo(27.11f, 35.81f, 27.11f, 35.81f, 27.11f, 35.68f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.74f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit.fFFFFF);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForAlertsSelected.bezier2Rect;
            bezier2Rect.set(4f, 2.14f, 39.51f, 35.94f);
            Path bezier2Path = CacheForAlertsSelected.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(34.81f, 20.41f);
            bezier2Path.cubicTo(34.81f, 17.54f, 34.81f, 15.06f, 34.81f, 15.06f);
            bezier2Path.cubicTo(34.81f, 8.14f, 28.67f, 2.14f, 21.76f, 2.14f);
            bezier2Path.cubicTo(14.84f, 2.14f, 8.7f, 8.27f, 8.7f, 15.19f);
            bezier2Path.cubicTo(8.7f, 15.19f, 8.7f, 17.54f, 8.7f, 20.41f);
            bezier2Path.cubicTo(8.7f, 26.28f, 4f, 27.33f, 4f, 30.59f);
            bezier2Path.cubicTo(4f, 33.59f, 10.92f, 35.94f, 21.76f, 35.94f);
            bezier2Path.cubicTo(32.59f, 35.94f, 39.51f, 33.59f, 39.51f, 30.59f);
            bezier2Path.cubicTo(39.51f, 27.33f, 34.81f, 26.28f, 34.81f, 20.41f);
            bezier2Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.74f);
            paint.setStrokeCap(Paint.Cap.SQUARE);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit.fFFFFF);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForRelationshipsSelected {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF oval2Rect = new RectF();
        private static Path oval2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF oval3Rect = new RectF();
        private static Path oval3Path = new Path();
    }
    
    public static void drawRelationshipsSelected(Canvas canvas) {
        StyleKit.drawRelationshipsSelected(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit);
    }
    
    public static void drawRelationshipsSelected(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForRelationshipsSelected.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForRelationshipsSelected.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForRelationshipsSelected.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Group
        {
            // Bezier
            RectF bezierRect = CacheForRelationshipsSelected.bezierRect;
            bezierRect.set(3f, 16.82f, 15.2f, 35.66f);
            Path bezierPath = CacheForRelationshipsSelected.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(15.2f, 18.98f);
            bezierPath.cubicTo(14.6f, 17.7f, 13.3f, 16.82f, 11.79f, 16.82f);
            bezierPath.lineTo(6.77f, 16.82f);
            bezierPath.cubicTo(4.69f, 16.82f, 3f, 18.5f, 3f, 20.59f);
            bezierPath.lineTo(3f, 26.87f);
            bezierPath.lineTo(5.51f, 26.87f);
            bezierPath.lineTo(5.51f, 35.66f);
            bezierPath.lineTo(13.05f, 35.66f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.5f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit.fFFFFF);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Oval
            RectF ovalRect = CacheForRelationshipsSelected.ovalRect;
            ovalRect.set(6.05f, 6.05f, 13.15f, 13.15f);
            Path ovalPath = CacheForRelationshipsSelected.ovalPath;
            ovalPath.reset();
            ovalPath.addOval(ovalRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.5f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit.fFFFFF);
            canvas.drawPath(ovalPath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForRelationshipsSelected.bezier2Rect;
            bezier2Rect.set(28.48f, 16.82f, 40.68f, 35.66f);
            Path bezier2Path = CacheForRelationshipsSelected.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(28.48f, 18.98f);
            bezier2Path.cubicTo(29.09f, 17.7f, 30.39f, 16.82f, 31.89f, 16.82f);
            bezier2Path.lineTo(36.92f, 16.82f);
            bezier2Path.cubicTo(39f, 16.82f, 40.68f, 18.5f, 40.68f, 20.59f);
            bezier2Path.lineTo(40.68f, 26.87f);
            bezier2Path.lineTo(38.17f, 26.87f);
            bezier2Path.lineTo(38.17f, 35.66f);
            bezier2Path.lineTo(30.64f, 35.66f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.5f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit.fFFFFF);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
            
            // Oval 2
            RectF oval2Rect = CacheForRelationshipsSelected.oval2Rect;
            oval2Rect.set(30.5f, 6.05f, 37.6f, 13.15f);
            Path oval2Path = CacheForRelationshipsSelected.oval2Path;
            oval2Path.reset();
            oval2Path.addOval(oval2Rect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.5f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit.fFFFFF);
            canvas.drawPath(oval2Path, paint);
            canvas.restore();
            
            // Bezier 3
            RectF bezier3Rect = CacheForRelationshipsSelected.bezier3Rect;
            bezier3Rect.set(14.31f, 16.82f, 29.38f, 40.68f);
            Path bezier3Path = CacheForRelationshipsSelected.bezier3Path;
            bezier3Path.reset();
            bezier3Path.moveTo(25.61f, 40.68f);
            bezier3Path.lineTo(18.07f, 40.68f);
            bezier3Path.lineTo(18.07f, 30.64f);
            bezier3Path.lineTo(14.31f, 30.64f);
            bezier3Path.lineTo(14.31f, 21.84f);
            bezier3Path.cubicTo(14.31f, 19.07f, 16.56f, 16.82f, 19.33f, 16.82f);
            bezier3Path.lineTo(24.35f, 16.82f);
            bezier3Path.cubicTo(27.13f, 16.82f, 29.38f, 19.07f, 29.38f, 21.84f);
            bezier3Path.lineTo(29.38f, 30.64f);
            bezier3Path.lineTo(25.61f, 30.64f);
            bezier3Path.lineTo(25.61f, 40.68f);
            bezier3Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.5f);
            paint.setStrokeCap(Paint.Cap.SQUARE);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit.fFFFFF);
            canvas.drawPath(bezier3Path, paint);
            canvas.restore();
            
            // Oval 3
            RectF oval3Rect = CacheForRelationshipsSelected.oval3Rect;
            oval3Rect.set(16.75f, 3f, 26.95f, 13.2f);
            Path oval3Path = CacheForRelationshipsSelected.oval3Path;
            oval3Path.reset();
            oval3Path.addOval(oval3Rect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.5f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit.fFFFFF);
            canvas.drawPath(oval3Path, paint);
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForHelpSelected {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
    }
    
    public static void drawHelpSelected(Canvas canvas) {
        StyleKit.drawHelpSelected(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit);
    }
    
    public static void drawHelpSelected(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForHelpSelected.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForHelpSelected.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForHelpSelected.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Group
        {
            // Bezier
            RectF bezierRect = CacheForHelpSelected.bezierRect;
            bezierRect.set(7.34f, 22.98f, 12.7f, 29.23f);
            Path bezierPath = CacheForHelpSelected.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(7.34f, 29.23f);
            bezierPath.lineTo(12.7f, 22.98f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.74f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit.fFFFFF);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForHelpSelected.bezier2Rect;
            bezier2Rect.set(7.34f, 12.99f, 36.82f, 24.23f);
            Path bezier2Path = CacheForHelpSelected.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(7.34f, 12.99f);
            bezier2Path.lineTo(22.08f, 24.23f);
            bezier2Path.lineTo(36.82f, 12.99f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.74f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit.fFFFFF);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
            
            // Rectangle
            RectF rectangleRect = CacheForHelpSelected.rectangleRect;
            rectangleRect.set(2f, 8f, 42.2f, 35.5f);
            Path rectanglePath = CacheForHelpSelected.rectanglePath;
            rectanglePath.reset();
            rectanglePath.moveTo(rectangleRect.left, rectangleRect.top);
            rectanglePath.lineTo(rectangleRect.right, rectangleRect.top);
            rectanglePath.lineTo(rectangleRect.right, rectangleRect.bottom);
            rectanglePath.lineTo(rectangleRect.left, rectangleRect.bottom);
            rectanglePath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.74f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit.fFFFFF);
            canvas.drawPath(rectanglePath, paint);
            canvas.restore();
            
            // Bezier 3
            RectF bezier3Rect = CacheForHelpSelected.bezier3Rect;
            bezier3Rect.set(31.46f, 22.98f, 36.82f, 29.23f);
            Path bezier3Path = CacheForHelpSelected.bezier3Path;
            bezier3Path.reset();
            bezier3Path.moveTo(36.82f, 29.23f);
            bezier3Path.lineTo(31.46f, 22.98f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.74f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit.fFFFFF);
            canvas.drawPath(bezier3Path, paint);
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForPlanSelected {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    public static void drawPlanSelected(Canvas canvas) {
        StyleKit.drawPlanSelected(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit);
    }
    
    public static void drawPlanSelected(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForPlanSelected.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForPlanSelected.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForPlanSelected.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Bezier
        RectF bezierRect = CacheForPlanSelected.bezierRect;
        bezierRect.set(3f, 2f, 41f, 42f);
        Path bezierPath = CacheForPlanSelected.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(22.7f, 2f);
        bezierPath.lineTo(3f, 16.67f);
        bezierPath.lineTo(3f, 42f);
        bezierPath.lineTo(15.67f, 42f);
        bezierPath.lineTo(15.67f, 28.67f);
        bezierPath.lineTo(28.33f, 28.67f);
        bezierPath.lineTo(28.33f, 42f);
        bezierPath.lineTo(41f, 42f);
        bezierPath.lineTo(41f, 16.67f);
        bezierPath.lineTo(22.7f, 2f);
        bezierPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(2.74f);
        paint.setStrokeCap(Paint.Cap.SQUARE);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(StyleKit.fFFFFF);
        canvas.drawPath(bezierPath, paint);
        canvas.restore();
        
        canvas.restore();
    }
    
    private static class CacheForInitiativesSelected {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF bezier4Rect = new RectF();
        private static Path bezier4Path = new Path();
        private static RectF bezier5Rect = new RectF();
        private static Path bezier5Path = new Path();
        private static RectF bezier6Rect = new RectF();
        private static Path bezier6Path = new Path();
        private static RectF bezier7Rect = new RectF();
        private static Path bezier7Path = new Path();
        private static RectF bezier8Rect = new RectF();
        private static Path bezier8Path = new Path();
    }
    
    public static void drawInitiativesSelected(Canvas canvas) {
        StyleKit.drawInitiativesSelected(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit);
    }
    
    public static void drawInitiativesSelected(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForInitiativesSelected.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForInitiativesSelected.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForInitiativesSelected.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Group 2
        {
            // Rectangle
            RectF rectangleRect = CacheForInitiativesSelected.rectangleRect;
            rectangleRect.set(5f, 2f, 40f, 42f);
            Path rectanglePath = CacheForInitiativesSelected.rectanglePath;
            rectanglePath.reset();
            rectanglePath.addRect(rectangleRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.74f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit.fFFFFF);
            canvas.drawPath(rectanglePath, paint);
            canvas.restore();
            
            // Group
            {
                // Bezier
                RectF bezierRect = CacheForInitiativesSelected.bezierRect;
                bezierRect.set(19.61f, 25.87f, 27.65f, 25.87f);
                Path bezierPath = CacheForInitiativesSelected.bezierPath;
                bezierPath.reset();
                bezierPath.moveTo(27.65f, 25.87f);
                bezierPath.lineTo(19.61f, 25.87f);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2.74f);
                paint.setStrokeCap(Paint.Cap.SQUARE);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(StyleKit.fFFFFF);
                canvas.drawPath(bezierPath, paint);
                canvas.restore();
                
                // Bezier 2
                RectF bezier2Rect = CacheForInitiativesSelected.bezier2Rect;
                bezier2Rect.set(10.93f, 25.87f, 12.27f, 25.87f);
                Path bezier2Path = CacheForInitiativesSelected.bezier2Path;
                bezier2Path.reset();
                bezier2Path.moveTo(12.27f, 25.87f);
                bezier2Path.lineTo(10.93f, 25.87f);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2.74f);
                paint.setStrokeCap(Paint.Cap.SQUARE);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(StyleKit.fFFFFF);
                canvas.drawPath(bezier2Path, paint);
                canvas.restore();
                
                // Bezier 3
                RectF bezier3Rect = CacheForInitiativesSelected.bezier3Rect;
                bezier3Rect.set(19.61f, 33.55f, 22.29f, 33.55f);
                Path bezier3Path = CacheForInitiativesSelected.bezier3Path;
                bezier3Path.reset();
                bezier3Path.moveTo(22.29f, 33.55f);
                bezier3Path.lineTo(19.61f, 33.55f);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2.74f);
                paint.setStrokeCap(Paint.Cap.SQUARE);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(StyleKit.fFFFFF);
                canvas.drawPath(bezier3Path, paint);
                canvas.restore();
                
                // Bezier 4
                RectF bezier4Rect = CacheForInitiativesSelected.bezier4Rect;
                bezier4Rect.set(10.93f, 33.55f, 12.27f, 33.55f);
                Path bezier4Path = CacheForInitiativesSelected.bezier4Path;
                bezier4Path.reset();
                bezier4Path.moveTo(12.27f, 33.55f);
                bezier4Path.lineTo(10.93f, 33.55f);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2.74f);
                paint.setStrokeCap(Paint.Cap.SQUARE);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(StyleKit.fFFFFF);
                canvas.drawPath(bezier4Path, paint);
                canvas.restore();
                
                // Bezier 5
                RectF bezier5Rect = CacheForInitiativesSelected.bezier5Rect;
                bezier5Rect.set(19.61f, 16.27f, 23.63f, 16.28f);
                Path bezier5Path = CacheForInitiativesSelected.bezier5Path;
                bezier5Path.reset();
                bezier5Path.moveTo(23.63f, 16.28f);
                bezier5Path.lineTo(19.61f, 16.28f);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2.74f);
                paint.setStrokeCap(Paint.Cap.SQUARE);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(StyleKit.fFFFFF);
                canvas.drawPath(bezier5Path, paint);
                canvas.restore();
                
                // Bezier 6
                RectF bezier6Rect = CacheForInitiativesSelected.bezier6Rect;
                bezier6Rect.set(10.93f, 16.27f, 12.27f, 16.28f);
                Path bezier6Path = CacheForInitiativesSelected.bezier6Path;
                bezier6Path.reset();
                bezier6Path.moveTo(12.27f, 16.28f);
                bezier6Path.lineTo(10.93f, 16.28f);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2.74f);
                paint.setStrokeCap(Paint.Cap.SQUARE);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(StyleKit.fFFFFF);
                canvas.drawPath(bezier6Path, paint);
                canvas.restore();
                
                // Bezier 7
                RectF bezier7Rect = CacheForInitiativesSelected.bezier7Rect;
                bezier7Rect.set(19.61f, 8.6f, 27.65f, 8.6f);
                Path bezier7Path = CacheForInitiativesSelected.bezier7Path;
                bezier7Path.reset();
                bezier7Path.moveTo(27.65f, 8.6f);
                bezier7Path.lineTo(19.61f, 8.6f);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2.74f);
                paint.setStrokeCap(Paint.Cap.SQUARE);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(StyleKit.fFFFFF);
                canvas.drawPath(bezier7Path, paint);
                canvas.restore();
                
                // Bezier 8
                RectF bezier8Rect = CacheForInitiativesSelected.bezier8Rect;
                bezier8Rect.set(10.93f, 8.6f, 12.27f, 8.6f);
                Path bezier8Path = CacheForInitiativesSelected.bezier8Path;
                bezier8Path.reset();
                bezier8Path.moveTo(12.27f, 8.6f);
                bezier8Path.lineTo(10.93f, 8.6f);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(2.74f);
                paint.setStrokeCap(Paint.Cap.SQUARE);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(StyleKit.fFFFFF);
                canvas.drawPath(bezier8Path, paint);
                canvas.restore();
            }
        }
        
        canvas.restore();
    }
    
    private static class CacheForSettingsSelected {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    public static void drawSettingsSelected(Canvas canvas) {
        StyleKit.drawSettingsSelected(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit);
    }
    
    public static void drawSettingsSelected(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForSettingsSelected.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForSettingsSelected.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForSettingsSelected.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Oval
        RectF ovalRect = CacheForSettingsSelected.ovalRect;
        ovalRect.set(18.25f, 16.5f, 26.95f, 25.2f);
        Path ovalPath = CacheForSettingsSelected.ovalPath;
        ovalPath.reset();
        ovalPath.addOval(ovalRect, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(2.74f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(StyleKit.fFFFFF);
        canvas.drawPath(ovalPath, paint);
        canvas.restore();
        
        // Bezier
        RectF bezierRect = CacheForSettingsSelected.bezierRect;
        bezierRect.set(3.48f, 2.75f, 41.68f, 40.96f);
        Path bezierPath = CacheForSettingsSelected.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(41.68f, 25.68f);
        bezierPath.lineTo(41.68f, 18.03f);
        bezierPath.lineTo(36.08f, 18.03f);
        bezierPath.cubicTo(35.82f, 17.02f, 35.31f, 16f, 34.8f, 14.98f);
        bezierPath.lineTo(38.75f, 11.03f);
        bezierPath.lineTo(33.4f, 5.68f);
        bezierPath.lineTo(29.45f, 9.63f);
        bezierPath.cubicTo(28.56f, 9.12f, 27.54f, 8.74f, 26.4f, 8.36f);
        bezierPath.lineTo(26.4f, 2.75f);
        bezierPath.lineTo(18.76f, 2.75f);
        bezierPath.lineTo(18.76f, 8.36f);
        bezierPath.cubicTo(17.74f, 8.61f, 16.72f, 9.12f, 15.7f, 9.63f);
        bezierPath.lineTo(11.75f, 5.68f);
        bezierPath.lineTo(6.41f, 11.03f);
        bezierPath.lineTo(10.35f, 14.98f);
        bezierPath.cubicTo(9.84f, 15.87f, 9.46f, 16.89f, 9.08f, 18.03f);
        bezierPath.lineTo(3.48f, 18.03f);
        bezierPath.lineTo(3.48f, 25.68f);
        bezierPath.lineTo(9.08f, 25.68f);
        bezierPath.cubicTo(9.33f, 26.69f, 9.84f, 27.71f, 10.35f, 28.73f);
        bezierPath.lineTo(6.41f, 32.68f);
        bezierPath.lineTo(11.75f, 38.03f);
        bezierPath.lineTo(15.7f, 34.08f);
        bezierPath.cubicTo(16.59f, 34.59f, 17.61f, 34.97f, 18.76f, 35.35f);
        bezierPath.lineTo(18.76f, 40.96f);
        bezierPath.lineTo(26.4f, 40.96f);
        bezierPath.lineTo(26.4f, 35.35f);
        bezierPath.cubicTo(27.42f, 35.1f, 28.44f, 34.59f, 29.45f, 34.08f);
        bezierPath.lineTo(33.4f, 38.03f);
        bezierPath.lineTo(38.75f, 32.68f);
        bezierPath.lineTo(34.8f, 28.73f);
        bezierPath.cubicTo(35.31f, 27.84f, 35.69f, 26.82f, 36.08f, 25.68f);
        bezierPath.lineTo(41.68f, 25.68f);
        bezierPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(2.74f);
        paint.setStrokeCap(Paint.Cap.SQUARE);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(StyleKit.fFFFFF);
        canvas.drawPath(bezierPath, paint);
        canvas.restore();
        
        canvas.restore();
    }
    
    private static class CacheForProfileSelected {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
    }
    
    public static void drawProfileSelected(Canvas canvas) {
        StyleKit.drawProfileSelected(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit);
    }
    
    public static void drawProfileSelected(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForProfileSelected.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForProfileSelected.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForProfileSelected.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Group
        {
            // Bezier
            RectF bezierRect = CacheForProfileSelected.bezierRect;
            bezierRect.set(4f, 27.13f, 41.2f, 40.05f);
            Path bezierPath = CacheForProfileSelected.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(41.2f, 34.35f);
            bezierPath.cubicTo(41.2f, 32.17f, 39.81f, 30.23f, 37.71f, 29.49f);
            bezierPath.cubicTo(34.62f, 28.4f, 29.52f, 27.13f, 22.6f, 27.13f);
            bezierPath.cubicTo(15.68f, 27.13f, 10.58f, 28.4f, 7.49f, 29.49f);
            bezierPath.cubicTo(5.39f, 30.23f, 4f, 32.17f, 4f, 34.35f);
            bezierPath.lineTo(4f, 40.05f);
            bezierPath.lineTo(41.2f, 40.05f);
            bezierPath.lineTo(41.2f, 34.35f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.74f);
            paint.setStrokeCap(Paint.Cap.SQUARE);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit.fFFFFF);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Rectangle
            RectF rectangleRect = CacheForProfileSelected.rectangleRect;
            rectangleRect.set(13.05f, 4f, 31f, 23.47f);
            Path rectanglePath = CacheForProfileSelected.rectanglePath;
            rectanglePath.reset();
            rectanglePath.addRoundRect(rectangleRect, 10f, 10f, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.74f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit.fFFFFF);
            canvas.drawPath(rectanglePath, paint);
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForResourcesSelected {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
    }
    
    public static void drawResourcesSelected(Canvas canvas) {
        StyleKit.drawResourcesSelected(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit);
    }
    
    public static void drawResourcesSelected(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForResourcesSelected.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForResourcesSelected.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForResourcesSelected.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Group
        {
            // Bezier
            RectF bezierRect = CacheForResourcesSelected.bezierRect;
            bezierRect.set(15.4f, 3f, 28.8f, 8.32f);
            Path bezierPath = CacheForResourcesSelected.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(15.4f, 8.32f);
            bezierPath.lineTo(15.4f, 3f);
            bezierPath.lineTo(28.8f, 3f);
            bezierPath.lineTo(28.8f, 8.32f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.5f);
            paint.setStrokeCap(Paint.Cap.SQUARE);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit.fFFFFF);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForResourcesSelected.bezier2Rect;
            bezier2Rect.set(2f, 8.32f, 42.2f, 29.58f);
            Path bezier2Path = CacheForResourcesSelected.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(18.08f, 29.58f);
            bezier2Path.lineTo(2f, 29.58f);
            bezier2Path.lineTo(2f, 8.32f);
            bezier2Path.lineTo(42.2f, 8.32f);
            bezier2Path.lineTo(42.2f, 29.58f);
            bezier2Path.lineTo(26.12f, 29.58f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.5f);
            paint.setStrokeCap(Paint.Cap.SQUARE);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit.fFFFFF);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
            
            // Bezier 3
            RectF bezier3Rect = CacheForResourcesSelected.bezier3Rect;
            bezier3Rect.set(4.68f, 29.58f, 39.52f, 40.21f);
            Path bezier3Path = CacheForResourcesSelected.bezier3Path;
            bezier3Path.reset();
            bezier3Path.moveTo(39.52f, 29.58f);
            bezier3Path.lineTo(39.52f, 40.21f);
            bezier3Path.lineTo(4.68f, 40.21f);
            bezier3Path.lineTo(4.68f, 29.58f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.5f);
            paint.setStrokeCap(Paint.Cap.SQUARE);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit.fFFFFF);
            canvas.drawPath(bezier3Path, paint);
            canvas.restore();
            
            // Rectangle
            RectF rectangleRect = CacheForResourcesSelected.rectangleRect;
            rectangleRect.set(18.08f, 24.97f, 26.13f, 33.42f);
            Path rectanglePath = CacheForResourcesSelected.rectanglePath;
            rectanglePath.reset();
            rectanglePath.moveTo(rectangleRect.left, rectangleRect.top);
            rectanglePath.lineTo(rectangleRect.right, rectangleRect.top);
            rectanglePath.lineTo(rectangleRect.right, rectangleRect.bottom);
            rectanglePath.lineTo(rectangleRect.left, rectangleRect.bottom);
            rectanglePath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.5f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit.fFFFFF);
            canvas.drawPath(rectanglePath, paint);
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForGoalsSelected {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF bezier4Rect = new RectF();
        private static Path bezier4Path = new Path();
        private static RectF bezier5Rect = new RectF();
        private static Path bezier5Path = new Path();
    }
    
    public static void drawGoalsSelected(Canvas canvas) {
        StyleKit.drawGoalsSelected(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit);
    }
    
    public static void drawGoalsSelected(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForGoalsSelected.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForGoalsSelected.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForGoalsSelected.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Group
        {
            // Oval
            RectF ovalRect = CacheForGoalsSelected.ovalRect;
            ovalRect.set(12f, 13f, 31.8f, 32.8f);
            Path ovalPath = CacheForGoalsSelected.ovalPath;
            ovalPath.reset();
            ovalPath.addOval(ovalRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.74f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit.fFFFFF);
            canvas.drawPath(ovalPath, paint);
            canvas.restore();
            
            // Bezier
            RectF bezierRect = CacheForGoalsSelected.bezierRect;
            bezierRect.set(18.41f, 20.46f, 26.65f, 25.47f);
            Path bezierPath = CacheForGoalsSelected.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(18.41f, 22.96f);
            bezierPath.lineTo(21.16f, 25.47f);
            bezierPath.lineTo(26.65f, 20.46f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.74f);
            paint.setStrokeCap(Paint.Cap.SQUARE);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit.fFFFFF);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForGoalsSelected.bezier2Rect;
            bezier2Rect.set(22.08f, 3.19f, 42.68f, 21.97f);
            Path bezier2Path = CacheForGoalsSelected.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(22.08f, 3.19f);
            bezier2Path.lineTo(32.38f, 3.19f);
            bezier2Path.cubicTo(38.01f, 3.19f, 42.68f, 7.45f, 42.68f, 12.58f);
            bezier2Path.lineTo(42.68f, 12.58f);
            bezier2Path.cubicTo(42.68f, 17.71f, 38.01f, 21.97f, 32.38f, 21.97f);
            bezier2Path.lineTo(31.69f, 21.97f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.74f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit.fFFFFF);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
            
            // Bezier 3
            RectF bezier3Rect = CacheForGoalsSelected.bezier3Rect;
            bezier3Rect.set(16.58f, 3.19f, 17.96f, 3.19f);
            Path bezier3Path = CacheForGoalsSelected.bezier3Path;
            bezier3Path.reset();
            bezier3Path.moveTo(16.58f, 3.19f);
            bezier3Path.lineTo(17.96f, 3.19f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.74f);
            paint.setStrokeCap(Paint.Cap.SQUARE);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit.fFFFFF);
            canvas.drawPath(bezier3Path, paint);
            canvas.restore();
            
            // Bezier 4
            RectF bezier4Rect = CacheForGoalsSelected.bezier4Rect;
            bezier4Rect.set(1.48f, 21.97f, 22.08f, 40.74f);
            Path bezier4Path = CacheForGoalsSelected.bezier4Path;
            bezier4Path.reset();
            bezier4Path.moveTo(12.46f, 21.97f);
            bezier4Path.lineTo(11.78f, 21.97f);
            bezier4Path.cubicTo(6.15f, 21.97f, 1.48f, 26.22f, 1.48f, 31.36f);
            bezier4Path.lineTo(1.48f, 31.36f);
            bezier4Path.cubicTo(1.48f, 36.49f, 6.15f, 40.74f, 11.78f, 40.74f);
            bezier4Path.lineTo(22.08f, 40.74f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.74f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit.fFFFFF);
            canvas.drawPath(bezier4Path, paint);
            canvas.restore();
            
            // Bezier 5
            RectF bezier5Rect = CacheForGoalsSelected.bezier5Rect;
            bezier5Rect.set(26.2f, 40.74f, 27.57f, 40.74f);
            Path bezier5Path = CacheForGoalsSelected.bezier5Path;
            bezier5Path.reset();
            bezier5Path.moveTo(26.2f, 40.74f);
            bezier5Path.lineTo(27.57f, 40.74f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2.74f);
            paint.setStrokeCap(Paint.Cap.SQUARE);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit.fFFFFF);
            canvas.drawPath(bezier5Path, paint);
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForMenuIcon {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 41f, 28f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    public static void drawMenuIcon(Canvas canvas) {
        StyleKit.drawMenuIcon(canvas, new RectF(0f, 0f, 41f, 28f), ResizingBehavior.AspectFit);
    }
    
    public static void drawMenuIcon(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForMenuIcon.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForMenuIcon.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForMenuIcon.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 41f, resizedFrame.height() / 28f);
        
        // Bezier
        RectF bezierRect = CacheForMenuIcon.bezierRect;
        bezierRect.set(0f, 0f, 41f, 28f);
        Path bezierPath = CacheForMenuIcon.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(0f, 28f);
        bezierPath.lineTo(41f, 28f);
        bezierPath.lineTo(41f, 23.33f);
        bezierPath.lineTo(0f, 23.33f);
        bezierPath.lineTo(0f, 28f);
        bezierPath.lineTo(0f, 28f);
        bezierPath.close();
        bezierPath.moveTo(0f, 16.33f);
        bezierPath.lineTo(41f, 16.33f);
        bezierPath.lineTo(41f, 11.67f);
        bezierPath.lineTo(0f, 11.67f);
        bezierPath.lineTo(0f, 16.33f);
        bezierPath.lineTo(0f, 16.33f);
        bezierPath.close();
        bezierPath.moveTo(0f, 0f);
        bezierPath.lineTo(0f, 4.67f);
        bezierPath.lineTo(41f, 4.67f);
        bezierPath.lineTo(41f, 0f);
        bezierPath.lineTo(0f, 0f);
        bezierPath.lineTo(0f, 0f);
        bezierPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(StyleKit.fFFFFF);
        canvas.drawPath(bezierPath, paint);
        
        canvas.restore();
    }
    
    private static class CacheForViewLogo2 {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 377f, 223f);
        private static RectF resizedFrame = new RectF();
        private static RectF clip8Rect = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier39Rect = new RectF();
        private static Path bezier39Path = new Path();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF bezier4Rect = new RectF();
        private static Path bezier4Path = new Path();
        private static RectF bezier5Rect = new RectF();
        private static Path bezier5Path = new Path();
        private static RectF bezier6Rect = new RectF();
        private static Path bezier6Path = new Path();
        private static RectF bezier7Rect = new RectF();
        private static Path bezier7Path = new Path();
        private static RectF bezier8Rect = new RectF();
        private static Path bezier8Path = new Path();
        private static RectF bezier9Rect = new RectF();
        private static Path bezier9Path = new Path();
        private static RectF bezier10Rect = new RectF();
        private static Path bezier10Path = new Path();
        private static RectF bezier11Rect = new RectF();
        private static Path bezier11Path = new Path();
        private static RectF bezier12Rect = new RectF();
        private static Path bezier12Path = new Path();
        private static RectF bezier13Rect = new RectF();
        private static Path bezier13Path = new Path();
        private static RectF bezier14Rect = new RectF();
        private static Path bezier14Path = new Path();
        private static RectF bezier15Rect = new RectF();
        private static Path bezier15Path = new Path();
        private static RectF bezier16Rect = new RectF();
        private static Path bezier16Path = new Path();
        private static RectF bezier17Rect = new RectF();
        private static Path bezier17Path = new Path();
        private static RectF bezier18Rect = new RectF();
        private static Path bezier18Path = new Path();
        private static RectF bezier19Rect = new RectF();
        private static Path bezier19Path = new Path();
        private static RectF bezier20Rect = new RectF();
        private static Path bezier20Path = new Path();
        private static RectF rectangle3Rect = new RectF();
        private static Path rectangle3Path = new Path();
        private static RectF bezier21Rect = new RectF();
        private static Path bezier21Path = new Path();
        private static RectF bezier22Rect = new RectF();
        private static Path bezier22Path = new Path();
        private static RectF bezier23Rect = new RectF();
        private static Path bezier23Path = new Path();
        private static RectF bezier24Rect = new RectF();
        private static Path bezier24Path = new Path();
        private static RectF bezier25Rect = new RectF();
        private static Path bezier25Path = new Path();
        private static RectF bezier26Rect = new RectF();
        private static Path bezier26Path = new Path();
        private static RectF rectangle4Rect = new RectF();
        private static Path rectangle4Path = new Path();
        private static RectF bezier27Rect = new RectF();
        private static Path bezier27Path = new Path();
        private static RectF bezier28Rect = new RectF();
        private static Path bezier28Path = new Path();
        private static RectF bezier29Rect = new RectF();
        private static Path bezier29Path = new Path();
        private static RectF rectangle5Rect = new RectF();
        private static Path rectangle5Path = new Path();
        private static RectF rectangle6Rect = new RectF();
        private static Path rectangle6Path = new Path();
        private static RectF rectangle8Rect = new RectF();
        private static Path rectangle8Path = new Path();
    }
    
    public static void drawViewLogo2(Canvas canvas) {
        StyleKit.drawViewLogo2(canvas, new RectF(0f, 0f, 377f, 223f), ResizingBehavior.AspectFit);
    }
    
    public static void drawViewLogo2(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForViewLogo2.paint;
        
        // Local Colors
        int _1C75BBLogo = Color.argb(255, 28, 117, 187);
        int _00ADEELogo = Color.argb(255, 0, 173, 238);
        int _2B388FLogo = Color.argb(255, 43, 56, 143);
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForViewLogo2.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForViewLogo2.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 377f, resizedFrame.height() / 223f);
        
        // Clip 8
        RectF clip8Rect = CacheForViewLogo2.clip8Rect;
        clip8Rect.set(138.25f, 204.92f, 151.05f, 222.97f);
        
        // Bezier
        RectF bezierRect = CacheForViewLogo2.bezierRect;
        bezierRect.set(140.74f, 26f, 236.21f, 62.7f);
        Path bezierPath = CacheForViewLogo2.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(140.74f, 26f);
        bezierPath.lineTo(140.74f, 28.51f);
        bezierPath.lineTo(159.32f, 28.51f);
        bezierPath.lineTo(159.32f, 26f);
        bezierPath.lineTo(140.74f, 26f);
        bezierPath.lineTo(140.74f, 26f);
        bezierPath.close();
        bezierPath.moveTo(161.95f, 26f);
        bezierPath.lineTo(161.95f, 28.51f);
        bezierPath.lineTo(188.44f, 28.51f);
        bezierPath.cubicTo(188.44f, 28.51f, 185.73f, 26f, 182.14f, 26f);
        bezierPath.lineTo(161.95f, 26f);
        bezierPath.lineTo(161.95f, 26f);
        bezierPath.close();
        bezierPath.moveTo(193.63f, 26f);
        bezierPath.lineTo(193.63f, 28.51f);
        bezierPath.lineTo(209.65f, 28.51f);
        bezierPath.lineTo(208.71f, 26f);
        bezierPath.lineTo(193.63f, 26f);
        bezierPath.lineTo(193.63f, 26f);
        bezierPath.close();
        bezierPath.moveTo(221.14f, 26f);
        bezierPath.lineTo(220.18f, 28.51f);
        bezierPath.lineTo(236.06f, 28.51f);
        bezierPath.lineTo(236.06f, 26f);
        bezierPath.lineTo(221.14f, 26f);
        bezierPath.lineTo(221.14f, 26f);
        bezierPath.close();
        bezierPath.moveTo(140.74f, 30.88f);
        bezierPath.lineTo(140.74f, 33.39f);
        bezierPath.lineTo(159.32f, 33.39f);
        bezierPath.lineTo(159.32f, 30.88f);
        bezierPath.lineTo(140.74f, 30.88f);
        bezierPath.lineTo(140.74f, 30.88f);
        bezierPath.close();
        bezierPath.moveTo(161.95f, 30.89f);
        bezierPath.lineTo(161.95f, 33.39f);
        bezierPath.lineTo(191.51f, 33.39f);
        bezierPath.cubicTo(191.51f, 33.39f, 191.17f, 31.46f, 190.57f, 30.89f);
        bezierPath.lineTo(161.95f, 30.89f);
        bezierPath.lineTo(161.95f, 30.89f);
        bezierPath.close();
        bezierPath.moveTo(193.63f, 30.89f);
        bezierPath.lineTo(193.63f, 33.39f);
        bezierPath.lineTo(211.41f, 33.39f);
        bezierPath.lineTo(210.53f, 30.89f);
        bezierPath.lineTo(193.63f, 30.89f);
        bezierPath.lineTo(193.63f, 30.89f);
        bezierPath.close();
        bezierPath.moveTo(219.24f, 30.89f);
        bezierPath.lineTo(218.36f, 33.39f);
        bezierPath.lineTo(236.07f, 33.39f);
        bezierPath.lineTo(236.07f, 30.89f);
        bezierPath.lineTo(219.24f, 30.89f);
        bezierPath.lineTo(219.24f, 30.89f);
        bezierPath.close();
        bezierPath.moveTo(146.07f, 35.76f);
        bezierPath.lineTo(146.07f, 38.27f);
        bezierPath.lineTo(154.12f, 38.27f);
        bezierPath.lineTo(154.12f, 35.76f);
        bezierPath.lineTo(146.07f, 35.76f);
        bezierPath.lineTo(146.07f, 35.76f);
        bezierPath.close();
        bezierPath.moveTo(167.3f, 35.76f);
        bezierPath.lineTo(167.3f, 38.27f);
        bezierPath.lineTo(175.35f, 38.27f);
        bezierPath.lineTo(175.35f, 35.76f);
        bezierPath.lineTo(167.3f, 35.76f);
        bezierPath.lineTo(167.3f, 35.76f);
        bezierPath.close();
        bezierPath.moveTo(183.18f, 35.76f);
        bezierPath.lineTo(183.18f, 38.27f);
        bezierPath.lineTo(191.22f, 38.27f);
        bezierPath.cubicTo(191.22f, 38.27f, 191.74f, 36.94f, 191.74f, 35.76f);
        bezierPath.lineTo(183.18f, 35.76f);
        bezierPath.lineTo(183.18f, 35.76f);
        bezierPath.close();
        bezierPath.moveTo(198.98f, 35.76f);
        bezierPath.lineTo(198.98f, 38.27f);
        bezierPath.lineTo(213.25f, 38.27f);
        bezierPath.lineTo(212.3f, 35.76f);
        bezierPath.lineTo(198.98f, 35.76f);
        bezierPath.lineTo(198.98f, 35.76f);
        bezierPath.close();
        bezierPath.moveTo(217.49f, 35.76f);
        bezierPath.lineTo(216.53f, 38.27f);
        bezierPath.lineTo(230.87f, 38.27f);
        bezierPath.lineTo(230.87f, 35.76f);
        bezierPath.lineTo(217.49f, 35.76f);
        bezierPath.lineTo(217.49f, 35.76f);
        bezierPath.close();
        bezierPath.moveTo(146.07f, 40.65f);
        bezierPath.lineTo(146.07f, 43.16f);
        bezierPath.lineTo(154.12f, 43.16f);
        bezierPath.lineTo(154.12f, 40.65f);
        bezierPath.lineTo(146.07f, 40.65f);
        bezierPath.lineTo(146.07f, 40.65f);
        bezierPath.close();
        bezierPath.moveTo(167.3f, 40.65f);
        bezierPath.lineTo(167.3f, 43.16f);
        bezierPath.lineTo(187.85f, 43.16f);
        bezierPath.cubicTo(187.85f, 43.16f, 189.57f, 41.88f, 190.13f, 40.65f);
        bezierPath.lineTo(167.3f, 40.65f);
        bezierPath.lineTo(167.3f, 40.65f);
        bezierPath.close();
        bezierPath.moveTo(198.98f, 40.65f);
        bezierPath.lineTo(198.98f, 43.16f);
        bezierPath.lineTo(207.02f, 43.16f);
        bezierPath.lineTo(207.02f, 41.77f);
        bezierPath.lineTo(207.54f, 43.16f);
        bezierPath.lineTo(222.27f, 43.16f);
        bezierPath.lineTo(222.82f, 41.77f);
        bezierPath.lineTo(222.82f, 43.16f);
        bezierPath.lineTo(230.87f, 43.16f);
        bezierPath.lineTo(230.87f, 40.65f);
        bezierPath.lineTo(215.76f, 40.65f);
        bezierPath.lineTo(214.96f, 42.78f);
        bezierPath.lineTo(214.16f, 40.65f);
        bezierPath.lineTo(198.98f, 40.65f);
        bezierPath.lineTo(198.98f, 40.65f);
        bezierPath.close();
        bezierPath.moveTo(146.07f, 45.53f);
        bezierPath.lineTo(146.07f, 48.04f);
        bezierPath.lineTo(154.12f, 48.04f);
        bezierPath.lineTo(154.12f, 45.53f);
        bezierPath.lineTo(146.07f, 45.53f);
        bezierPath.lineTo(146.07f, 45.53f);
        bezierPath.close();
        bezierPath.moveTo(167.3f, 45.53f);
        bezierPath.lineTo(167.3f, 48.04f);
        bezierPath.lineTo(190.13f, 48.04f);
        bezierPath.cubicTo(189.58f, 46.82f, 187.85f, 45.53f, 187.85f, 45.53f);
        bezierPath.lineTo(167.3f, 45.53f);
        bezierPath.lineTo(167.3f, 45.53f);
        bezierPath.close();
        bezierPath.moveTo(198.98f, 45.53f);
        bezierPath.lineTo(198.98f, 48.04f);
        bezierPath.lineTo(207.02f, 48.04f);
        bezierPath.lineTo(207.02f, 45.53f);
        bezierPath.lineTo(198.98f, 45.53f);
        bezierPath.lineTo(198.98f, 45.53f);
        bezierPath.close();
        bezierPath.moveTo(208.49f, 45.53f);
        bezierPath.lineTo(209.46f, 48.04f);
        bezierPath.lineTo(220.52f, 48.04f);
        bezierPath.lineTo(221.44f, 45.53f);
        bezierPath.lineTo(208.49f, 45.53f);
        bezierPath.lineTo(208.49f, 45.53f);
        bezierPath.close();
        bezierPath.moveTo(222.83f, 45.53f);
        bezierPath.lineTo(222.83f, 48.04f);
        bezierPath.lineTo(230.87f, 48.04f);
        bezierPath.lineTo(230.87f, 45.53f);
        bezierPath.lineTo(222.83f, 45.53f);
        bezierPath.lineTo(222.83f, 45.53f);
        bezierPath.close();
        bezierPath.moveTo(146.07f, 50.41f);
        bezierPath.lineTo(146.07f, 52.93f);
        bezierPath.lineTo(154.12f, 52.93f);
        bezierPath.lineTo(154.12f, 50.41f);
        bezierPath.lineTo(146.07f, 50.41f);
        bezierPath.lineTo(146.07f, 50.41f);
        bezierPath.close();
        bezierPath.moveTo(167.3f, 50.41f);
        bezierPath.lineTo(167.3f, 52.93f);
        bezierPath.lineTo(175.35f, 52.93f);
        bezierPath.lineTo(175.35f, 50.41f);
        bezierPath.lineTo(167.3f, 50.41f);
        bezierPath.lineTo(167.3f, 50.41f);
        bezierPath.close();
        bezierPath.moveTo(183.18f, 50.41f);
        bezierPath.lineTo(183.18f, 52.93f);
        bezierPath.lineTo(191.73f, 52.93f);
        bezierPath.cubicTo(191.73f, 51.74f, 191.21f, 50.41f, 191.21f, 50.41f);
        bezierPath.lineTo(183.18f, 50.41f);
        bezierPath.lineTo(183.18f, 50.41f);
        bezierPath.close();
        bezierPath.moveTo(198.98f, 50.41f);
        bezierPath.lineTo(198.98f, 52.93f);
        bezierPath.lineTo(207.02f, 52.93f);
        bezierPath.lineTo(207.02f, 50.41f);
        bezierPath.lineTo(198.98f, 50.41f);
        bezierPath.lineTo(198.98f, 50.41f);
        bezierPath.close();
        bezierPath.moveTo(210.31f, 50.41f);
        bezierPath.lineTo(211.25f, 52.93f);
        bezierPath.lineTo(218.66f, 52.93f);
        bezierPath.lineTo(219.62f, 50.41f);
        bezierPath.lineTo(210.31f, 50.41f);
        bezierPath.lineTo(210.31f, 50.41f);
        bezierPath.close();
        bezierPath.moveTo(222.83f, 50.41f);
        bezierPath.lineTo(222.83f, 52.93f);
        bezierPath.lineTo(230.87f, 52.93f);
        bezierPath.lineTo(230.87f, 50.41f);
        bezierPath.lineTo(222.83f, 50.41f);
        bezierPath.lineTo(222.83f, 50.41f);
        bezierPath.close();
        bezierPath.moveTo(140.88f, 55.3f);
        bezierPath.lineTo(140.88f, 57.82f);
        bezierPath.lineTo(159.46f, 57.82f);
        bezierPath.lineTo(159.46f, 55.3f);
        bezierPath.lineTo(140.88f, 55.3f);
        bezierPath.lineTo(140.88f, 55.3f);
        bezierPath.close();
        bezierPath.moveTo(161.95f, 55.3f);
        bezierPath.lineTo(161.95f, 57.82f);
        bezierPath.lineTo(190.56f, 57.82f);
        bezierPath.cubicTo(191.16f, 57.24f, 191.5f, 55.3f, 191.5f, 55.3f);
        bezierPath.lineTo(161.95f, 55.3f);
        bezierPath.lineTo(161.95f, 55.3f);
        bezierPath.close();
        bezierPath.moveTo(193.77f, 55.3f);
        bezierPath.lineTo(193.77f, 57.82f);
        bezierPath.lineTo(207.02f, 57.82f);
        bezierPath.lineTo(207.02f, 55.3f);
        bezierPath.lineTo(193.77f, 55.3f);
        bezierPath.lineTo(193.77f, 55.3f);
        bezierPath.close();
        bezierPath.moveTo(212.14f, 55.3f);
        bezierPath.lineTo(213.12f, 57.82f);
        bezierPath.lineTo(216.89f, 57.82f);
        bezierPath.lineTo(217.79f, 55.3f);
        bezierPath.lineTo(212.14f, 55.3f);
        bezierPath.lineTo(212.14f, 55.3f);
        bezierPath.close();
        bezierPath.moveTo(222.83f, 55.3f);
        bezierPath.lineTo(222.83f, 57.82f);
        bezierPath.lineTo(236.21f, 57.82f);
        bezierPath.lineTo(236.21f, 55.3f);
        bezierPath.lineTo(222.83f, 55.3f);
        bezierPath.lineTo(222.83f, 55.3f);
        bezierPath.close();
        bezierPath.moveTo(140.88f, 60.18f);
        bezierPath.lineTo(140.88f, 62.7f);
        bezierPath.lineTo(159.46f, 62.7f);
        bezierPath.lineTo(159.46f, 60.18f);
        bezierPath.lineTo(140.88f, 60.18f);
        bezierPath.lineTo(140.88f, 60.18f);
        bezierPath.close();
        bezierPath.moveTo(161.95f, 60.18f);
        bezierPath.lineTo(161.95f, 62.7f);
        bezierPath.lineTo(182.14f, 62.7f);
        bezierPath.cubicTo(185.72f, 62.7f, 188.44f, 60.19f, 188.44f, 60.19f);
        bezierPath.lineTo(161.95f, 60.19f);
        bezierPath.lineTo(161.95f, 60.18f);
        bezierPath.close();
        bezierPath.moveTo(193.77f, 60.18f);
        bezierPath.lineTo(193.77f, 62.7f);
        bezierPath.lineTo(207.02f, 62.7f);
        bezierPath.lineTo(207.02f, 60.18f);
        bezierPath.lineTo(193.77f, 60.18f);
        bezierPath.lineTo(193.77f, 60.18f);
        bezierPath.close();
        bezierPath.moveTo(213.98f, 60.18f);
        bezierPath.lineTo(214.91f, 62.69f);
        bezierPath.lineTo(215.07f, 62.69f);
        bezierPath.lineTo(216.02f, 60.18f);
        bezierPath.lineTo(213.98f, 60.18f);
        bezierPath.lineTo(213.98f, 60.18f);
        bezierPath.close();
        bezierPath.moveTo(222.83f, 60.18f);
        bezierPath.lineTo(222.83f, 62.7f);
        bezierPath.lineTo(236.21f, 62.7f);
        bezierPath.lineTo(236.21f, 60.18f);
        bezierPath.lineTo(222.83f, 60.18f);
        bezierPath.lineTo(222.83f, 60.18f);
        bezierPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(StyleKit.fFFFFF);
        canvas.drawPath(bezierPath, paint);
        
        // Group 4
        {
            // Group 2
            {
                // Bezier 39
                RectF bezier39Rect = CacheForViewLogo2.bezier39Rect;
                bezier39Rect.set(138.23f, 204.93f, 151.05f, 222.99f);
                Path bezier39Path = CacheForViewLogo2.bezier39Path;
                bezier39Path.reset();
                bezier39Path.moveTo(144.65f, 207.59f);
                bezier39Path.cubicTo(142.65f, 207.59f, 141.78f, 209.33f, 141.78f, 211.24f);
                bezier39Path.cubicTo(141.78f, 211.43f, 141.78f, 211.62f, 141.8f, 211.8f);
                bezier39Path.cubicTo(141.93f, 213.47f, 142.67f, 215.09f, 144.65f, 215.09f);
                bezier39Path.cubicTo(146.68f, 215.09f, 147.67f, 213.38f, 147.67f, 211.54f);
                bezier39Path.cubicTo(147.67f, 209.45f, 146.95f, 207.59f, 144.65f, 207.59f);
                bezier39Path.close();
                bezier39Path.moveTo(147.62f, 207f);
                bezier39Path.lineTo(147.67f, 207f);
                bezier39Path.lineTo(147.67f, 205.28f);
                bezier39Path.lineTo(151.05f, 205.28f);
                bezier39Path.lineTo(151.05f, 217.3f);
                bezier39Path.cubicTo(151.05f, 219.41f, 150.28f, 222.97f, 144.41f, 222.99f);
                bezier39Path.lineTo(144.3f, 222.99f);
                bezier39Path.cubicTo(141.77f, 222.98f, 138.85f, 221.76f, 138.66f, 218.87f);
                bezier39Path.lineTo(142.18f, 218.87f);
                bezier39Path.cubicTo(142.5f, 220.19f, 143.55f, 220.63f, 144.83f, 220.63f);
                bezier39Path.cubicTo(146.8f, 220.63f, 147.7f, 219.32f, 147.67f, 217.45f);
                bezier39Path.lineTo(147.67f, 215.76f);
                bezier39Path.lineTo(147.62f, 215.76f);
                bezier39Path.cubicTo(146.85f, 217.13f, 145.33f, 217.75f, 143.75f, 217.75f);
                bezier39Path.cubicTo(140.15f, 217.75f, 138.49f, 215.24f, 138.26f, 212.08f);
                bezier39Path.cubicTo(138.24f, 211.82f, 138.23f, 211.56f, 138.23f, 211.29f);
                bezier39Path.cubicTo(138.23f, 207.96f, 140.18f, 204.93f, 143.78f, 204.93f);
                bezier39Path.cubicTo(145.48f, 204.93f, 146.75f, 205.51f, 147.62f, 207f);
                bezier39Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(StyleKit.dAE4E9);
                canvas.drawPath(bezier39Path, paint);
                
                // Rectangle
                RectF rectangleRect = CacheForViewLogo2.rectangleRect;
                rectangleRect.set(18f, 201f, 21f, 219f);
                Path rectanglePath = CacheForViewLogo2.rectanglePath;
                rectanglePath.reset();
                rectanglePath.moveTo(rectangleRect.left, rectangleRect.top);
                rectanglePath.lineTo(rectangleRect.right, rectangleRect.top);
                rectanglePath.lineTo(rectangleRect.right, rectangleRect.bottom);
                rectanglePath.lineTo(rectangleRect.left, rectangleRect.bottom);
                rectanglePath.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(StyleKit.dAE4E9);
                canvas.drawPath(rectanglePath, paint);
                
                // Bezier 2
                RectF bezier2Rect = CacheForViewLogo2.bezier2Rect;
                bezier2Rect.set(24.62f, 200.86f, 39.31f, 218.23f);
                Path bezier2Path = CacheForViewLogo2.bezier2Path;
                bezier2Path.reset();
                bezier2Path.moveTo(28.47f, 215.26f);
                bezier2Path.lineTo(32.6f, 215.26f);
                bezier2Path.cubicTo(34.1f, 215.26f, 35.45f, 214.78f, 35.45f, 212.98f);
                bezier2Path.cubicTo(35.45f, 211.2f, 34.35f, 210.49f, 32.68f, 210.49f);
                bezier2Path.lineTo(28.47f, 210.49f);
                bezier2Path.lineTo(28.47f, 215.26f);
                bezier2Path.close();
                bezier2Path.moveTo(28.47f, 207.89f);
                bezier2Path.lineTo(32.38f, 207.89f);
                bezier2Path.cubicTo(33.76f, 207.89f, 34.74f, 207.28f, 34.74f, 205.82f);
                bezier2Path.cubicTo(34.74f, 204.19f, 33.46f, 203.83f, 32.09f, 203.83f);
                bezier2Path.lineTo(28.47f, 203.83f);
                bezier2Path.lineTo(28.47f, 207.89f);
                bezier2Path.close();
                bezier2Path.moveTo(24.62f, 200.86f);
                bezier2Path.lineTo(32.87f, 200.86f);
                bezier2Path.cubicTo(36.21f, 200.86f, 38.48f, 201.93f, 38.48f, 205.17f);
                bezier2Path.cubicTo(38.48f, 206.89f, 37.64f, 208.04f, 36.09f, 208.79f);
                bezier2Path.cubicTo(38.25f, 209.4f, 39.31f, 211.03f, 39.31f, 213.2f);
                bezier2Path.cubicTo(39.31f, 216.72f, 36.29f, 218.23f, 33.12f, 218.23f);
                bezier2Path.lineTo(24.62f, 218.23f);
                bezier2Path.lineTo(24.62f, 200.86f);
                bezier2Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                bezier2Path.setFillType(Path.FillType.EVEN_ODD);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(StyleKit.dAE4E9);
                canvas.drawPath(bezier2Path, paint);
                
                // Bezier 3
                RectF bezier3Rect = CacheForViewLogo2.bezier3Rect;
                bezier3Rect.set(41.42f, 200.86f, 60.32f, 218.23f);
                Path bezier3Path = CacheForViewLogo2.bezier3Path;
                bezier3Path.reset();
                bezier3Path.moveTo(41.42f, 200.86f);
                bezier3Path.lineTo(46.85f, 200.86f);
                bezier3Path.lineTo(50.95f, 212.81f);
                bezier3Path.lineTo(51f, 212.81f);
                bezier3Path.lineTo(54.89f, 200.86f);
                bezier3Path.lineTo(60.32f, 200.86f);
                bezier3Path.lineTo(60.32f, 218.23f);
                bezier3Path.lineTo(56.7f, 218.23f);
                bezier3Path.lineTo(56.7f, 205.92f);
                bezier3Path.lineTo(56.66f, 205.92f);
                bezier3Path.lineTo(52.36f, 218.23f);
                bezier3Path.lineTo(49.38f, 218.23f);
                bezier3Path.lineTo(45.08f, 206.04f);
                bezier3Path.lineTo(45.03f, 206.04f);
                bezier3Path.lineTo(45.03f, 218.23f);
                bezier3Path.lineTo(41.42f, 218.23f);
                bezier3Path.lineTo(41.42f, 200.86f);
                bezier3Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                bezier3Path.setFillType(Path.FillType.EVEN_ODD);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(StyleKit.dAE4E9);
                canvas.drawPath(bezier3Path, paint);
                
                // Bezier 4
                RectF bezier4Rect = CacheForViewLogo2.bezier4Rect;
                bezier4Rect.set(67.95f, 200.45f, 82.72f, 218.65f);
                Path bezier4Path = CacheForViewLogo2.bezier4Path;
                bezier4Path.reset();
                bezier4Path.moveTo(71.69f, 212.47f);
                bezier4Path.cubicTo(71.69f, 214.78f, 73.51f, 215.68f, 75.57f, 215.68f);
                bezier4Path.cubicTo(76.92f, 215.68f, 78.99f, 215.29f, 78.99f, 213.51f);
                bezier4Path.cubicTo(78.99f, 211.61f, 76.33f, 211.35f, 73.78f, 210.64f);
                bezier4Path.cubicTo(71.17f, 210.01f, 68.54f, 208.91f, 68.54f, 205.7f);
                bezier4Path.cubicTo(68.54f, 202.13f, 71.93f, 200.45f, 75.1f, 200.45f);
                bezier4Path.cubicTo(78.76f, 200.45f, 82.13f, 202.03f, 82.13f, 206.04f);
                bezier4Path.lineTo(78.4f, 206.04f);
                bezier4Path.cubicTo(78.27f, 203.98f, 76.8f, 203.42f, 74.93f, 203.42f);
                bezier4Path.cubicTo(73.7f, 203.42f, 72.28f, 203.93f, 72.28f, 205.39f);
                bezier4Path.cubicTo(72.28f, 206.72f, 73.11f, 206.92f, 77.51f, 208.01f);
                bezier4Path.cubicTo(78.81f, 208.31f, 82.72f, 209.16f, 82.72f, 213.07f);
                bezier4Path.cubicTo(82.72f, 216.26f, 80.21f, 218.65f, 75.42f, 218.65f);
                bezier4Path.cubicTo(71.54f, 218.65f, 67.88f, 216.75f, 67.95f, 212.47f);
                bezier4Path.lineTo(71.69f, 212.47f);
                bezier4Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                bezier4Path.setFillType(Path.FillType.EVEN_ODD);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(StyleKit.dAE4E9);
                canvas.drawPath(bezier4Path, paint);
                
                // Bezier 5
                RectF bezier5Rect = CacheForViewLogo2.bezier5Rect;
                bezier5Rect.set(83.01f, 201.88f, 91.17f, 218.38f);
                Path bezier5Path = CacheForViewLogo2.bezier5Path;
                bezier5Path.reset();
                bezier5Path.moveTo(88.61f, 205.65f);
                bezier5Path.lineTo(91.17f, 205.65f);
                bezier5Path.lineTo(91.17f, 207.97f);
                bezier5Path.lineTo(88.61f, 207.97f);
                bezier5Path.lineTo(88.61f, 214.19f);
                bezier5Path.cubicTo(88.61f, 215.36f, 88.91f, 215.65f, 90.09f, 215.65f);
                bezier5Path.cubicTo(90.48f, 215.65f, 90.85f, 215.63f, 91.17f, 215.56f);
                bezier5Path.lineTo(91.17f, 218.26f);
                bezier5Path.cubicTo(90.58f, 218.35f, 89.82f, 218.38f, 89.13f, 218.38f);
                bezier5Path.cubicTo(86.97f, 218.38f, 85.12f, 217.92f, 85.12f, 215.39f);
                bezier5Path.lineTo(85.12f, 207.97f);
                bezier5Path.lineTo(83.01f, 207.97f);
                bezier5Path.lineTo(83.01f, 205.65f);
                bezier5Path.lineTo(85.12f, 205.65f);
                bezier5Path.lineTo(85.12f, 201.88f);
                bezier5Path.lineTo(88.61f, 201.88f);
                bezier5Path.lineTo(88.61f, 205.65f);
                bezier5Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                bezier5Path.setFillType(Path.FillType.EVEN_ODD);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(StyleKit.dAE4E9);
                canvas.drawPath(bezier5Path, paint);
                
                // Bezier 6
                RectF bezier6Rect = CacheForViewLogo2.bezier6Rect;
                bezier6Rect.set(92.96f, 205.31f, 101.14f, 218.23f);
                Path bezier6Path = CacheForViewLogo2.bezier6Path;
                bezier6Path.reset();
                bezier6Path.moveTo(92.96f, 205.65f);
                bezier6Path.lineTo(96.28f, 205.65f);
                bezier6Path.lineTo(96.28f, 207.99f);
                bezier6Path.lineTo(96.33f, 207.99f);
                bezier6Path.cubicTo(96.99f, 206.41f, 98.64f, 205.31f, 100.38f, 205.31f);
                bezier6Path.cubicTo(100.65f, 205.31f, 100.9f, 205.36f, 101.14f, 205.43f);
                bezier6Path.lineTo(101.14f, 208.65f);
                bezier6Path.cubicTo(100.82f, 208.57f, 100.31f, 208.53f, 99.89f, 208.53f);
                bezier6Path.cubicTo(97.31f, 208.53f, 96.45f, 210.32f, 96.45f, 212.56f);
                bezier6Path.lineTo(96.45f, 218.23f);
                bezier6Path.lineTo(92.96f, 218.23f);
                bezier6Path.lineTo(92.96f, 205.65f);
                bezier6Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                bezier6Path.setFillType(Path.FillType.EVEN_ODD);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(StyleKit.dAE4E9);
                canvas.drawPath(bezier6Path, paint);
                
                // Bezier 7
                RectF bezier7Rect = CacheForViewLogo2.bezier7Rect;
                bezier7Rect.set(101.58f, 205.31f, 113.97f, 218.57f);
                Path bezier7Path = CacheForViewLogo2.bezier7Path;
                bezier7Path.reset();
                bezier7Path.moveTo(110.04f, 212.08f);
                bezier7Path.cubicTo(109.45f, 212.59f, 108.22f, 212.61f, 107.14f, 212.81f);
                bezier7Path.cubicTo(106.06f, 213f, 105.07f, 213.39f, 105.07f, 214.65f);
                bezier7Path.cubicTo(105.07f, 215.92f, 106.08f, 216.26f, 107.21f, 216.26f);
                bezier7Path.cubicTo(109.94f, 216.26f, 110.04f, 214.14f, 110.04f, 213.37f);
                bezier7Path.lineTo(110.04f, 212.08f);
                bezier7Path.close();
                bezier7Path.moveTo(101.98f, 209.52f);
                bezier7Path.cubicTo(102.17f, 206.31f, 105.1f, 205.31f, 107.95f, 205.31f);
                bezier7Path.cubicTo(110.48f, 205.31f, 113.53f, 205.87f, 113.53f, 208.89f);
                bezier7Path.lineTo(113.53f, 215.43f);
                bezier7Path.cubicTo(113.53f, 216.58f, 113.65f, 217.72f, 113.97f, 218.23f);
                bezier7Path.lineTo(110.43f, 218.23f);
                bezier7Path.cubicTo(110.31f, 217.84f, 110.21f, 217.43f, 110.18f, 217.01f);
                bezier7Path.cubicTo(109.08f, 218.16f, 107.48f, 218.57f, 105.91f, 218.57f);
                bezier7Path.cubicTo(103.48f, 218.57f, 101.58f, 217.38f, 101.58f, 214.8f);
                bezier7Path.cubicTo(101.63f, 209.08f, 110.18f, 212.15f, 110.04f, 209.33f);
                bezier7Path.cubicTo(110.04f, 207.87f, 109f, 207.63f, 107.78f, 207.63f);
                bezier7Path.cubicTo(106.42f, 207.63f, 105.59f, 208.16f, 105.47f, 209.52f);
                bezier7Path.lineTo(101.98f, 209.52f);
                bezier7Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                bezier7Path.setFillType(Path.FillType.EVEN_ODD);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(StyleKit.dAE4E9);
                canvas.drawPath(bezier7Path, paint);
                
                // Bezier 8
                RectF bezier8Rect = CacheForViewLogo2.bezier8Rect;
                bezier8Rect.set(114.65f, 201.88f, 122.81f, 218.38f);
                Path bezier8Path = CacheForViewLogo2.bezier8Path;
                bezier8Path.reset();
                bezier8Path.moveTo(120.26f, 205.65f);
                bezier8Path.lineTo(122.81f, 205.65f);
                bezier8Path.lineTo(122.81f, 207.97f);
                bezier8Path.lineTo(120.26f, 207.97f);
                bezier8Path.lineTo(120.26f, 214.19f);
                bezier8Path.cubicTo(120.26f, 215.36f, 120.55f, 215.65f, 121.73f, 215.65f);
                bezier8Path.cubicTo(122.12f, 215.65f, 122.49f, 215.63f, 122.81f, 215.56f);
                bezier8Path.lineTo(122.81f, 218.26f);
                bezier8Path.cubicTo(122.22f, 218.35f, 121.46f, 218.38f, 120.77f, 218.38f);
                bezier8Path.cubicTo(118.61f, 218.38f, 116.77f, 217.92f, 116.77f, 215.39f);
                bezier8Path.lineTo(116.77f, 207.97f);
                bezier8Path.lineTo(114.65f, 207.97f);
                bezier8Path.lineTo(114.65f, 205.65f);
                bezier8Path.lineTo(116.77f, 205.65f);
                bezier8Path.lineTo(116.77f, 201.88f);
                bezier8Path.lineTo(120.26f, 201.88f);
                bezier8Path.lineTo(120.26f, 205.65f);
                bezier8Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                bezier8Path.setFillType(Path.FillType.EVEN_ODD);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(StyleKit.dAE4E9);
                canvas.drawPath(bezier8Path, paint);
                
                // Bezier 9
                RectF bezier9Rect = CacheForViewLogo2.bezier9Rect;
                bezier9Rect.set(124.06f, 205.31f, 136.74f, 218.57f);
                Path bezier9Path = CacheForViewLogo2.bezier9Path;
                bezier9Path.reset();
                bezier9Path.moveTo(133.23f, 210.59f);
                bezier9Path.cubicTo(132.91f, 208.84f, 132.15f, 207.92f, 130.45f, 207.92f);
                bezier9Path.cubicTo(128.19f, 207.92f, 127.62f, 209.62f, 127.55f, 210.59f);
                bezier9Path.lineTo(133.23f, 210.59f);
                bezier9Path.close();
                bezier9Path.moveTo(127.55f, 212.78f);
                bezier9Path.cubicTo(127.65f, 215f, 128.71f, 215.97f, 130.67f, 215.97f);
                bezier9Path.cubicTo(132.07f, 215.97f, 133.2f, 215.12f, 133.42f, 214.34f);
                bezier9Path.lineTo(136.5f, 214.34f);
                bezier9Path.cubicTo(135.51f, 217.33f, 133.42f, 218.57f, 130.55f, 218.57f);
                bezier9Path.cubicTo(126.54f, 218.57f, 124.06f, 215.85f, 124.06f, 211.96f);
                bezier9Path.cubicTo(124.06f, 208.18f, 126.69f, 205.31f, 130.55f, 205.31f);
                bezier9Path.cubicTo(134.87f, 205.31f, 136.99f, 208.91f, 136.72f, 212.78f);
                bezier9Path.lineTo(127.55f, 212.78f);
                bezier9Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                bezier9Path.setFillType(Path.FillType.EVEN_ODD);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(StyleKit.dAE4E9);
                canvas.drawPath(bezier9Path, paint);
                
                // Bezier 10
                RectF bezier10Rect = CacheForViewLogo2.bezier10Rect;
                bezier10Rect.set(138.23f, 204.93f, 151.05f, 222.99f);
                Path bezier10Path = CacheForViewLogo2.bezier10Path;
                bezier10Path.reset();
                bezier10Path.moveTo(144.65f, 207.59f);
                bezier10Path.cubicTo(142.65f, 207.59f, 141.78f, 209.33f, 141.78f, 211.24f);
                bezier10Path.cubicTo(141.78f, 211.43f, 141.78f, 211.62f, 141.8f, 211.8f);
                bezier10Path.cubicTo(141.93f, 213.47f, 142.67f, 215.09f, 144.65f, 215.09f);
                bezier10Path.cubicTo(146.68f, 215.09f, 147.67f, 213.38f, 147.67f, 211.54f);
                bezier10Path.cubicTo(147.67f, 209.45f, 146.95f, 207.59f, 144.65f, 207.59f);
                bezier10Path.close();
                bezier10Path.moveTo(147.62f, 207f);
                bezier10Path.lineTo(147.67f, 207f);
                bezier10Path.lineTo(147.67f, 205.28f);
                bezier10Path.lineTo(151.05f, 205.28f);
                bezier10Path.lineTo(151.05f, 217.3f);
                bezier10Path.cubicTo(151.05f, 219.41f, 150.28f, 222.97f, 144.41f, 222.99f);
                bezier10Path.lineTo(144.3f, 222.99f);
                bezier10Path.cubicTo(141.77f, 222.98f, 138.85f, 221.76f, 138.66f, 218.87f);
                bezier10Path.lineTo(142.18f, 218.87f);
                bezier10Path.cubicTo(142.5f, 220.19f, 143.55f, 220.63f, 144.83f, 220.63f);
                bezier10Path.cubicTo(146.8f, 220.63f, 147.7f, 219.32f, 147.67f, 217.45f);
                bezier10Path.lineTo(147.67f, 215.76f);
                bezier10Path.lineTo(147.62f, 215.76f);
                bezier10Path.cubicTo(146.85f, 217.13f, 145.33f, 217.75f, 143.75f, 217.75f);
                bezier10Path.cubicTo(140.15f, 217.75f, 138.49f, 215.24f, 138.26f, 212.08f);
                bezier10Path.cubicTo(138.24f, 211.82f, 138.23f, 211.56f, 138.23f, 211.29f);
                bezier10Path.cubicTo(138.23f, 207.96f, 140.18f, 204.93f, 143.78f, 204.93f);
                bezier10Path.cubicTo(145.48f, 204.93f, 146.75f, 205.51f, 147.62f, 207f);
                bezier10Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(StyleKit.dAE4E9);
                canvas.drawPath(bezier10Path, paint);
                
                // Bezier 11
                RectF bezier11Rect = CacheForViewLogo2.bezier11Rect;
                bezier11Rect.set(153.03f, 200.86f, 156.52f, 218.23f);
                Path bezier11Path = CacheForViewLogo2.bezier11Path;
                bezier11Path.reset();
                bezier11Path.moveTo(153.03f, 218.23f);
                bezier11Path.lineTo(156.52f, 218.23f);
                bezier11Path.lineTo(156.52f, 205.65f);
                bezier11Path.lineTo(153.03f, 205.65f);
                bezier11Path.lineTo(153.03f, 218.23f);
                bezier11Path.close();
                bezier11Path.moveTo(153.03f, 203.71f);
                bezier11Path.lineTo(156.52f, 203.71f);
                bezier11Path.lineTo(156.52f, 200.86f);
                bezier11Path.lineTo(153.03f, 200.86f);
                bezier11Path.lineTo(153.03f, 203.71f);
                bezier11Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                bezier11Path.setFillType(Path.FillType.EVEN_ODD);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(StyleKit.dAE4E9);
                canvas.drawPath(bezier11Path, paint);
                
                // Bezier 12
                RectF bezier12Rect = CacheForViewLogo2.bezier12Rect;
                bezier12Rect.set(158.48f, 205.31f, 171.01f, 218.57f);
                Path bezier12Path = CacheForViewLogo2.bezier12Path;
                bezier12Path.reset();
                bezier12Path.moveTo(167.52f, 210.08f);
                bezier12Path.cubicTo(167.3f, 208.65f, 166.44f, 207.92f, 164.94f, 207.92f);
                bezier12Path.cubicTo(162.71f, 207.92f, 161.97f, 210.15f, 161.97f, 212f);
                bezier12Path.cubicTo(161.97f, 213.83f, 162.68f, 215.97f, 164.87f, 215.97f);
                bezier12Path.cubicTo(166.52f, 215.97f, 167.42f, 214.97f, 167.65f, 213.41f);
                bezier12Path.lineTo(171.01f, 213.41f);
                bezier12Path.cubicTo(170.54f, 216.75f, 168.26f, 218.57f, 164.89f, 218.57f);
                bezier12Path.cubicTo(161.06f, 218.57f, 158.48f, 215.9f, 158.48f, 212.13f);
                bezier12Path.cubicTo(158.48f, 208.21f, 160.84f, 205.31f, 164.97f, 205.31f);
                bezier12Path.cubicTo(167.97f, 205.31f, 170.74f, 206.87f, 170.94f, 210.08f);
                bezier12Path.lineTo(167.52f, 210.08f);
                bezier12Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                bezier12Path.setFillType(Path.FillType.EVEN_ODD);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(StyleKit.dAE4E9);
                canvas.drawPath(bezier12Path, paint);
                
                // Bezier 13
                RectF bezier13Rect = CacheForViewLogo2.bezier13Rect;
                bezier13Rect.set(177.15f, 200.86f, 194.33f, 218.23f);
                Path bezier13Path = CacheForViewLogo2.bezier13Path;
                bezier13Path.reset();
                bezier13Path.moveTo(183.44f, 211.52f);
                bezier13Path.lineTo(187.99f, 211.52f);
                bezier13Path.lineTo(185.78f, 205.14f);
                bezier13Path.lineTo(185.73f, 205.14f);
                bezier13Path.lineTo(183.44f, 211.52f);
                bezier13Path.close();
                bezier13Path.moveTo(183.81f, 200.86f);
                bezier13Path.lineTo(187.77f, 200.86f);
                bezier13Path.lineTo(194.33f, 218.23f);
                bezier13Path.lineTo(190.32f, 218.23f);
                bezier13Path.lineTo(188.99f, 214.36f);
                bezier13Path.lineTo(182.43f, 214.36f);
                bezier13Path.lineTo(181.06f, 218.23f);
                bezier13Path.lineTo(177.15f, 218.23f);
                bezier13Path.lineTo(183.81f, 200.86f);
                bezier13Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                bezier13Path.setFillType(Path.FillType.EVEN_ODD);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(StyleKit.dAE4E9);
                canvas.drawPath(bezier13Path, paint);
                
                // Bezier 14
                RectF bezier14Rect = CacheForViewLogo2.bezier14Rect;
                bezier14Rect.set(194.91f, 205.31f, 207.44f, 218.57f);
                Path bezier14Path = CacheForViewLogo2.bezier14Path;
                bezier14Path.reset();
                bezier14Path.moveTo(203.96f, 210.08f);
                bezier14Path.cubicTo(203.73f, 208.65f, 202.87f, 207.92f, 201.38f, 207.92f);
                bezier14Path.cubicTo(199.14f, 207.92f, 198.4f, 210.15f, 198.4f, 212f);
                bezier14Path.cubicTo(198.4f, 213.83f, 199.11f, 215.97f, 201.3f, 215.97f);
                bezier14Path.cubicTo(202.95f, 215.97f, 203.86f, 214.97f, 204.08f, 213.41f);
                bezier14Path.lineTo(207.44f, 213.41f);
                bezier14Path.cubicTo(206.98f, 216.75f, 204.69f, 218.57f, 201.33f, 218.57f);
                bezier14Path.cubicTo(197.49f, 218.57f, 194.91f, 215.9f, 194.91f, 212.13f);
                bezier14Path.cubicTo(194.91f, 208.21f, 197.27f, 205.31f, 201.4f, 205.31f);
                bezier14Path.cubicTo(204.4f, 205.31f, 207.17f, 206.87f, 207.37f, 210.08f);
                bezier14Path.lineTo(203.96f, 210.08f);
                bezier14Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                bezier14Path.setFillType(Path.FillType.EVEN_ODD);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(StyleKit.dAE4E9);
                canvas.drawPath(bezier14Path, paint);
                
                // Bezier 15
                RectF bezier15Rect = CacheForViewLogo2.bezier15Rect;
                bezier15Rect.set(208.62f, 205.31f, 221.15f, 218.57f);
                Path bezier15Path = CacheForViewLogo2.bezier15Path;
                bezier15Path.reset();
                bezier15Path.moveTo(217.66f, 210.08f);
                bezier15Path.cubicTo(217.44f, 208.65f, 216.58f, 207.92f, 215.08f, 207.92f);
                bezier15Path.cubicTo(212.85f, 207.92f, 212.11f, 210.15f, 212.11f, 212f);
                bezier15Path.cubicTo(212.11f, 213.83f, 212.82f, 215.97f, 215.01f, 215.97f);
                bezier15Path.cubicTo(216.66f, 215.97f, 217.57f, 214.97f, 217.79f, 213.41f);
                bezier15Path.lineTo(221.15f, 213.41f);
                bezier15Path.cubicTo(220.69f, 216.75f, 218.4f, 218.57f, 215.03f, 218.57f);
                bezier15Path.cubicTo(211.2f, 218.57f, 208.62f, 215.9f, 208.62f, 212.13f);
                bezier15Path.cubicTo(208.62f, 208.21f, 210.98f, 205.31f, 215.11f, 205.31f);
                bezier15Path.cubicTo(218.11f, 205.31f, 220.88f, 206.87f, 221.08f, 210.08f);
                bezier15Path.lineTo(217.66f, 210.08f);
                bezier15Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                bezier15Path.setFillType(Path.FillType.EVEN_ODD);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(StyleKit.dAE4E9);
                canvas.drawPath(bezier15Path, paint);
                
                // Bezier 16
                RectF bezier16Rect = CacheForViewLogo2.bezier16Rect;
                bezier16Rect.set(222.26f, 205.31f, 235.4f, 218.57f);
                Path bezier16Path = CacheForViewLogo2.bezier16Path;
                bezier16Path.reset();
                bezier16Path.moveTo(228.82f, 215.97f);
                bezier16Path.cubicTo(231.2f, 215.97f, 231.91f, 213.97f, 231.91f, 211.96f);
                bezier16Path.cubicTo(231.91f, 209.94f, 231.2f, 207.92f, 228.82f, 207.92f);
                bezier16Path.cubicTo(226.46f, 207.92f, 225.74f, 209.94f, 225.74f, 211.96f);
                bezier16Path.cubicTo(225.74f, 213.97f, 226.46f, 215.97f, 228.82f, 215.97f);
                bezier16Path.close();
                bezier16Path.moveTo(228.82f, 205.31f);
                bezier16Path.cubicTo(232.82f, 205.31f, 235.4f, 207.94f, 235.4f, 211.96f);
                bezier16Path.cubicTo(235.4f, 215.94f, 232.82f, 218.57f, 228.82f, 218.57f);
                bezier16Path.cubicTo(224.84f, 218.57f, 222.26f, 215.94f, 222.26f, 211.96f);
                bezier16Path.cubicTo(222.26f, 207.94f, 224.84f, 205.31f, 228.82f, 205.31f);
                bezier16Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                bezier16Path.setFillType(Path.FillType.EVEN_ODD);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(StyleKit.dAE4E9);
                canvas.drawPath(bezier16Path, paint);
                
                // Bezier 17
                RectF bezier17Rect = CacheForViewLogo2.bezier17Rect;
                bezier17Rect.set(237.19f, 205.65f, 249.11f, 218.57f);
                Path bezier17Path = CacheForViewLogo2.bezier17Path;
                bezier17Path.reset();
                bezier17Path.moveTo(249.11f, 218.23f);
                bezier17Path.lineTo(245.79f, 218.23f);
                bezier17Path.lineTo(245.79f, 216.48f);
                bezier17Path.lineTo(245.72f, 216.48f);
                bezier17Path.cubicTo(244.83f, 217.92f, 243.31f, 218.57f, 241.84f, 218.57f);
                bezier17Path.cubicTo(238.12f, 218.57f, 237.19f, 216.5f, 237.19f, 213.39f);
                bezier17Path.lineTo(237.19f, 205.65f);
                bezier17Path.lineTo(240.68f, 205.65f);
                bezier17Path.lineTo(240.68f, 212.76f);
                bezier17Path.cubicTo(240.68f, 214.83f, 241.27f, 215.85f, 242.92f, 215.85f);
                bezier17Path.cubicTo(244.81f, 215.85f, 245.62f, 214.8f, 245.62f, 212.25f);
                bezier17Path.lineTo(245.62f, 205.65f);
                bezier17Path.lineTo(249.11f, 205.65f);
                bezier17Path.lineTo(249.11f, 218.23f);
                bezier17Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                bezier17Path.setFillType(Path.FillType.EVEN_ODD);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(StyleKit.dAE4E9);
                canvas.drawPath(bezier17Path, paint);
                
                // Bezier 18
                RectF bezier18Rect = CacheForViewLogo2.bezier18Rect;
                bezier18Rect.set(251.37f, 205.31f, 263.28f, 218.23f);
                Path bezier18Path = CacheForViewLogo2.bezier18Path;
                bezier18Path.reset();
                bezier18Path.moveTo(251.37f, 205.65f);
                bezier18Path.lineTo(254.68f, 205.65f);
                bezier18Path.lineTo(254.68f, 207.41f);
                bezier18Path.lineTo(254.76f, 207.41f);
                bezier18Path.cubicTo(255.64f, 205.97f, 257.17f, 205.31f, 258.64f, 205.31f);
                bezier18Path.cubicTo(262.35f, 205.31f, 263.28f, 207.38f, 263.28f, 210.49f);
                bezier18Path.lineTo(263.28f, 218.23f);
                bezier18Path.lineTo(259.8f, 218.23f);
                bezier18Path.lineTo(259.8f, 211.13f);
                bezier18Path.cubicTo(259.8f, 209.06f, 259.21f, 208.04f, 257.56f, 208.04f);
                bezier18Path.cubicTo(255.67f, 208.04f, 254.86f, 209.08f, 254.86f, 211.64f);
                bezier18Path.lineTo(254.86f, 218.23f);
                bezier18Path.lineTo(251.37f, 218.23f);
                bezier18Path.lineTo(251.37f, 205.65f);
                bezier18Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                bezier18Path.setFillType(Path.FillType.EVEN_ODD);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(StyleKit.dAE4E9);
                canvas.drawPath(bezier18Path, paint);
                
                // Bezier 19
                RectF bezier19Rect = CacheForViewLogo2.bezier19Rect;
                bezier19Rect.set(264.36f, 201.88f, 272.52f, 218.38f);
                Path bezier19Path = CacheForViewLogo2.bezier19Path;
                bezier19Path.reset();
                bezier19Path.moveTo(269.97f, 205.65f);
                bezier19Path.lineTo(272.52f, 205.65f);
                bezier19Path.lineTo(272.52f, 207.97f);
                bezier19Path.lineTo(269.97f, 207.97f);
                bezier19Path.lineTo(269.97f, 214.19f);
                bezier19Path.cubicTo(269.97f, 215.36f, 270.26f, 215.65f, 271.44f, 215.65f);
                bezier19Path.cubicTo(271.83f, 215.65f, 272.2f, 215.63f, 272.52f, 215.56f);
                bezier19Path.lineTo(272.52f, 218.26f);
                bezier19Path.cubicTo(271.93f, 218.35f, 271.17f, 218.38f, 270.48f, 218.38f);
                bezier19Path.cubicTo(268.32f, 218.38f, 266.48f, 217.92f, 266.48f, 215.39f);
                bezier19Path.lineTo(266.48f, 207.97f);
                bezier19Path.lineTo(264.36f, 207.97f);
                bezier19Path.lineTo(264.36f, 205.65f);
                bezier19Path.lineTo(266.48f, 205.65f);
                bezier19Path.lineTo(266.48f, 201.88f);
                bezier19Path.lineTo(269.97f, 201.88f);
                bezier19Path.lineTo(269.97f, 205.65f);
                bezier19Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                bezier19Path.setFillType(Path.FillType.EVEN_ODD);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(StyleKit.dAE4E9);
                canvas.drawPath(bezier19Path, paint);
                
                // Bezier 20
                RectF bezier20Rect = CacheForViewLogo2.bezier20Rect;
                bezier20Rect.set(280.48f, 200.86f, 294.46f, 218.23f);
                Path bezier20Path = CacheForViewLogo2.bezier20Path;
                bezier20Path.reset();
                bezier20Path.moveTo(284.34f, 209.04f);
                bezier20Path.lineTo(287.33f, 209.04f);
                bezier20Path.cubicTo(289.1f, 209.04f, 290.73f, 208.65f, 290.73f, 206.43f);
                bezier20Path.cubicTo(290.73f, 204.22f, 289.1f, 203.83f, 287.33f, 203.83f);
                bezier20Path.lineTo(284.34f, 203.83f);
                bezier20Path.lineTo(284.34f, 209.04f);
                bezier20Path.close();
                bezier20Path.moveTo(280.48f, 200.86f);
                bezier20Path.lineTo(288.39f, 200.86f);
                bezier20Path.cubicTo(292.79f, 200.86f, 294.46f, 203.61f, 294.46f, 206.43f);
                bezier20Path.cubicTo(294.46f, 209.25f, 292.79f, 212f, 288.39f, 212f);
                bezier20Path.lineTo(284.34f, 212f);
                bezier20Path.lineTo(284.34f, 218.23f);
                bezier20Path.lineTo(280.48f, 218.23f);
                bezier20Path.lineTo(280.48f, 200.86f);
                bezier20Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                bezier20Path.setFillType(Path.FillType.EVEN_ODD);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(StyleKit.dAE4E9);
                canvas.drawPath(bezier20Path, paint);
                
                // Rectangle 3
                RectF rectangle3Rect = CacheForViewLogo2.rectangle3Rect;
                rectangle3Rect.set(295.43f, 200.65f, 299.38f, 218.25f);
                Path rectangle3Path = CacheForViewLogo2.rectangle3Path;
                rectangle3Path.reset();
                rectangle3Path.moveTo(rectangle3Rect.left, rectangle3Rect.top);
                rectangle3Path.lineTo(rectangle3Rect.right, rectangle3Rect.top);
                rectangle3Path.lineTo(rectangle3Rect.right, rectangle3Rect.bottom);
                rectangle3Path.lineTo(rectangle3Rect.left, rectangle3Rect.bottom);
                rectangle3Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(StyleKit.dAE4E9);
                canvas.drawPath(rectangle3Path, paint);
                
                // Bezier 21
                RectF bezier21Rect = CacheForViewLogo2.bezier21Rect;
                bezier21Rect.set(301.21f, 205.31f, 313.6f, 218.57f);
                Path bezier21Path = CacheForViewLogo2.bezier21Path;
                bezier21Path.reset();
                bezier21Path.moveTo(309.67f, 212.08f);
                bezier21Path.cubicTo(309.08f, 212.59f, 307.85f, 212.61f, 306.77f, 212.81f);
                bezier21Path.cubicTo(305.68f, 213f, 304.7f, 213.39f, 304.7f, 214.65f);
                bezier21Path.cubicTo(304.7f, 215.92f, 305.71f, 216.26f, 306.84f, 216.26f);
                bezier21Path.cubicTo(309.57f, 216.26f, 309.67f, 214.14f, 309.67f, 213.37f);
                bezier21Path.lineTo(309.67f, 212.08f);
                bezier21Path.close();
                bezier21Path.moveTo(301.61f, 209.52f);
                bezier21Path.cubicTo(301.8f, 206.31f, 304.73f, 205.31f, 307.58f, 205.31f);
                bezier21Path.cubicTo(310.11f, 205.31f, 313.15f, 205.87f, 313.15f, 208.89f);
                bezier21Path.lineTo(313.15f, 215.43f);
                bezier21Path.cubicTo(313.15f, 216.58f, 313.28f, 217.72f, 313.6f, 218.23f);
                bezier21Path.lineTo(310.06f, 218.23f);
                bezier21Path.cubicTo(309.94f, 217.84f, 309.84f, 217.43f, 309.81f, 217.01f);
                bezier21Path.cubicTo(308.71f, 218.16f, 307.11f, 218.57f, 305.54f, 218.57f);
                bezier21Path.cubicTo(303.1f, 218.57f, 301.21f, 217.38f, 301.21f, 214.8f);
                bezier21Path.cubicTo(301.26f, 209.08f, 309.81f, 212.15f, 309.67f, 209.33f);
                bezier21Path.cubicTo(309.67f, 207.87f, 308.63f, 207.63f, 307.4f, 207.63f);
                bezier21Path.cubicTo(306.05f, 207.63f, 305.22f, 208.16f, 305.09f, 209.52f);
                bezier21Path.lineTo(301.61f, 209.52f);
                bezier21Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                bezier21Path.setFillType(Path.FillType.EVEN_ODD);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(StyleKit.dAE4E9);
                canvas.drawPath(bezier21Path, paint);
                
                // Bezier 22
                RectF bezier22Rect = CacheForViewLogo2.bezier22Rect;
                bezier22Rect.set(315.46f, 205.31f, 327.38f, 218.23f);
                Path bezier22Path = CacheForViewLogo2.bezier22Path;
                bezier22Path.reset();
                bezier22Path.moveTo(315.46f, 205.65f);
                bezier22Path.lineTo(318.78f, 205.65f);
                bezier22Path.lineTo(318.78f, 207.41f);
                bezier22Path.lineTo(318.85f, 207.41f);
                bezier22Path.cubicTo(319.74f, 205.97f, 321.26f, 205.31f, 322.73f, 205.31f);
                bezier22Path.cubicTo(326.45f, 205.31f, 327.38f, 207.38f, 327.38f, 210.49f);
                bezier22Path.lineTo(327.38f, 218.23f);
                bezier22Path.lineTo(323.89f, 218.23f);
                bezier22Path.lineTo(323.89f, 211.13f);
                bezier22Path.cubicTo(323.89f, 209.06f, 323.3f, 208.04f, 321.65f, 208.04f);
                bezier22Path.cubicTo(319.76f, 208.04f, 318.95f, 209.08f, 318.95f, 211.64f);
                bezier22Path.lineTo(318.95f, 218.23f);
                bezier22Path.lineTo(315.46f, 218.23f);
                bezier22Path.lineTo(315.46f, 205.65f);
                bezier22Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                bezier22Path.setFillType(Path.FillType.EVEN_ODD);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(StyleKit.dAE4E9);
                canvas.drawPath(bezier22Path, paint);
                
                // Bezier 23
                RectF bezier23Rect = CacheForViewLogo2.bezier23Rect;
                bezier23Rect.set(329.64f, 205.31f, 341.55f, 218.23f);
                Path bezier23Path = CacheForViewLogo2.bezier23Path;
                bezier23Path.reset();
                bezier23Path.moveTo(329.64f, 205.65f);
                bezier23Path.lineTo(332.95f, 205.65f);
                bezier23Path.lineTo(332.95f, 207.41f);
                bezier23Path.lineTo(333.03f, 207.41f);
                bezier23Path.cubicTo(333.91f, 205.97f, 335.44f, 205.31f, 336.91f, 205.31f);
                bezier23Path.cubicTo(340.62f, 205.31f, 341.55f, 207.38f, 341.55f, 210.49f);
                bezier23Path.lineTo(341.55f, 218.23f);
                bezier23Path.lineTo(338.07f, 218.23f);
                bezier23Path.lineTo(338.07f, 211.13f);
                bezier23Path.cubicTo(338.07f, 209.06f, 337.48f, 208.04f, 335.83f, 208.04f);
                bezier23Path.cubicTo(333.94f, 208.04f, 333.13f, 209.08f, 333.13f, 211.64f);
                bezier23Path.lineTo(333.13f, 218.23f);
                bezier23Path.lineTo(329.64f, 218.23f);
                bezier23Path.lineTo(329.64f, 205.65f);
                bezier23Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                bezier23Path.setFillType(Path.FillType.EVEN_ODD);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(StyleKit.dAE4E9);
                canvas.drawPath(bezier23Path, paint);
                
                // Bezier 24
                RectF bezier24Rect = CacheForViewLogo2.bezier24Rect;
                bezier24Rect.set(343.91f, 200.86f, 347.4f, 218.23f);
                Path bezier24Path = CacheForViewLogo2.bezier24Path;
                bezier24Path.reset();
                bezier24Path.moveTo(343.91f, 218.23f);
                bezier24Path.lineTo(347.4f, 218.23f);
                bezier24Path.lineTo(347.4f, 205.65f);
                bezier24Path.lineTo(343.91f, 205.65f);
                bezier24Path.lineTo(343.91f, 218.23f);
                bezier24Path.close();
                bezier24Path.moveTo(343.91f, 203.71f);
                bezier24Path.lineTo(347.4f, 203.71f);
                bezier24Path.lineTo(347.4f, 200.86f);
                bezier24Path.lineTo(343.91f, 200.86f);
                bezier24Path.lineTo(343.91f, 203.71f);
                bezier24Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                bezier24Path.setFillType(Path.FillType.EVEN_ODD);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(StyleKit.dAE4E9);
                canvas.drawPath(bezier24Path, paint);
                
                // Bezier 25
                RectF bezier25Rect = CacheForViewLogo2.bezier25Rect;
                bezier25Rect.set(349.76f, 205.31f, 361.67f, 218.23f);
                Path bezier25Path = CacheForViewLogo2.bezier25Path;
                bezier25Path.reset();
                bezier25Path.moveTo(349.76f, 205.65f);
                bezier25Path.lineTo(353.07f, 205.65f);
                bezier25Path.lineTo(353.07f, 207.41f);
                bezier25Path.lineTo(353.15f, 207.41f);
                bezier25Path.cubicTo(354.03f, 205.97f, 355.56f, 205.31f, 357.03f, 205.31f);
                bezier25Path.cubicTo(360.74f, 205.31f, 361.67f, 207.38f, 361.67f, 210.49f);
                bezier25Path.lineTo(361.67f, 218.23f);
                bezier25Path.lineTo(358.18f, 218.23f);
                bezier25Path.lineTo(358.18f, 211.13f);
                bezier25Path.cubicTo(358.18f, 209.06f, 357.6f, 208.04f, 355.95f, 208.04f);
                bezier25Path.cubicTo(354.06f, 208.04f, 353.25f, 209.08f, 353.25f, 211.64f);
                bezier25Path.lineTo(353.25f, 218.23f);
                bezier25Path.lineTo(349.76f, 218.23f);
                bezier25Path.lineTo(349.76f, 205.65f);
                bezier25Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                bezier25Path.setFillType(Path.FillType.EVEN_ODD);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(StyleKit.dAE4E9);
                canvas.drawPath(bezier25Path, paint);
                
                // Bezier 26
                RectF bezier26Rect = CacheForViewLogo2.bezier26Rect;
                bezier26Rect.set(363.46f, 205.31f, 376.07f, 223f);
                Path bezier26Path = CacheForViewLogo2.bezier26Path;
                bezier26Path.reset();
                bezier26Path.moveTo(372.75f, 211.78f);
                bezier26Path.cubicTo(372.75f, 209.74f, 372.04f, 207.92f, 369.78f, 207.92f);
                bezier26Path.cubicTo(367.81f, 207.92f, 366.95f, 209.62f, 366.95f, 211.49f);
                bezier26Path.cubicTo(366.95f, 213.29f, 367.62f, 215.26f, 369.78f, 215.26f);
                bezier26Path.cubicTo(371.77f, 215.26f, 372.75f, 213.58f, 372.75f, 211.78f);
                bezier26Path.lineTo(372.75f, 211.78f);
                bezier26Path.close();
                bezier26Path.moveTo(376.07f, 217.43f);
                bezier26Path.cubicTo(376.07f, 219.5f, 375.31f, 223f, 369.48f, 223f);
                bezier26Path.cubicTo(366.98f, 223f, 364.08f, 221.81f, 363.88f, 218.96f);
                bezier26Path.lineTo(367.35f, 218.96f);
                bezier26Path.cubicTo(367.67f, 220.25f, 368.7f, 220.69f, 369.95f, 220.69f);
                bezier26Path.cubicTo(371.89f, 220.69f, 372.78f, 219.4f, 372.75f, 217.57f);
                bezier26Path.lineTo(372.75f, 215.92f);
                bezier26Path.lineTo(372.7f, 215.92f);
                bezier26Path.cubicTo(371.94f, 217.26f, 370.44f, 217.87f, 368.89f, 217.87f);
                bezier26Path.cubicTo(365.06f, 217.87f, 363.46f, 215f, 363.46f, 211.54f);
                bezier26Path.cubicTo(363.46f, 208.28f, 365.38f, 205.31f, 368.92f, 205.31f);
                bezier26Path.cubicTo(370.59f, 205.31f, 371.84f, 205.87f, 372.7f, 207.33f);
                bezier26Path.lineTo(372.75f, 207.33f);
                bezier26Path.lineTo(372.75f, 205.65f);
                bezier26Path.lineTo(376.07f, 205.65f);
                bezier26Path.lineTo(376.07f, 217.43f);
                bezier26Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                bezier26Path.setFillType(Path.FillType.EVEN_ODD);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(StyleKit.dAE4E9);
                canvas.drawPath(bezier26Path, paint);
            }
            
            // Group
            {
                // Rectangle 4
                RectF rectangle4Rect = CacheForViewLogo2.rectangle4Rect;
                rectangle4Rect.set(103.6f, 101.52f, 121.9f, 185.87f);
                Path rectangle4Path = CacheForViewLogo2.rectangle4Path;
                rectangle4Path.reset();
                rectangle4Path.moveTo(rectangle4Rect.left, rectangle4Rect.top);
                rectangle4Path.lineTo(rectangle4Rect.right, rectangle4Rect.top);
                rectangle4Path.lineTo(rectangle4Rect.right, rectangle4Rect.bottom);
                rectangle4Path.lineTo(rectangle4Rect.left, rectangle4Rect.bottom);
                rectangle4Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(StyleKit._474F64);
                canvas.drawPath(rectangle4Path, paint);
                
                // Bezier 27
                RectF bezier27Rect = CacheForViewLogo2.bezier27Rect;
                bezier27Rect.set(135.9f, 99.29f, 207.09f, 187.52f);
                Path bezier27Path = CacheForViewLogo2.bezier27Path;
                bezier27Path.reset();
                bezier27Path.moveTo(153.91f, 157.56f);
                bezier27Path.cubicTo(153.91f, 168.76f, 162.68f, 173.13f, 172.62f, 173.13f);
                bezier27Path.cubicTo(179.14f, 173.13f, 189.09f, 171.24f, 189.09f, 162.63f);
                bezier27Path.cubicTo(189.09f, 153.43f, 176.3f, 152.13f, 163.98f, 148.71f);
                bezier27Path.cubicTo(151.42f, 145.65f, 138.75f, 140.34f, 138.75f, 124.77f);
                bezier27Path.cubicTo(138.75f, 107.43f, 155.1f, 99.29f, 170.38f, 99.29f);
                bezier27Path.cubicTo(188.02f, 99.29f, 204.25f, 106.96f, 204.25f, 126.42f);
                bezier27Path.lineTo(186.25f, 126.42f);
                bezier27Path.cubicTo(185.65f, 116.39f, 178.55f, 113.68f, 169.55f, 113.68f);
                bezier27Path.cubicTo(163.62f, 113.68f, 156.75f, 116.16f, 156.75f, 123.23f);
                bezier27Path.cubicTo(156.75f, 129.72f, 160.78f, 130.66f, 181.98f, 135.97f);
                bezier27Path.cubicTo(188.26f, 137.39f, 207.09f, 141.52f, 207.09f, 160.51f);
                bezier27Path.cubicTo(207.09f, 175.96f, 195.01f, 187.52f, 171.91f, 187.52f);
                bezier27Path.cubicTo(153.2f, 187.52f, 135.55f, 178.32f, 135.91f, 157.56f);
                bezier27Path.lineTo(153.91f, 157.56f);
                bezier27Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                bezier27Path.setFillType(Path.FillType.EVEN_ODD);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(StyleKit._474F64);
                canvas.drawPath(bezier27Path, paint);
                
                // Bezier 28
                RectF bezier28Rect = CacheForViewLogo2.bezier28Rect;
                bezier28Rect.set(213.01f, 101.29f, 295.81f, 185.51f);
                Path bezier28Path = CacheForViewLogo2.bezier28Path;
                bezier28Path.reset();
                bezier28Path.moveTo(243.34f, 152.96f);
                bezier28Path.lineTo(265.25f, 152.96f);
                bezier28Path.lineTo(254.59f, 122.05f);
                bezier28Path.lineTo(254.35f, 122.05f);
                bezier28Path.lineTo(243.34f, 152.96f);
                bezier28Path.close();
                bezier28Path.moveTo(245.11f, 101.29f);
                bezier28Path.lineTo(264.18f, 101.29f);
                bezier28Path.lineTo(295.81f, 185.51f);
                bezier28Path.lineTo(276.5f, 185.51f);
                bezier28Path.lineTo(270.1f, 166.76f);
                bezier28Path.lineTo(238.48f, 166.76f);
                bezier28Path.lineTo(231.85f, 185.51f);
                bezier28Path.lineTo(213.01f, 185.51f);
                bezier28Path.lineTo(245.11f, 101.29f);
                bezier28Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                bezier28Path.setFillType(Path.FillType.EVEN_ODD);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(StyleKit._474F64);
                canvas.drawPath(bezier28Path, paint);
                
                // Bezier 29
                RectF bezier29Rect = CacheForViewLogo2.bezier29Rect;
                bezier29Rect.set(309.43f, 101.29f, 376.82f, 185.51f);
                Path bezier29Path = CacheForViewLogo2.bezier29Path;
                bezier29Path.reset();
                bezier29Path.moveTo(328.02f, 140.93f);
                bezier29Path.lineTo(342.47f, 140.93f);
                bezier29Path.cubicTo(351f, 140.93f, 358.82f, 139.04f, 358.82f, 128.31f);
                bezier29Path.cubicTo(358.82f, 117.57f, 351f, 115.68f, 342.47f, 115.68f);
                bezier29Path.lineTo(328.02f, 115.68f);
                bezier29Path.lineTo(328.02f, 140.93f);
                bezier29Path.close();
                bezier29Path.moveTo(309.43f, 101.29f);
                bezier29Path.lineTo(347.57f, 101.29f);
                bezier29Path.cubicTo(368.77f, 101.29f, 376.82f, 114.62f, 376.82f, 128.31f);
                bezier29Path.cubicTo(376.82f, 141.99f, 368.77f, 155.32f, 347.57f, 155.32f);
                bezier29Path.lineTo(328.02f, 155.32f);
                bezier29Path.lineTo(328.02f, 185.51f);
                bezier29Path.lineTo(309.43f, 185.51f);
                bezier29Path.lineTo(309.43f, 101.29f);
                bezier29Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                bezier29Path.setFillType(Path.FillType.EVEN_ODD);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(StyleKit._474F64);
                canvas.drawPath(bezier29Path, paint);
            }
            
            // Group 3
            {
                // Rectangle 5
                RectF rectangle5Rect = CacheForViewLogo2.rectangle5Rect;
                rectangle5Rect.set(0f, 101.52f, 84.6f, 119.77f);
                Path rectangle5Path = CacheForViewLogo2.rectangle5Path;
                rectangle5Path.reset();
                rectangle5Path.moveTo(rectangle5Rect.left, rectangle5Rect.top);
                rectangle5Path.lineTo(rectangle5Rect.right, rectangle5Rect.top);
                rectangle5Path.lineTo(rectangle5Rect.right, rectangle5Rect.bottom);
                rectangle5Path.lineTo(rectangle5Rect.left, rectangle5Rect.bottom);
                rectangle5Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(_00ADEELogo);
                canvas.drawPath(rectangle5Path, paint);
                
                // Rectangle 6
                RectF rectangle6Rect = CacheForViewLogo2.rectangle6Rect;
                rectangle6Rect.set(39.63f, 134.12f, 84.58f, 152.37f);
                Path rectangle6Path = CacheForViewLogo2.rectangle6Path;
                rectangle6Path.reset();
                rectangle6Path.moveTo(rectangle6Rect.left, rectangle6Rect.top);
                rectangle6Path.lineTo(rectangle6Rect.right, rectangle6Rect.top);
                rectangle6Path.lineTo(rectangle6Rect.right, rectangle6Rect.bottom);
                rectangle6Path.lineTo(rectangle6Rect.left, rectangle6Rect.bottom);
                rectangle6Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(_1C75BBLogo);
                canvas.drawPath(rectangle6Path, paint);
                
                // Rectangle 8
                RectF rectangle8Rect = CacheForViewLogo2.rectangle8Rect;
                rectangle8Rect.set(18.1f, 166.72f, 84.6f, 185.97f);
                Path rectangle8Path = CacheForViewLogo2.rectangle8Path;
                rectangle8Path.reset();
                rectangle8Path.moveTo(rectangle8Rect.left, rectangle8Rect.top);
                rectangle8Path.lineTo(rectangle8Rect.right, rectangle8Rect.top);
                rectangle8Path.lineTo(rectangle8Rect.right, rectangle8Rect.bottom);
                rectangle8Path.lineTo(rectangle8Rect.left, rectangle8Rect.bottom);
                rectangle8Path.close();
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(_2B388FLogo);
                canvas.drawPath(rectangle8Path, paint);
            }
        }
        
        canvas.restore();
    }
    
    private static class CacheForUserIcon {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
    }
    
    public static void drawUserIcon(Canvas canvas) {
        StyleKit.drawUserIcon(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit);
    }
    
    public static void drawUserIcon(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForUserIcon.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForUserIcon.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForUserIcon.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Group
        {
            // Bezier
            RectF bezierRect = CacheForUserIcon.bezierRect;
            bezierRect.set(2f, 2f, 42f, 42f);
            Path bezierPath = CacheForUserIcon.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(22f, 42f);
            bezierPath.cubicTo(33.05f, 42f, 42f, 33.05f, 42f, 22f);
            bezierPath.cubicTo(42f, 10.95f, 33.05f, 2f, 22f, 2f);
            bezierPath.cubicTo(10.95f, 2f, 2f, 10.95f, 2f, 22f);
            bezierPath.cubicTo(2f, 33.05f, 10.95f, 42f, 22f, 42f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(3f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit.dAE4E9);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Oval
            RectF ovalRect = CacheForUserIcon.ovalRect;
            ovalRect.set(14.95f, 11.05f, 27.95f, 23.95f);
            Path ovalPath = CacheForUserIcon.ovalPath;
            ovalPath.reset();
            ovalPath.addOval(ovalRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(3f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit.dAE4E9);
            canvas.drawPath(ovalPath, paint);
            canvas.restore();
            
            // Bezier 3
            RectF bezier3Rect = CacheForUserIcon.bezier3Rect;
            bezier3Rect.set(6.59f, 28.02f, 36.41f, 35.43f);
            Path bezier3Path = CacheForUserIcon.bezier3Path;
            bezier3Path.reset();
            bezier3Path.moveTo(36.41f, 35.43f);
            bezier3Path.cubicTo(36.41f, 30.43f, 26.53f, 28.02f, 21.5f, 28.02f);
            bezier3Path.cubicTo(16.47f, 28.02f, 6.59f, 30.43f, 6.59f, 35.43f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(3f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit.dAE4E9);
            canvas.drawPath(bezier3Path, paint);
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForLockIcon {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
    }
    
    public static void drawLockIcon(Canvas canvas) {
        StyleKit.drawLockIcon(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit);
    }
    
    public static void drawLockIcon(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForLockIcon.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForLockIcon.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForLockIcon.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Group
        {
            // Bezier
            RectF bezierRect = CacheForLockIcon.bezierRect;
            bezierRect.set(6f, 13.27f, 39f, 41f);
            Path bezierPath = CacheForLockIcon.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(6f, 16.74f);
            bezierPath.cubicTo(6f, 14.82f, 7.48f, 13.27f, 9.3f, 13.27f);
            bezierPath.lineTo(35.7f, 13.27f);
            bezierPath.cubicTo(37.52f, 13.27f, 39f, 14.82f, 39f, 16.74f);
            bezierPath.lineTo(39f, 37.53f);
            bezierPath.cubicTo(39f, 39.45f, 37.52f, 41f, 35.7f, 41f);
            bezierPath.lineTo(9.3f, 41f);
            bezierPath.cubicTo(7.48f, 41f, 6f, 39.45f, 6f, 37.53f);
            bezierPath.lineTo(6f, 16.74f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(3f);
            paint.setStrokeCap(Paint.Cap.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit.dAE4E9);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Oval
            RectF ovalRect = CacheForLockIcon.ovalRect;
            ovalRect.set(17f, 22.05f, 27f, 32.05f);
            Path ovalPath = CacheForLockIcon.ovalPath;
            ovalPath.reset();
            ovalPath.addOval(ovalRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(3f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit.dAE4E9);
            canvas.drawPath(ovalPath, paint);
            canvas.restore();
            
            // Bezier 3
            RectF bezier3Rect = CacheForLockIcon.bezier3Rect;
            bezier3Rect.set(14.25f, 2f, 30.75f, 13.27f);
            Path bezier3Path = CacheForLockIcon.bezier3Path;
            bezier3Path.reset();
            bezier3Path.moveTo(14.25f, 13.27f);
            bezier3Path.lineTo(14.25f, 10.48f);
            bezier3Path.cubicTo(14.25f, 5.8f, 17.95f, 2f, 22.5f, 2f);
            bezier3Path.cubicTo(27.05f, 2f, 30.75f, 5.8f, 30.75f, 10.48f);
            bezier3Path.lineTo(30.75f, 13.27f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(3f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit.dAE4E9);
            canvas.drawPath(bezier3Path, paint);
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForArrow {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 25f, 34f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    public static void drawArrow(Canvas canvas) {
        StyleKit.drawArrow(canvas, new RectF(0f, 0f, 25f, 34f), ResizingBehavior.AspectFit);
    }
    
    public static void drawArrow(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint = CacheForArrow.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForArrow.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForArrow.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 25f, resizedFrame.height() / 34f);
        
        // Bezier
        canvas.save();
        canvas.translate(8f, 17.38f);
        currentTransformation.peek().postTranslate(8f, 17.38f);
        canvas.rotate(180f);
        currentTransformation.peek().postRotate(180f);
        RectF bezierRect = CacheForArrow.bezierRect;
        bezierRect.set(-17f, -16.62f, 0f, 17.38f);
        Path bezierPath = CacheForArrow.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(-3.07f, 17.38f);
        bezierPath.lineTo(-16.51f, 1.69f);
        bezierPath.cubicTo(-17.16f, 0.94f, -17.16f, -0.18f, -16.51f, -0.94f);
        bezierPath.lineTo(-3.07f, -16.62f);
        bezierPath.lineTo(0f, -13.99f);
        bezierPath.lineTo(-12.31f, 0.38f);
        bezierPath.lineTo(0f, 14.75f);
        bezierPath.lineTo(-3.07f, 17.38f);
        bezierPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(StyleKit.dAE4E9);
        canvas.drawPath(bezierPath, paint);
        canvas.restore();
        
        canvas.restore();
    }
    
    private static class CacheForSearchIcon {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 18f, 18f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    public static void drawSearchIcon(Canvas canvas) {
        StyleKit.drawSearchIcon(canvas, new RectF(0f, 0f, 18f, 18f), ResizingBehavior.AspectFit);
    }
    
    public static void drawSearchIcon(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForSearchIcon.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForSearchIcon.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForSearchIcon.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 18f, resizedFrame.height() / 18f);
        
        // Bezier
        RectF bezierRect = CacheForSearchIcon.bezierRect;
        bezierRect.set(0f, 0f, 18f, 18f);
        Path bezierPath = CacheForSearchIcon.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(18f, 16.59f);
        bezierPath.lineTo(13.04f, 11.63f);
        bezierPath.cubicTo(15.34f, 8.59f, 14.89f, 4.29f, 12.02f, 1.78f);
        bezierPath.cubicTo(9.14f, -0.72f, 4.82f, -0.57f, 2.12f, 2.12f);
        bezierPath.cubicTo(-0.57f, 4.82f, -0.72f, 9.14f, 1.78f, 12.02f);
        bezierPath.cubicTo(4.29f, 14.89f, 8.59f, 15.34f, 11.63f, 13.04f);
        bezierPath.lineTo(16.59f, 18f);
        bezierPath.lineTo(18f, 16.59f);
        bezierPath.close();
        bezierPath.moveTo(1.54f, 7.27f);
        bezierPath.cubicTo(1.54f, 4.1f, 4.1f, 1.54f, 7.27f, 1.54f);
        bezierPath.cubicTo(10.44f, 1.54f, 13.01f, 4.1f, 13.01f, 7.27f);
        bezierPath.cubicTo(13.01f, 10.44f, 10.44f, 13.01f, 7.27f, 13.01f);
        bezierPath.cubicTo(5.75f, 13.01f, 4.29f, 12.41f, 3.22f, 11.33f);
        bezierPath.cubicTo(2.14f, 10.25f, 1.54f, 8.8f, 1.54f, 7.27f);
        bezierPath.lineTo(1.54f, 7.27f);
        bezierPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(StyleKit.fFFFFF);
        canvas.drawPath(bezierPath, paint);
        
        canvas.restore();
    }
    
    private static class CacheForMicIcon {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 12f, 22f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    public static void drawMicIcon(Canvas canvas) {
        StyleKit.drawMicIcon(canvas, new RectF(0f, 0f, 12f, 22f), ResizingBehavior.AspectFit);
    }
    
    public static void drawMicIcon(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForMicIcon.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForMicIcon.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForMicIcon.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 12f, resizedFrame.height() / 22f);
        
        // Bezier
        RectF bezierRect = CacheForMicIcon.bezierRect;
        bezierRect.set(0f, 0f, 11.5f, 21.5f);
        Path bezierPath = CacheForMicIcon.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(5.75f, 15f);
        bezierPath.lineTo(5.75f, 15f);
        bezierPath.cubicTo(3.96f, 15f, 2.5f, 13.54f, 2.5f, 11.75f);
        bezierPath.lineTo(2.5f, 3.25f);
        bezierPath.cubicTo(2.5f, 1.46f, 3.96f, 0f, 5.75f, 0f);
        bezierPath.cubicTo(7.54f, 0f, 9f, 1.46f, 9f, 3.25f);
        bezierPath.lineTo(9f, 11.75f);
        bezierPath.cubicTo(9f, 12.61f, 8.66f, 13.44f, 8.05f, 14.05f);
        bezierPath.cubicTo(7.44f, 14.66f, 6.61f, 15f, 5.75f, 15f);
        bezierPath.close();
        bezierPath.moveTo(11.5f, 11.76f);
        bezierPath.lineTo(11.5f, 11.76f);
        bezierPath.cubicTo(11.49f, 14.64f, 9.36f, 17.07f, 6.5f, 17.45f);
        bezierPath.lineTo(6.5f, 20f);
        bezierPath.lineTo(9.5f, 20f);
        bezierPath.cubicTo(9.91f, 20f, 10.25f, 20.34f, 10.25f, 20.75f);
        bezierPath.cubicTo(10.25f, 21.16f, 9.91f, 21.5f, 9.5f, 21.5f);
        bezierPath.lineTo(2f, 21.5f);
        bezierPath.cubicTo(1.59f, 21.5f, 1.25f, 21.16f, 1.25f, 20.75f);
        bezierPath.cubicTo(1.25f, 20.34f, 1.59f, 20f, 2f, 20f);
        bezierPath.lineTo(5f, 20f);
        bezierPath.lineTo(5f, 17.45f);
        bezierPath.cubicTo(2.14f, 17.07f, 0f, 14.64f, 0f, 11.76f);
        bezierPath.lineTo(0f, 9.26f);
        bezierPath.cubicTo(0f, 8.85f, 0.34f, 8.51f, 0.75f, 8.51f);
        bezierPath.cubicTo(1.16f, 8.51f, 1.5f, 8.85f, 1.5f, 9.26f);
        bezierPath.lineTo(1.5f, 11.76f);
        bezierPath.cubicTo(1.5f, 14.11f, 3.4f, 16.01f, 5.75f, 16.01f);
        bezierPath.cubicTo(8.1f, 16.01f, 10f, 14.11f, 10f, 11.76f);
        bezierPath.lineTo(10f, 9.26f);
        bezierPath.cubicTo(10f, 8.85f, 10.34f, 8.51f, 10.75f, 8.51f);
        bezierPath.cubicTo(11.16f, 8.51f, 11.5f, 8.85f, 11.5f, 9.26f);
        bezierPath.lineTo(11.5f, 11.76f);
        bezierPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(StyleKit.fFFFFF);
        canvas.drawPath(bezierPath, paint);
        
        canvas.restore();
    }
    
    private static class CacheForLeftArrowWhite {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 17f, 34f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    public static void drawLeftArrowWhite(Canvas canvas) {
        StyleKit.drawLeftArrowWhite(canvas, new RectF(0f, 0f, 17f, 34f), ResizingBehavior.AspectFit);
    }
    
    public static void drawLeftArrowWhite(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint = CacheForLeftArrowWhite.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForLeftArrowWhite.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForLeftArrowWhite.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 17f, resizedFrame.height() / 34f);
        
        // Bezier
        canvas.save();
        canvas.translate(8.5f, 17f);
        currentTransformation.peek().postTranslate(8.5f, 17f);
        canvas.rotate(-180f);
        currentTransformation.peek().postRotate(-180f);
        RectF bezierRect = CacheForLeftArrowWhite.bezierRect;
        bezierRect.set(-8.5f, -17f, 8.5f, 17f);
        Path bezierPath = CacheForLeftArrowWhite.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(-5.43f, -17f);
        bezierPath.lineTo(8.01f, -1.31f);
        bezierPath.cubicTo(8.66f, -0.56f, 8.66f, 0.56f, 8.01f, 1.31f);
        bezierPath.lineTo(-5.43f, 17f);
        bezierPath.lineTo(-8.5f, 14.37f);
        bezierPath.lineTo(3.82f, -0f);
        bezierPath.lineTo(-8.5f, -14.37f);
        bezierPath.lineTo(-5.43f, -17f);
        bezierPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(StyleKit.fFFFFF);
        canvas.drawPath(bezierPath, paint);
        canvas.restore();
        
        canvas.restore();
    }
    
    private static class CacheForWatsonIcon {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 54f, 51f);
        private static RectF resizedFrame = new RectF();
        private static RectF pictureRect = new RectF();
        private static Path picturePath = new Path();
    }
    
    public static void drawWatsonIcon(Canvas canvas, Context context) {
        StyleKit.drawWatsonIcon(canvas, context, new RectF(0f, 0f, 54f, 51f), ResizingBehavior.AspectFit);
    }
    
    public static void drawWatsonIcon(Canvas canvas, Context context, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        float displayDensity = context.getResources().getDisplayMetrics().density;
        Paint paint = CacheForWatsonIcon.paint;
        
        // Local Images
      //  PaintCodeBitmap pc_image = GlobalCache.image.get(context, R.drawable.image);
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForWatsonIcon.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForWatsonIcon.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 54f, resizedFrame.height() / 51f);
        
        // Picture
        RectF pictureRect = CacheForWatsonIcon.pictureRect;
        pictureRect.set(0f, 0f, 54f, 51f);
        Path picturePath = CacheForWatsonIcon.picturePath;
        picturePath.reset();
        picturePath.addRect(pictureRect, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        //paint.setShader(pc_image.getShader());
        
        canvas.save();
        canvas.clipPath(picturePath);
        canvas.translate(pictureRect.left, pictureRect.top);
        canvas.scale(1 / displayDensity, 1 / displayDensity);
        //canvas.clipRect(pc_image.getBounds());
        canvas.drawPaint(paint);
        canvas.restore();
        
        canvas.restore();
    }
    
    private static class CacheForMicSearch {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 28f, 38f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    public static void drawMicSearch(Canvas canvas) {
        StyleKit.drawMicSearch(canvas, new RectF(0f, 0f, 28f, 38f), ResizingBehavior.AspectFit);
    }
    
    public static void drawMicSearch(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForMicSearch.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForMicSearch.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForMicSearch.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 28f, resizedFrame.height() / 38f);
        
        // Bezier
        RectF bezierRect = CacheForMicSearch.bezierRect;
        bezierRect.set(0f, 0f, 28f, 38f);
        Path bezierPath = CacheForMicSearch.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(14f, 24f);
        bezierPath.cubicTo(17.31f, 24f, 19.98f, 21.31f, 19.98f, 18f);
        bezierPath.lineTo(20f, 6f);
        bezierPath.cubicTo(20f, 2.68f, 17.32f, 0f, 14f, 0f);
        bezierPath.cubicTo(10.69f, 0f, 8f, 2.68f, 8f, 6f);
        bezierPath.lineTo(8f, 18f);
        bezierPath.cubicTo(8f, 21.31f, 10.69f, 24f, 14f, 24f);
        bezierPath.close();
        bezierPath.moveTo(24.6f, 18f);
        bezierPath.cubicTo(24.6f, 24f, 19.53f, 28.2f, 14f, 28.2f);
        bezierPath.cubicTo(8.48f, 28.2f, 3.4f, 24f, 3.4f, 18f);
        bezierPath.lineTo(0f, 18f);
        bezierPath.cubicTo(0f, 24.83f, 5.44f, 30.47f, 12f, 31.44f);
        bezierPath.lineTo(12f, 38f);
        bezierPath.lineTo(16f, 38f);
        bezierPath.lineTo(16f, 31.44f);
        bezierPath.cubicTo(22.56f, 30.47f, 28f, 24.83f, 28f, 18f);
        bezierPath.lineTo(24.6f, 18f);
        bezierPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(StyleKit._78BAC9);
        canvas.drawPath(bezierPath, paint);
        
        canvas.restore();
    }
    
    private static class CacheForDownArrow {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 30f, 34f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    public static void drawDownArrow(Canvas canvas) {
        StyleKit.drawDownArrow(canvas, new RectF(0f, 0f, 30f, 34f), ResizingBehavior.AspectFit);
    }
    
    public static void drawDownArrow(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForDownArrow.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForDownArrow.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForDownArrow.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 30f, resizedFrame.height() / 34f);
        
        // Bezier
        RectF bezierRect = CacheForDownArrow.bezierRect;
        bezierRect.set(4f, 12f, 25f, 22f);
        Path bezierPath = CacheForDownArrow.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(25f, 13.81f);
        bezierPath.lineTo(15.31f, 21.71f);
        bezierPath.cubicTo(14.85f, 22.1f, 14.15f, 22.1f, 13.69f, 21.71f);
        bezierPath.lineTo(4f, 13.81f);
        bezierPath.lineTo(5.63f, 12f);
        bezierPath.lineTo(14.5f, 19.25f);
        bezierPath.lineTo(23.37f, 12f);
        bezierPath.lineTo(25f, 13.81f);
        bezierPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(StyleKit.fFFFFF);
        canvas.drawPath(bezierPath, paint);
        
        canvas.restore();
    }
    
    private static class CacheForRadioBtnOn {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 50f, 50f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    public static void drawRadioBtnOn(Canvas canvas) {
        StyleKit.drawRadioBtnOn(canvas, new RectF(0f, 0f, 50f, 50f), ResizingBehavior.AspectFit);
    }
    
    public static void drawRadioBtnOn(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForRadioBtnOn.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForRadioBtnOn.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForRadioBtnOn.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 50f, resizedFrame.height() / 50f);
        
        // Bezier
        RectF bezierRect = CacheForRadioBtnOn.bezierRect;
        bezierRect.set(0f, 0f, 50f, 50f);
        Path bezierPath = CacheForRadioBtnOn.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(25.51f, 13.27f);
        bezierPath.cubicTo(18.75f, 13.27f, 13.27f, 18.75f, 13.27f, 25.51f);
        bezierPath.cubicTo(13.27f, 32.27f, 18.75f, 37.76f, 25.51f, 37.76f);
        bezierPath.cubicTo(32.27f, 37.76f, 37.76f, 32.27f, 37.76f, 25.51f);
        bezierPath.cubicTo(37.76f, 18.75f, 32.27f, 13.27f, 25.51f, 13.27f);
        bezierPath.close();
        bezierPath.moveTo(25f, 0f);
        bezierPath.cubicTo(11.19f, 0f, 0f, 11.19f, 0f, 25f);
        bezierPath.cubicTo(0f, 38.81f, 11.19f, 50f, 25f, 50f);
        bezierPath.cubicTo(38.81f, 50f, 50f, 38.81f, 50f, 25f);
        bezierPath.cubicTo(50f, 11.19f, 38.81f, 0f, 25f, 0f);
        bezierPath.close();
        bezierPath.moveTo(25f, 44.9f);
        bezierPath.cubicTo(14.01f, 44.9f, 5.1f, 35.99f, 5.1f, 25f);
        bezierPath.cubicTo(5.1f, 14.01f, 14.01f, 5.1f, 25f, 5.1f);
        bezierPath.cubicTo(35.99f, 5.1f, 44.9f, 14.01f, 44.9f, 25f);
        bezierPath.cubicTo(44.9f, 35.99f, 35.99f, 44.9f, 25f, 44.9f);
        bezierPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(StyleKit._78BAC950);
        canvas.drawPath(bezierPath, paint);
        
        canvas.restore();
    }
    
    private static class CacheForRadioBtnOff {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 50f, 50f);
        private static RectF resizedFrame = new RectF();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
    }
    
    public static void drawRadioBtnOff(Canvas canvas) {
        StyleKit.drawRadioBtnOff(canvas, new RectF(0f, 0f, 50f, 50f), ResizingBehavior.AspectFit);
    }
    
    public static void drawRadioBtnOff(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForRadioBtnOff.paint;
        
        // Local Colors
        int c0D0D6IconColor = Color.argb(255, 192, 208, 214);
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForRadioBtnOff.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForRadioBtnOff.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 50f, resizedFrame.height() / 50f);
        
        // Oval
        RectF ovalRect = CacheForRadioBtnOff.ovalRect;
        ovalRect.set(1.5f, 1.5f, 48.5f, 48.5f);
        Path ovalPath = CacheForRadioBtnOff.ovalPath;
        ovalPath.reset();
        ovalPath.addOval(ovalRect, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(3f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(c0D0D6IconColor);
        canvas.drawPath(ovalPath, paint);
        canvas.restore();
        
        canvas.restore();
    }
    
    private static class CacheForRightArrowGreen {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 17f, 34f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    public static void drawRightArrowGreen(Canvas canvas) {
        StyleKit.drawRightArrowGreen(canvas, new RectF(0f, 0f, 17f, 34f), ResizingBehavior.AspectFit);
    }
    
    public static void drawRightArrowGreen(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForRightArrowGreen.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForRightArrowGreen.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForRightArrowGreen.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 17f, resizedFrame.height() / 34f);
        
        // Bezier
        RectF bezierRect = CacheForRightArrowGreen.bezierRect;
        bezierRect.set(0f, 0f, 17f, 34f);
        Path bezierPath = CacheForRightArrowGreen.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(3.07f, 0f);
        bezierPath.lineTo(16.51f, 15.69f);
        bezierPath.cubicTo(17.16f, 16.44f, 17.16f, 17.56f, 16.51f, 18.31f);
        bezierPath.lineTo(3.07f, 34f);
        bezierPath.lineTo(0f, 31.37f);
        bezierPath.lineTo(12.32f, 17f);
        bezierPath.lineTo(0f, 2.63f);
        bezierPath.lineTo(3.07f, 0f);
        bezierPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(StyleKit._78BAC9);
        canvas.drawPath(bezierPath, paint);
        
        canvas.restore();
    }
    
    private static class CacheForDownArrDropdown {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 26f, 13f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
    }
    
    public static void drawDownArrDropdown(Canvas canvas) {
        StyleKit.drawDownArrDropdown(canvas, new RectF(0f, 0f, 26f, 13f), ResizingBehavior.AspectFit);
    }
    
    public static void drawDownArrDropdown(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint = CacheForDownArrDropdown.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForDownArrDropdown.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForDownArrDropdown.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 26f, resizedFrame.height() / 13f);
        
        // Bezier 2
        canvas.save();
        canvas.translate(17f, 8.5f);
        currentTransformation.peek().postTranslate(17f, 8.5f);
        canvas.rotate(90f);
        currentTransformation.peek().postRotate(90f);
        RectF bezier2Rect = CacheForDownArrDropdown.bezier2Rect;
        bezier2Rect.set(-8.5f, -9f, 4.5f, 17f);
        Path bezier2Path = CacheForDownArrDropdown.bezier2Path;
        bezier2Path.reset();
        bezier2Path.moveTo(-6.15f, -9f);
        bezier2Path.lineTo(4.13f, 2.99f);
        bezier2Path.cubicTo(4.62f, 3.57f, 4.62f, 4.43f, 4.13f, 5.01f);
        bezier2Path.lineTo(-6.15f, 17f);
        bezier2Path.lineTo(-8.5f, 14.99f);
        bezier2Path.lineTo(0.92f, 4f);
        bezier2Path.lineTo(-8.5f, -6.99f);
        bezier2Path.lineTo(-6.15f, -9f);
        bezier2Path.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(StyleKit._78BAC9);
        canvas.drawPath(bezier2Path, paint);
        canvas.restore();
        
        canvas.restore();
    }
    
    private static class CacheForLogoutButton {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF bezier4Rect = new RectF();
        private static Path bezier4Path = new Path();
    }
    
    public static void drawLogoutButton(Canvas canvas) {
        StyleKit.drawLogoutButton(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit);
    }
    
    public static void drawLogoutButton(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForLogoutButton.paint;
        
        // Local Colors
        int c0D0D6IconColor = Color.argb(255, 192, 208, 214);
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForLogoutButton.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForLogoutButton.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Group
        {
            // Bezier 2
            RectF bezier2Rect = CacheForLogoutButton.bezier2Rect;
            bezier2Rect.set(0f, 22.47f, 35.41f, 22.47f);
            Path bezier2Path = CacheForLogoutButton.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(35.41f, 22.47f);
            bezier2Path.lineTo(0f, 22.47f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(3f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit.fFFFFF);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
            
            // Bezier 3
            RectF bezier3Rect = CacheForLogoutButton.bezier3Rect;
            bezier3Rect.set(0f, 12.17f, 11.8f, 32.77f);
            Path bezier3Path = CacheForLogoutButton.bezier3Path;
            bezier3Path.reset();
            bezier3Path.moveTo(11.8f, 32.77f);
            bezier3Path.lineTo(0f, 22.47f);
            bezier3Path.lineTo(11.8f, 12.17f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(3f);
            paint.setStrokeCap(Paint.Cap.SQUARE);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit.fFFFFF);
            canvas.drawPath(bezier3Path, paint);
            canvas.restore();
        }
        
        // Bezier 4
        RectF bezier4Rect = CacheForLogoutButton.bezier4Rect;
        bezier4Rect.set(18.24f, 1.5f, 42.5f, 42.5f);
        Path bezier4Path = CacheForLogoutButton.bezier4Path;
        bezier4Path.reset();
        bezier4Path.moveTo(18.24f, 1.5f);
        bezier4Path.lineTo(42.5f, 1.5f);
        bezier4Path.lineTo(42.5f, 42.5f);
        bezier4Path.lineTo(18.24f, 42.5f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(3f);
        paint.setStrokeCap(Paint.Cap.SQUARE);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(c0D0D6IconColor);
        canvas.drawPath(bezier4Path, paint);
        canvas.restore();
        
        canvas.restore();
    }
    
    private static class CacheForMyplanButton {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static RectF rectangle2Rect = new RectF();
        private static Path rectangle2Path = new Path();
        private static RectF rectangle3Rect = new RectF();
        private static Path rectangle3Path = new Path();
        private static RectF rectangle4Rect = new RectF();
        private static Path rectangle4Path = new Path();
    }
    
    public static void drawMyplanButton(Canvas canvas) {
        StyleKit.drawMyplanButton(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit);
    }
    
    public static void drawMyplanButton(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForMyplanButton.paint;
        
        // Local Colors
        int c0D0D6IconColor = Color.argb(255, 192, 208, 214);
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForMyplanButton.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForMyplanButton.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Rectangle
        RectF rectangleRect = CacheForMyplanButton.rectangleRect;
        rectangleRect.set(1.5f, 17.5f, 18.5f, 42.5f);
        Path rectanglePath = CacheForMyplanButton.rectanglePath;
        rectanglePath.reset();
        rectanglePath.moveTo(rectangleRect.left, rectangleRect.top);
        rectanglePath.lineTo(rectangleRect.right, rectangleRect.top);
        rectanglePath.lineTo(rectangleRect.right, rectangleRect.bottom);
        rectanglePath.lineTo(rectangleRect.left, rectangleRect.bottom);
        rectanglePath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(3f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(c0D0D6IconColor);
        canvas.drawPath(rectanglePath, paint);
        canvas.restore();
        
        // Rectangle 2
        RectF rectangle2Rect = CacheForMyplanButton.rectangle2Rect;
        rectangle2Rect.set(25.5f, 1.5f, 42.5f, 26.5f);
        Path rectangle2Path = CacheForMyplanButton.rectangle2Path;
        rectangle2Path.reset();
        rectangle2Path.moveTo(rectangle2Rect.left, rectangle2Rect.top);
        rectangle2Path.lineTo(rectangle2Rect.right, rectangle2Rect.top);
        rectangle2Path.lineTo(rectangle2Rect.right, rectangle2Rect.bottom);
        rectangle2Path.lineTo(rectangle2Rect.left, rectangle2Rect.bottom);
        rectangle2Path.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(3f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(c0D0D6IconColor);
        canvas.drawPath(rectangle2Path, paint);
        canvas.restore();
        
        // Rectangle 3
        RectF rectangle3Rect = CacheForMyplanButton.rectangle3Rect;
        rectangle3Rect.set(1.5f, 1.5f, 18.5f, 10.5f);
        Path rectangle3Path = CacheForMyplanButton.rectangle3Path;
        rectangle3Path.reset();
        rectangle3Path.moveTo(rectangle3Rect.left, rectangle3Rect.top);
        rectangle3Path.lineTo(rectangle3Rect.right, rectangle3Rect.top);
        rectangle3Path.lineTo(rectangle3Rect.right, rectangle3Rect.bottom);
        rectangle3Path.lineTo(rectangle3Rect.left, rectangle3Rect.bottom);
        rectangle3Path.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(3f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(c0D0D6IconColor);
        canvas.drawPath(rectangle3Path, paint);
        canvas.restore();
        
        // Rectangle 4
        RectF rectangle4Rect = CacheForMyplanButton.rectangle4Rect;
        rectangle4Rect.set(25.5f, 33.5f, 42.5f, 42.5f);
        Path rectangle4Path = CacheForMyplanButton.rectangle4Path;
        rectangle4Path.reset();
        rectangle4Path.moveTo(rectangle4Rect.left, rectangle4Rect.top);
        rectangle4Path.lineTo(rectangle4Rect.right, rectangle4Rect.top);
        rectangle4Path.lineTo(rectangle4Rect.right, rectangle4Rect.bottom);
        rectangle4Path.lineTo(rectangle4Rect.left, rectangle4Rect.bottom);
        rectangle4Path.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(3f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(c0D0D6IconColor);
        canvas.drawPath(rectangle4Path, paint);
        canvas.restore();
        
        canvas.restore();
    }
    
    private static class CacheForMyplanButtonSelected {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static RectF rectangle2Rect = new RectF();
        private static Path rectangle2Path = new Path();
        private static RectF rectangle3Rect = new RectF();
        private static Path rectangle3Path = new Path();
        private static RectF rectangle4Rect = new RectF();
        private static Path rectangle4Path = new Path();
    }
    
    public static void drawMyplanButtonSelected(Canvas canvas) {
        StyleKit.drawMyplanButtonSelected(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit);
    }
    
    public static void drawMyplanButtonSelected(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForMyplanButtonSelected.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForMyplanButtonSelected.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForMyplanButtonSelected.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Rectangle
        RectF rectangleRect = CacheForMyplanButtonSelected.rectangleRect;
        rectangleRect.set(1.5f, 17.5f, 18.5f, 42.5f);
        Path rectanglePath = CacheForMyplanButtonSelected.rectanglePath;
        rectanglePath.reset();
        rectanglePath.moveTo(rectangleRect.left, rectangleRect.top);
        rectanglePath.lineTo(rectangleRect.right, rectangleRect.top);
        rectanglePath.lineTo(rectangleRect.right, rectangleRect.bottom);
        rectanglePath.lineTo(rectangleRect.left, rectangleRect.bottom);
        rectanglePath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(3f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(StyleKit.fFFFFF);
        canvas.drawPath(rectanglePath, paint);
        canvas.restore();
        
        // Rectangle 2
        RectF rectangle2Rect = CacheForMyplanButtonSelected.rectangle2Rect;
        rectangle2Rect.set(25.5f, 1.5f, 42.5f, 26.5f);
        Path rectangle2Path = CacheForMyplanButtonSelected.rectangle2Path;
        rectangle2Path.reset();
        rectangle2Path.moveTo(rectangle2Rect.left, rectangle2Rect.top);
        rectangle2Path.lineTo(rectangle2Rect.right, rectangle2Rect.top);
        rectangle2Path.lineTo(rectangle2Rect.right, rectangle2Rect.bottom);
        rectangle2Path.lineTo(rectangle2Rect.left, rectangle2Rect.bottom);
        rectangle2Path.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(3f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(StyleKit.fFFFFF);
        canvas.drawPath(rectangle2Path, paint);
        canvas.restore();
        
        // Rectangle 3
        RectF rectangle3Rect = CacheForMyplanButtonSelected.rectangle3Rect;
        rectangle3Rect.set(1.5f, 1.5f, 18.5f, 10.5f);
        Path rectangle3Path = CacheForMyplanButtonSelected.rectangle3Path;
        rectangle3Path.reset();
        rectangle3Path.moveTo(rectangle3Rect.left, rectangle3Rect.top);
        rectangle3Path.lineTo(rectangle3Rect.right, rectangle3Rect.top);
        rectangle3Path.lineTo(rectangle3Rect.right, rectangle3Rect.bottom);
        rectangle3Path.lineTo(rectangle3Rect.left, rectangle3Rect.bottom);
        rectangle3Path.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(3f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(StyleKit.fFFFFF);
        canvas.drawPath(rectangle3Path, paint);
        canvas.restore();
        
        // Rectangle 4
        RectF rectangle4Rect = CacheForMyplanButtonSelected.rectangle4Rect;
        rectangle4Rect.set(25.5f, 33.5f, 42.5f, 42.5f);
        Path rectangle4Path = CacheForMyplanButtonSelected.rectangle4Path;
        rectangle4Path.reset();
        rectangle4Path.moveTo(rectangle4Rect.left, rectangle4Rect.top);
        rectangle4Path.lineTo(rectangle4Rect.right, rectangle4Rect.top);
        rectangle4Path.lineTo(rectangle4Rect.right, rectangle4Rect.bottom);
        rectangle4Path.lineTo(rectangle4Rect.left, rectangle4Rect.bottom);
        rectangle4Path.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(3f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(StyleKit.fFFFFF);
        canvas.drawPath(rectangle4Path, paint);
        canvas.restore();
        
        canvas.restore();
    }
    
    private static class CacheForLogoutButtonSelected {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 44f, 44f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF bezier4Rect = new RectF();
        private static Path bezier4Path = new Path();
    }
    
    public static void drawLogoutButtonSelected(Canvas canvas) {
        StyleKit.drawLogoutButtonSelected(canvas, new RectF(0f, 0f, 44f, 44f), ResizingBehavior.AspectFit);
    }
    
    public static void drawLogoutButtonSelected(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForLogoutButtonSelected.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForLogoutButtonSelected.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForLogoutButtonSelected.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 44f, resizedFrame.height() / 44f);
        
        // Group
        {
            // Bezier 2
            RectF bezier2Rect = CacheForLogoutButtonSelected.bezier2Rect;
            bezier2Rect.set(0f, 22.47f, 35.41f, 22.47f);
            Path bezier2Path = CacheForLogoutButtonSelected.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(35.41f, 22.47f);
            bezier2Path.lineTo(0f, 22.47f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(3f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit.fFFFFF);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
            
            // Bezier 3
            RectF bezier3Rect = CacheForLogoutButtonSelected.bezier3Rect;
            bezier3Rect.set(0f, 12.17f, 11.8f, 32.77f);
            Path bezier3Path = CacheForLogoutButtonSelected.bezier3Path;
            bezier3Path.reset();
            bezier3Path.moveTo(11.8f, 32.77f);
            bezier3Path.lineTo(0f, 22.47f);
            bezier3Path.lineTo(11.8f, 12.17f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(3f);
            paint.setStrokeCap(Paint.Cap.SQUARE);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit.fFFFFF);
            canvas.drawPath(bezier3Path, paint);
            canvas.restore();
        }
        
        // Bezier 4
        RectF bezier4Rect = CacheForLogoutButtonSelected.bezier4Rect;
        bezier4Rect.set(18.24f, 1.5f, 42.5f, 42.5f);
        Path bezier4Path = CacheForLogoutButtonSelected.bezier4Path;
        bezier4Path.reset();
        bezier4Path.moveTo(18.24f, 1.5f);
        bezier4Path.lineTo(42.5f, 1.5f);
        bezier4Path.lineTo(42.5f, 42.5f);
        bezier4Path.lineTo(18.24f, 42.5f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(3f);
        paint.setStrokeCap(Paint.Cap.SQUARE);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(StyleKit.fFFFFF);
        canvas.drawPath(bezier4Path, paint);
        canvas.restore();
        
        canvas.restore();
    }
    
    private static class CacheForLeftArrowGrey {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 17f, 34f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    public static void drawLeftArrowGrey(Canvas canvas) {
        StyleKit.drawLeftArrowGrey(canvas, new RectF(0f, 0f, 17f, 34f), ResizingBehavior.AspectFit);
    }
    
    public static void drawLeftArrowGrey(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint = CacheForLeftArrowGrey.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForLeftArrowGrey.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForLeftArrowGrey.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 17f, resizedFrame.height() / 34f);
        
        // Bezier
        canvas.save();
        canvas.translate(8.5f, 17f);
        currentTransformation.peek().postTranslate(8.5f, 17f);
        canvas.rotate(-180f);
        currentTransformation.peek().postRotate(-180f);
        RectF bezierRect = CacheForLeftArrowGrey.bezierRect;
        bezierRect.set(-8.5f, -17f, 8.5f, 17f);
        Path bezierPath = CacheForLeftArrowGrey.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(-5.43f, -17f);
        bezierPath.lineTo(8.01f, -1.31f);
        bezierPath.cubicTo(8.66f, -0.56f, 8.66f, 0.56f, 8.01f, 1.31f);
        bezierPath.lineTo(-5.43f, 17f);
        bezierPath.lineTo(-8.5f, 14.37f);
        bezierPath.lineTo(3.82f, -0f);
        bezierPath.lineTo(-8.5f, -14.37f);
        bezierPath.lineTo(-5.43f, -17f);
        bezierPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(StyleKit.dAE4E9);
        canvas.drawPath(bezierPath, paint);
        canvas.restore();
        
        canvas.restore();
    }
    
    private static class CacheForLinkIcon {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 32f, 14f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
    }
    
    public static void drawLinkIcon(Canvas canvas) {
        StyleKit.drawLinkIcon(canvas, new RectF(0f, 0f, 32f, 14f), ResizingBehavior.AspectFit);
    }
    
    public static void drawLinkIcon(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForLinkIcon.paint;
        
        // Local Colors
        int _00ADEELogo = Color.argb(255, 0, 173, 238);
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForLinkIcon.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForLinkIcon.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 32f, resizedFrame.height() / 14f);
        
        // Bezier
        RectF bezierRect = CacheForLinkIcon.bezierRect;
        bezierRect.set(19f, 1f, 31f, 13f);
        Path bezierPath = CacheForLinkIcon.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(19f, 1f);
        bezierPath.lineTo(25f, 1f);
        bezierPath.cubicTo(28.3f, 1f, 31f, 3.7f, 31f, 7f);
        bezierPath.lineTo(31f, 7f);
        bezierPath.cubicTo(31f, 10.3f, 28.3f, 13f, 25f, 13f);
        bezierPath.lineTo(19f, 13f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(2f);
        paint.setStrokeCap(Paint.Cap.SQUARE);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(_00ADEELogo);
        canvas.drawPath(bezierPath, paint);
        canvas.restore();
        
        // Bezier 2
        RectF bezier2Rect = CacheForLinkIcon.bezier2Rect;
        bezier2Rect.set(1f, 1f, 13f, 13f);
        Path bezier2Path = CacheForLinkIcon.bezier2Path;
        bezier2Path.reset();
        bezier2Path.moveTo(13f, 1f);
        bezier2Path.lineTo(7f, 1f);
        bezier2Path.cubicTo(3.7f, 1f, 1f, 3.7f, 1f, 7f);
        bezier2Path.lineTo(1f, 7f);
        bezier2Path.cubicTo(1f, 10.3f, 3.7f, 13f, 7f, 13f);
        bezier2Path.lineTo(13f, 13f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(2f);
        paint.setStrokeCap(Paint.Cap.SQUARE);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(_00ADEELogo);
        canvas.drawPath(bezier2Path, paint);
        canvas.restore();
        
        // Bezier 3
        RectF bezier3Rect = CacheForLinkIcon.bezier3Rect;
        bezier3Rect.set(10f, 7f, 22f, 7f);
        Path bezier3Path = CacheForLinkIcon.bezier3Path;
        bezier3Path.reset();
        bezier3Path.moveTo(10f, 7f);
        bezier3Path.lineTo(22f, 7f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(2f);
        paint.setStrokeCap(Paint.Cap.SQUARE);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(_00ADEELogo);
        canvas.drawPath(bezier3Path, paint);
        canvas.restore();
        
        canvas.restore();
    }
    
    private static class CacheForProgbarAspiration {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 170f, 12f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
    }
    
    public static void drawProgbarAspiration(Canvas canvas) {
        StyleKit.drawProgbarAspiration(canvas, new RectF(0f, 0f, 170f, 12f), ResizingBehavior.AspectFit);
    }
    
    public static void drawProgbarAspiration(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForProgbarAspiration.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForProgbarAspiration.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForProgbarAspiration.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 170f, resizedFrame.height() / 12f);
        
        // Bezier
        RectF bezierRect = CacheForProgbarAspiration.bezierRect;
        bezierRect.set(0f, 0f, 170f, 12f);
        Path bezierPath = CacheForProgbarAspiration.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(3f, 0f);
        bezierPath.lineTo(167f, 0f);
        bezierPath.lineTo(167f, 0f);
        bezierPath.cubicTo(168.66f, 0f, 170f, 1.34f, 170f, 3f);
        bezierPath.lineTo(170f, 9f);
        bezierPath.lineTo(170f, 9f);
        bezierPath.cubicTo(170f, 10.66f, 168.66f, 12f, 167f, 12f);
        bezierPath.lineTo(3f, 12f);
        bezierPath.lineTo(3f, 12f);
        bezierPath.cubicTo(1.34f, 12f, 0f, 10.66f, 0f, 9f);
        bezierPath.lineTo(0f, 3f);
        bezierPath.lineTo(0f, 3f);
        bezierPath.cubicTo(0f, 1.34f, 1.34f, 0f, 3f, 0f);
        bezierPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(StyleKit.dAE4E9);
        canvas.drawPath(bezierPath, paint);
        
        // Bezier 2
        RectF bezier2Rect = CacheForProgbarAspiration.bezier2Rect;
        bezier2Rect.set(0f, 0f, 42.5f, 12f);
        Path bezier2Path = CacheForProgbarAspiration.bezier2Path;
        bezier2Path.reset();
        bezier2Path.moveTo(3f, 0f);
        bezier2Path.lineTo(39.5f, 0f);
        bezier2Path.lineTo(39.5f, 0f);
        bezier2Path.cubicTo(41.16f, 0f, 42.5f, 1.34f, 42.5f, 3f);
        bezier2Path.lineTo(42.5f, 9f);
        bezier2Path.lineTo(42.5f, 9f);
        bezier2Path.cubicTo(42.5f, 10.66f, 41.16f, 12f, 39.5f, 12f);
        bezier2Path.lineTo(3f, 12f);
        bezier2Path.lineTo(3f, 12f);
        bezier2Path.cubicTo(1.34f, 12f, 0f, 10.66f, 0f, 9f);
        bezier2Path.lineTo(0f, 3f);
        bezier2Path.lineTo(0f, 3f);
        bezier2Path.cubicTo(0f, 1.34f, 1.34f, 0f, 3f, 0f);
        bezier2Path.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezier2Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(StyleKit._3b6caa);
        canvas.drawPath(bezier2Path, paint);
        
        canvas.restore();
    }
    
    private static class CacheForProgbarProgressing {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 170f, 12f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
    }
    
    public static void drawProgbarProgressing(Canvas canvas) {
        StyleKit.drawProgbarProgressing(canvas, new RectF(0f, 0f, 170f, 12f), ResizingBehavior.AspectFit);
    }
    
    public static void drawProgbarProgressing(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForProgbarProgressing.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForProgbarProgressing.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForProgbarProgressing.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 170f, resizedFrame.height() / 12f);
        
        // Bezier
        RectF bezierRect = CacheForProgbarProgressing.bezierRect;
        bezierRect.set(0f, 0f, 170f, 12f);
        Path bezierPath = CacheForProgbarProgressing.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(3f, 0f);
        bezierPath.lineTo(167f, 0f);
        bezierPath.lineTo(167f, 0f);
        bezierPath.cubicTo(168.66f, 0f, 170f, 1.34f, 170f, 3f);
        bezierPath.lineTo(170f, 9f);
        bezierPath.lineTo(170f, 9f);
        bezierPath.cubicTo(170f, 10.66f, 168.66f, 12f, 167f, 12f);
        bezierPath.lineTo(3f, 12f);
        bezierPath.lineTo(3f, 12f);
        bezierPath.cubicTo(1.34f, 12f, 0f, 10.66f, 0f, 9f);
        bezierPath.lineTo(0f, 3f);
        bezierPath.lineTo(0f, 3f);
        bezierPath.cubicTo(0f, 1.34f, 1.34f, 0f, 3f, 0f);
        bezierPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(StyleKit.dAE4E9);
        canvas.drawPath(bezierPath, paint);
        
        // Bezier 2
        RectF bezier2Rect = CacheForProgbarProgressing.bezier2Rect;
        bezier2Rect.set(0f, 0f, 85f, 12f);
        Path bezier2Path = CacheForProgbarProgressing.bezier2Path;
        bezier2Path.reset();
        bezier2Path.moveTo(3f, 0f);
        bezier2Path.lineTo(82f, 0f);
        bezier2Path.lineTo(82f, 0f);
        bezier2Path.cubicTo(83.66f, 0f, 85f, 1.34f, 85f, 3f);
        bezier2Path.lineTo(85f, 9f);
        bezier2Path.lineTo(85f, 9f);
        bezier2Path.cubicTo(85f, 10.66f, 83.66f, 12f, 82f, 12f);
        bezier2Path.lineTo(3f, 12f);
        bezier2Path.lineTo(3f, 12f);
        bezier2Path.cubicTo(1.34f, 12f, 0f, 10.66f, 0f, 9f);
        bezier2Path.lineTo(0f, 3f);
        bezier2Path.lineTo(0f, 3f);
        bezier2Path.cubicTo(0f, 1.34f, 1.34f, 0f, 3f, 0f);
        bezier2Path.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezier2Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(StyleKit._79a6f6);
        canvas.drawPath(bezier2Path, paint);
        
        canvas.restore();
    }
    
    private static class CacheForProgbarExecuting {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 170f, 12f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
    }
    
    public static void drawProgbarExecuting(Canvas canvas) {
        StyleKit.drawProgbarExecuting(canvas, new RectF(0f, 0f, 170f, 12f), ResizingBehavior.AspectFit);
    }
    
    public static void drawProgbarExecuting(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForProgbarExecuting.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForProgbarExecuting.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForProgbarExecuting.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 170f, resizedFrame.height() / 12f);
        
        // Bezier
        RectF bezierRect = CacheForProgbarExecuting.bezierRect;
        bezierRect.set(0f, 0f, 170f, 12f);
        Path bezierPath = CacheForProgbarExecuting.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(3f, 0f);
        bezierPath.lineTo(167f, 0f);
        bezierPath.lineTo(167f, 0f);
        bezierPath.cubicTo(168.66f, 0f, 170f, 1.34f, 170f, 3f);
        bezierPath.lineTo(170f, 9f);
        bezierPath.lineTo(170f, 9f);
        bezierPath.cubicTo(170f, 10.66f, 168.66f, 12f, 167f, 12f);
        bezierPath.lineTo(3f, 12f);
        bezierPath.lineTo(3f, 12f);
        bezierPath.cubicTo(1.34f, 12f, 0f, 10.66f, 0f, 9f);
        bezierPath.lineTo(0f, 3f);
        bezierPath.lineTo(0f, 3f);
        bezierPath.cubicTo(0f, 1.34f, 1.34f, 0f, 3f, 0f);
        bezierPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(StyleKit.dAE4E9);
        canvas.drawPath(bezierPath, paint);
        
        // Bezier 2
        RectF bezier2Rect = CacheForProgbarExecuting.bezier2Rect;
        bezier2Rect.set(0f, 0f, 127.5f, 12f);
        Path bezier2Path = CacheForProgbarExecuting.bezier2Path;
        bezier2Path.reset();
        bezier2Path.moveTo(3f, 0f);
        bezier2Path.lineTo(124.5f, 0f);
        bezier2Path.lineTo(124.5f, 0f);
        bezier2Path.cubicTo(126.16f, 0f, 127.5f, 1.34f, 127.5f, 3f);
        bezier2Path.lineTo(127.5f, 9f);
        bezier2Path.lineTo(127.5f, 9f);
        bezier2Path.cubicTo(127.5f, 10.66f, 126.16f, 12f, 124.5f, 12f);
        bezier2Path.lineTo(3f, 12f);
        bezier2Path.lineTo(3f, 12f);
        bezier2Path.cubicTo(1.34f, 12f, 0f, 10.66f, 0f, 9f);
        bezier2Path.lineTo(0f, 3f);
        bezier2Path.lineTo(0f, 3f);
        bezier2Path.cubicTo(0f, 1.34f, 1.34f, 0f, 3f, 0f);
        bezier2Path.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezier2Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(StyleKit.ae97f4);
        canvas.drawPath(bezier2Path, paint);
        
        canvas.restore();
    }
    
    private static class CacheForProgbarClosed {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 170f, 12f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    public static void drawProgbarClosed(Canvas canvas) {
        StyleKit.drawProgbarClosed(canvas, new RectF(0f, 0f, 170f, 12f), ResizingBehavior.AspectFit);
    }
    
    public static void drawProgbarClosed(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForProgbarClosed.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForProgbarClosed.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForProgbarClosed.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 170f, resizedFrame.height() / 12f);
        
        // Bezier
        RectF bezierRect = CacheForProgbarClosed.bezierRect;
        bezierRect.set(0f, 0f, 170f, 12f);
        Path bezierPath = CacheForProgbarClosed.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(3f, 0f);
        bezierPath.lineTo(167f, 0f);
        bezierPath.lineTo(167f, 0f);
        bezierPath.cubicTo(168.66f, 0f, 170f, 1.34f, 170f, 3f);
        bezierPath.lineTo(170f, 9f);
        bezierPath.lineTo(170f, 9f);
        bezierPath.cubicTo(170f, 10.66f, 168.66f, 12f, 167f, 12f);
        bezierPath.lineTo(3f, 12f);
        bezierPath.lineTo(3f, 12f);
        bezierPath.cubicTo(1.34f, 12f, 0f, 10.66f, 0f, 9f);
        bezierPath.lineTo(0f, 3f);
        bezierPath.lineTo(0f, 3f);
        bezierPath.cubicTo(0f, 1.34f, 1.34f, 0f, 3f, 0f);
        bezierPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(StyleKit._473793);
        canvas.drawPath(bezierPath, paint);
        
        canvas.restore();
    }
    
    private static class CacheForExpandRelationshipBut {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 50f, 50f);
        private static RectF resizedFrame = new RectF();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
    }
    
    public static void drawExpandRelationshipBut(Canvas canvas) {
        StyleKit.drawExpandRelationshipBut(canvas, new RectF(0f, 0f, 50f, 50f), ResizingBehavior.AspectFit);
    }
    
    public static void drawExpandRelationshipBut(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForExpandRelationshipBut.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForExpandRelationshipBut.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForExpandRelationshipBut.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 50f, resizedFrame.height() / 50f);
        
        // Group
        {
            // Oval
            RectF ovalRect = CacheForExpandRelationshipBut.ovalRect;
            ovalRect.set(2f, 2f, 48f, 48f);
            Path ovalPath = CacheForExpandRelationshipBut.ovalPath;
            ovalPath.reset();
            ovalPath.addOval(ovalRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(3f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit.ae97f4);
            canvas.drawPath(ovalPath, paint);
            canvas.restore();
            
            // Bezier
            RectF bezierRect = CacheForExpandRelationshipBut.bezierRect;
            bezierRect.set(12.15f, 24.74f, 37.54f, 24.74f);
            Path bezierPath = CacheForExpandRelationshipBut.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(12.15f, 24.74f);
            bezierPath.lineTo(37.54f, 24.74f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(3f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit.ae97f4);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForExpandRelationshipBut.bezier2Rect;
            bezier2Rect.set(24.74f, 12.16f, 24.74f, 37.57f);
            Path bezier2Path = CacheForExpandRelationshipBut.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(24.74f, 12.16f);
            bezier2Path.lineTo(24.74f, 37.57f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(3f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit.ae97f4);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForExpandRelationshipBut2 {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 50f, 50f);
        private static RectF resizedFrame = new RectF();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
    }
    
    public static void drawExpandRelationshipBut2(Canvas canvas) {
        StyleKit.drawExpandRelationshipBut2(canvas, new RectF(0f, 0f, 50f, 50f), ResizingBehavior.AspectFit);
    }
    
    public static void drawExpandRelationshipBut2(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForExpandRelationshipBut2.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForExpandRelationshipBut2.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForExpandRelationshipBut2.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 50f, resizedFrame.height() / 50f);
        
        // Group 2
        {
            // Oval
            RectF ovalRect = CacheForExpandRelationshipBut2.ovalRect;
            ovalRect.set(2f, 2f, 48f, 48f);
            Path ovalPath = CacheForExpandRelationshipBut2.ovalPath;
            ovalPath.reset();
            ovalPath.addOval(ovalRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(3f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit._79a6f6);
            canvas.drawPath(ovalPath, paint);
            canvas.restore();
            
            // Group
            {
                // Bezier
                RectF bezierRect = CacheForExpandRelationshipBut2.bezierRect;
                bezierRect.set(12.15f, 24.74f, 37.54f, 24.74f);
                Path bezierPath = CacheForExpandRelationshipBut2.bezierPath;
                bezierPath.reset();
                bezierPath.moveTo(12.15f, 24.74f);
                bezierPath.lineTo(37.54f, 24.74f);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(3f);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(StyleKit._79a6f6);
                canvas.drawPath(bezierPath, paint);
                canvas.restore();
                
                // Bezier 2
                RectF bezier2Rect = CacheForExpandRelationshipBut2.bezier2Rect;
                bezier2Rect.set(24.74f, 12.16f, 24.74f, 37.57f);
                Path bezier2Path = CacheForExpandRelationshipBut2.bezier2Path;
                bezier2Path.reset();
                bezier2Path.moveTo(24.74f, 12.16f);
                bezier2Path.lineTo(24.74f, 37.57f);
                
                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(3f);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(StyleKit._79a6f6);
                canvas.drawPath(bezier2Path, paint);
                canvas.restore();
            }
        }
        
        canvas.restore();
    }
    
    private static class CacheForExpandRelationshipBut3 {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 50f, 50f);
        private static RectF resizedFrame = new RectF();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
    }
    
    public static void drawExpandRelationshipBut3(Canvas canvas) {
        StyleKit.drawExpandRelationshipBut3(canvas, new RectF(0f, 0f, 50f, 50f), ResizingBehavior.AspectFit);
    }
    
    public static void drawExpandRelationshipBut3(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForExpandRelationshipBut3.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForExpandRelationshipBut3.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForExpandRelationshipBut3.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 50f, resizedFrame.height() / 50f);
        
        // Group
        {
            // Oval
            RectF ovalRect = CacheForExpandRelationshipBut3.ovalRect;
            ovalRect.set(2f, 2f, 48f, 48f);
            Path ovalPath = CacheForExpandRelationshipBut3.ovalPath;
            ovalPath.reset();
            ovalPath.addOval(ovalRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(3f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit._3b6caa);
            canvas.drawPath(ovalPath, paint);
            canvas.restore();
            
            // Bezier
            RectF bezierRect = CacheForExpandRelationshipBut3.bezierRect;
            bezierRect.set(12.15f, 24.74f, 37.54f, 24.74f);
            Path bezierPath = CacheForExpandRelationshipBut3.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(12.15f, 24.74f);
            bezierPath.lineTo(37.54f, 24.74f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(3f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit._3b6caa);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForExpandRelationshipBut3.bezier2Rect;
            bezier2Rect.set(24.74f, 12.16f, 24.74f, 37.57f);
            Path bezier2Path = CacheForExpandRelationshipBut3.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(24.74f, 12.16f);
            bezier2Path.lineTo(24.74f, 37.57f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(3f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit._3b6caa);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForExpandRelationshipBut4 {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 50f, 50f);
        private static RectF resizedFrame = new RectF();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
    }
    
    public static void drawExpandRelationshipBut4(Canvas canvas) {
        StyleKit.drawExpandRelationshipBut4(canvas, new RectF(0f, 0f, 50f, 50f), ResizingBehavior.AspectFit);
    }
    
    public static void drawExpandRelationshipBut4(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForExpandRelationshipBut4.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForExpandRelationshipBut4.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForExpandRelationshipBut4.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 50f, resizedFrame.height() / 50f);
        
        // Group
        {
            // Oval
            RectF ovalRect = CacheForExpandRelationshipBut4.ovalRect;
            ovalRect.set(2f, 2f, 48f, 48f);
            Path ovalPath = CacheForExpandRelationshipBut4.ovalPath;
            ovalPath.reset();
            ovalPath.addOval(ovalRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(3f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit._473793);
            canvas.drawPath(ovalPath, paint);
            canvas.restore();
            
            // Bezier
            RectF bezierRect = CacheForExpandRelationshipBut4.bezierRect;
            bezierRect.set(12.15f, 24.74f, 37.54f, 24.74f);
            Path bezierPath = CacheForExpandRelationshipBut4.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(12.15f, 24.74f);
            bezierPath.lineTo(37.54f, 24.74f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(3f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit._473793);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForExpandRelationshipBut4.bezier2Rect;
            bezier2Rect.set(24.74f, 12.16f, 24.74f, 37.57f);
            Path bezier2Path = CacheForExpandRelationshipBut4.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(24.74f, 12.16f);
            bezier2Path.lineTo(24.74f, 37.57f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(3f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit._473793);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForTabRelationship {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 20f, 223f);
        private static RectF resizedFrame = new RectF();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
    }
    
    public static void drawTabRelationship(Canvas canvas) {
        StyleKit.drawTabRelationship(canvas, new RectF(0f, 0f, 20f, 223f), ResizingBehavior.AspectFit);
    }
    
    public static void drawTabRelationship(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForTabRelationship.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForTabRelationship.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForTabRelationship.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 20f, resizedFrame.height() / 223f);
        
        // Rectangle
        RectF rectangleRect = CacheForTabRelationship.rectangleRect;
        rectangleRect.set(0f, 0f, 20f, 223f);
        Path rectanglePath = CacheForTabRelationship.rectanglePath;
        rectanglePath.reset();
        rectanglePath.addRect(rectangleRect, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(StyleKit.ae97f4);
        canvas.drawPath(rectanglePath, paint);
        
        canvas.restore();
    }
    
    private static class CacheForTabRelationship2 {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 20f, 223f);
        private static RectF resizedFrame = new RectF();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
    }
    
    public static void drawTabRelationship2(Canvas canvas) {
        StyleKit.drawTabRelationship2(canvas, new RectF(0f, 0f, 20f, 223f), ResizingBehavior.AspectFit);
    }
    
    public static void drawTabRelationship2(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForTabRelationship2.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForTabRelationship2.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForTabRelationship2.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 20f, resizedFrame.height() / 223f);
        
        // Rectangle
        RectF rectangleRect = CacheForTabRelationship2.rectangleRect;
        rectangleRect.set(0f, 0f, 20f, 223f);
        Path rectanglePath = CacheForTabRelationship2.rectanglePath;
        rectanglePath.reset();
        rectanglePath.addRect(rectangleRect, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(StyleKit._79a6f6);
        canvas.drawPath(rectanglePath, paint);
        
        canvas.restore();
    }
    
    private static class CacheForTabRelationship3 {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 20f, 223f);
        private static RectF resizedFrame = new RectF();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
    }
    
    public static void drawTabRelationship3(Canvas canvas) {
        StyleKit.drawTabRelationship3(canvas, new RectF(0f, 0f, 20f, 223f), ResizingBehavior.AspectFit);
    }
    
    public static void drawTabRelationship3(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForTabRelationship3.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForTabRelationship3.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForTabRelationship3.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 20f, resizedFrame.height() / 223f);
        
        // Rectangle
        RectF rectangleRect = CacheForTabRelationship3.rectangleRect;
        rectangleRect.set(0f, 0f, 20f, 223f);
        Path rectanglePath = CacheForTabRelationship3.rectanglePath;
        rectanglePath.reset();
        rectanglePath.addRect(rectangleRect, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(StyleKit._3b6caa);
        canvas.drawPath(rectanglePath, paint);
        
        canvas.restore();
    }
    
    private static class CacheForTabRelationship4 {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 20f, 223f);
        private static RectF resizedFrame = new RectF();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
    }
    
    public static void drawTabRelationship4(Canvas canvas) {
        StyleKit.drawTabRelationship4(canvas, new RectF(0f, 0f, 20f, 223f), ResizingBehavior.AspectFit);
    }
    
    public static void drawTabRelationship4(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForTabRelationship4.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForTabRelationship4.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForTabRelationship4.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 20f, resizedFrame.height() / 223f);
        
        // Rectangle
        RectF rectangleRect = CacheForTabRelationship4.rectangleRect;
        rectangleRect.set(0f, 0f, 20f, 223f);
        Path rectanglePath = CacheForTabRelationship4.rectanglePath;
        rectanglePath.reset();
        rectanglePath.addRect(rectangleRect, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(StyleKit._473793);
        canvas.drawPath(rectanglePath, paint);
        
        canvas.restore();
    }
    
    private static class CacheForMoreButton {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 50f, 50f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
    }
    
    public static void drawMoreButton(Canvas canvas) {
        StyleKit.drawMoreButton(canvas, new RectF(0f, 0f, 50f, 50f), ResizingBehavior.AspectFit);
    }
    
    public static void drawMoreButton(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForMoreButton.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForMoreButton.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForMoreButton.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 50f, resizedFrame.height() / 50f);
        
        // Bezier
        RectF bezierRect = CacheForMoreButton.bezierRect;
        bezierRect.set(11f, 25f, 39f, 25f);
        Path bezierPath = CacheForMoreButton.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(11f, 25f);
        bezierPath.lineTo(39f, 25f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(3f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(StyleKit.fFFFFF);
        canvas.drawPath(bezierPath, paint);
        canvas.restore();
        
        // Oval
        RectF ovalRect = CacheForMoreButton.ovalRect;
        ovalRect.set(2f, 2f, 48f, 48f);
        Path ovalPath = CacheForMoreButton.ovalPath;
        ovalPath.reset();
        ovalPath.addOval(ovalRect, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(3f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(StyleKit.fFFFFF);
        canvas.drawPath(ovalPath, paint);
        canvas.restore();
        
        // Bezier 2
        RectF bezier2Rect = CacheForMoreButton.bezier2Rect;
        bezier2Rect.set(28f, 14f, 39f, 35f);
        Path bezier2Path = CacheForMoreButton.bezier2Path;
        bezier2Path.reset();
        bezier2Path.moveTo(28f, 14f);
        bezier2Path.lineTo(39f, 24.5f);
        bezier2Path.lineTo(28f, 35f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(3f);
        paint.setStrokeCap(Paint.Cap.SQUARE);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(StyleKit.fFFFFF);
        canvas.drawPath(bezier2Path, paint);
        canvas.restore();
        
        canvas.restore();
    }
    
    private static class CacheForTabRelationship5 {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 20f, 223f);
        private static RectF resizedFrame = new RectF();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
    }
    
    public static void drawTabRelationship5(Canvas canvas) {
        StyleKit.drawTabRelationship5(canvas, new RectF(0f, 0f, 20f, 223f), ResizingBehavior.AspectFit);
    }
    
    public static void drawTabRelationship5(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForTabRelationship5.paint;
        
        // Local Colors
        int c0D0D6IconColor = Color.argb(255, 192, 208, 214);
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForTabRelationship5.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForTabRelationship5.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 20f, resizedFrame.height() / 223f);
        
        // Rectangle
        RectF rectangleRect = CacheForTabRelationship5.rectangleRect;
        rectangleRect.set(0f, 0f, 20f, 223f);
        Path rectanglePath = CacheForTabRelationship5.rectanglePath;
        rectanglePath.reset();
        rectanglePath.addRect(rectangleRect, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(c0D0D6IconColor);
        canvas.drawPath(rectanglePath, paint);
        
        canvas.restore();
    }
    
    private static class CacheForExpandRelationshipBut5 {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 50f, 50f);
        private static RectF resizedFrame = new RectF();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
    }
    
    public static void drawExpandRelationshipBut5(Canvas canvas) {
        StyleKit.drawExpandRelationshipBut5(canvas, new RectF(0f, 0f, 50f, 50f), ResizingBehavior.AspectFit);
    }
    
    public static void drawExpandRelationshipBut5(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForExpandRelationshipBut5.paint;
        
        // Local Colors
        int c0D0D6IconColor = Color.argb(255, 192, 208, 214);
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForExpandRelationshipBut5.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForExpandRelationshipBut5.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 50f, resizedFrame.height() / 50f);
        
        // Group
        {
            // Oval
            RectF ovalRect = CacheForExpandRelationshipBut5.ovalRect;
            ovalRect.set(2f, 2f, 48f, 48f);
            Path ovalPath = CacheForExpandRelationshipBut5.ovalPath;
            ovalPath.reset();
            ovalPath.addOval(ovalRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(3f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(c0D0D6IconColor);
            canvas.drawPath(ovalPath, paint);
            canvas.restore();
            
            // Bezier
            RectF bezierRect = CacheForExpandRelationshipBut5.bezierRect;
            bezierRect.set(12.15f, 24.74f, 37.54f, 24.74f);
            Path bezierPath = CacheForExpandRelationshipBut5.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(12.15f, 24.74f);
            bezierPath.lineTo(37.54f, 24.74f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(3f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(c0D0D6IconColor);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForExpandRelationshipBut5.bezier2Rect;
            bezier2Rect.set(24.74f, 12.16f, 24.74f, 37.57f);
            Path bezier2Path = CacheForExpandRelationshipBut5.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(24.74f, 12.16f);
            bezier2Path.lineTo(24.74f, 37.57f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(3f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(c0D0D6IconColor);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForCollapseRelationshipBut6 {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 50f, 50f);
        private static RectF resizedFrame = new RectF();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    public static void drawCollapseRelationshipBut6(Canvas canvas) {
        StyleKit.drawCollapseRelationshipBut6(canvas, new RectF(0f, 0f, 50f, 50f), ResizingBehavior.AspectFit);
    }
    
    public static void drawCollapseRelationshipBut6(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForCollapseRelationshipBut6.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForCollapseRelationshipBut6.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForCollapseRelationshipBut6.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 50f, resizedFrame.height() / 50f);
        
        // Group
        {
            // Oval
            RectF ovalRect = CacheForCollapseRelationshipBut6.ovalRect;
            ovalRect.set(2f, 2f, 48f, 48f);
            Path ovalPath = CacheForCollapseRelationshipBut6.ovalPath;
            ovalPath.reset();
            ovalPath.addOval(ovalRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(3f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit.ae97f4);
            canvas.drawPath(ovalPath, paint);
            canvas.restore();
            
            // Bezier
            RectF bezierRect = CacheForCollapseRelationshipBut6.bezierRect;
            bezierRect.set(12.15f, 24.74f, 37.54f, 24.74f);
            Path bezierPath = CacheForCollapseRelationshipBut6.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(12.15f, 24.74f);
            bezierPath.lineTo(37.54f, 24.74f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(3f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit.ae97f4);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForCollapseRelationshipBut7 {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 50f, 50f);
        private static RectF resizedFrame = new RectF();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    public static void drawCollapseRelationshipBut7(Canvas canvas) {
        StyleKit.drawCollapseRelationshipBut7(canvas, new RectF(0f, 0f, 50f, 50f), ResizingBehavior.AspectFit);
    }
    
    public static void drawCollapseRelationshipBut7(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForCollapseRelationshipBut7.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForCollapseRelationshipBut7.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForCollapseRelationshipBut7.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 50f, resizedFrame.height() / 50f);
        
        // Group
        {
            // Oval
            RectF ovalRect = CacheForCollapseRelationshipBut7.ovalRect;
            ovalRect.set(2f, 2f, 48f, 48f);
            Path ovalPath = CacheForCollapseRelationshipBut7.ovalPath;
            ovalPath.reset();
            ovalPath.addOval(ovalRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(3f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit._79a6f6);
            canvas.drawPath(ovalPath, paint);
            canvas.restore();
            
            // Bezier
            RectF bezierRect = CacheForCollapseRelationshipBut7.bezierRect;
            bezierRect.set(12.15f, 24.74f, 37.54f, 24.74f);
            Path bezierPath = CacheForCollapseRelationshipBut7.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(12.15f, 24.74f);
            bezierPath.lineTo(37.54f, 24.74f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(3f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit._79a6f6);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForCollapseRelationshipBut8 {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 50f, 50f);
        private static RectF resizedFrame = new RectF();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    public static void drawCollapseRelationshipBut8(Canvas canvas) {
        StyleKit.drawCollapseRelationshipBut8(canvas, new RectF(0f, 0f, 50f, 50f), ResizingBehavior.AspectFit);
    }
    
    public static void drawCollapseRelationshipBut8(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForCollapseRelationshipBut8.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForCollapseRelationshipBut8.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForCollapseRelationshipBut8.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 50f, resizedFrame.height() / 50f);
        
        // Group
        {
            // Oval
            RectF ovalRect = CacheForCollapseRelationshipBut8.ovalRect;
            ovalRect.set(2f, 2f, 48f, 48f);
            Path ovalPath = CacheForCollapseRelationshipBut8.ovalPath;
            ovalPath.reset();
            ovalPath.addOval(ovalRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(3f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit._3b6caa);
            canvas.drawPath(ovalPath, paint);
            canvas.restore();
            
            // Bezier
            RectF bezierRect = CacheForCollapseRelationshipBut8.bezierRect;
            bezierRect.set(12.15f, 24.74f, 37.54f, 24.74f);
            Path bezierPath = CacheForCollapseRelationshipBut8.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(12.15f, 24.74f);
            bezierPath.lineTo(37.54f, 24.74f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(3f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit._3b6caa);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForCollapseRelationshipBut9 {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 50f, 50f);
        private static RectF resizedFrame = new RectF();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    public static void drawCollapseRelationshipBut9(Canvas canvas) {
        StyleKit.drawCollapseRelationshipBut9(canvas, new RectF(0f, 0f, 50f, 50f), ResizingBehavior.AspectFit);
    }
    
    public static void drawCollapseRelationshipBut9(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForCollapseRelationshipBut9.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForCollapseRelationshipBut9.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForCollapseRelationshipBut9.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 50f, resizedFrame.height() / 50f);
        
        // Group
        {
            // Oval
            RectF ovalRect = CacheForCollapseRelationshipBut9.ovalRect;
            ovalRect.set(2f, 2f, 48f, 48f);
            Path ovalPath = CacheForCollapseRelationshipBut9.ovalPath;
            ovalPath.reset();
            ovalPath.addOval(ovalRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(3f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit._473793);
            canvas.drawPath(ovalPath, paint);
            canvas.restore();
            
            // Bezier
            RectF bezierRect = CacheForCollapseRelationshipBut9.bezierRect;
            bezierRect.set(12.15f, 24.74f, 37.54f, 24.74f);
            Path bezierPath = CacheForCollapseRelationshipBut9.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(12.15f, 24.74f);
            bezierPath.lineTo(37.54f, 24.74f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(3f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(StyleKit._473793);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForSwitch_left {
        private static Paint paint = new Paint();
        private static Paint shadowPaint = new Paint();
        private static PaintCodeShadow shadow2 = new PaintCodeShadow();
        private static PaintCodeShadow shadow = new PaintCodeShadow();
        private static RectF originalFrame = new RectF(0f, 0f, 91f, 61f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF oval2Rect = new RectF();
        private static Path oval2Path = new Path();
    }
    
    public static void drawSwitch_left(Canvas canvas) {
        StyleKit.drawSwitch_left(canvas, new RectF(0f, 0f, 91f, 61f), ResizingBehavior.AspectFit);
    }
    
    public static void drawSwitch_left(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForSwitch_left.paint;
        
        // Local Shadows
        PaintCodeShadow shadow2 = CacheForSwitch_left.shadow2.get(PaintCodeColor.colorByChangingAlpha(StyleKit._000000, (int) (Color.alpha(StyleKit._000000) * 0.16f * 255f)), 98f, 2f, 2f);
        PaintCodeShadow shadow = CacheForSwitch_left.shadow.get(PaintCodeColor.colorByChangingAlpha(StyleKit._000000, (int) (Color.alpha(StyleKit._000000) * 0.1f * 255f)), 98f, 5f, 2f);
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForSwitch_left.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForSwitch_left.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 91f, resizedFrame.height() / 61f);
        
        // Bezier
        RectF bezierRect = CacheForSwitch_left.bezierRect;
        bezierRect.set(6f, 7f, 84.97f, 55f);
        Path bezierPath = CacheForSwitch_left.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(30.55f, 7.14f);
        bezierPath.cubicTo(33.25f, 6.99f, 35.94f, 7f, 38.63f, 7f);
        bezierPath.lineTo(52.28f, 7f);
        bezierPath.cubicTo(55.03f, 7f, 57.72f, 6.99f, 60.41f, 7.14f);
        bezierPath.cubicTo(62.86f, 7.28f, 65.25f, 7.58f, 67.62f, 8.24f);
        bezierPath.cubicTo(72.62f, 9.64f, 76.98f, 12.56f, 80.14f, 16.69f);
        bezierPath.cubicTo(83.27f, 20.8f, 84.97f, 25.83f, 84.97f, 31f);
        bezierPath.cubicTo(84.97f, 36.17f, 83.27f, 41.2f, 80.14f, 45.31f);
        bezierPath.cubicTo(76.98f, 49.44f, 72.62f, 52.36f, 67.62f, 53.76f);
        bezierPath.cubicTo(65.25f, 54.42f, 62.86f, 54.72f, 60.41f, 54.86f);
        bezierPath.cubicTo(57.72f, 55.01f, 55.03f, 55f, 52.34f, 55f);
        bezierPath.cubicTo(52.32f, 55f, 38.68f, 55f, 38.68f, 55f);
        bezierPath.cubicTo(35.94f, 55f, 33.25f, 55.01f, 30.55f, 54.86f);
        bezierPath.cubicTo(28.11f, 54.72f, 25.72f, 54.42f, 23.35f, 53.76f);
        bezierPath.cubicTo(18.35f, 52.36f, 13.99f, 49.44f, 10.83f, 45.31f);
        bezierPath.cubicTo(7.7f, 41.2f, 6f, 36.17f, 6f, 31f);
        bezierPath.cubicTo(6f, 25.83f, 7.7f, 20.8f, 10.83f, 16.69f);
        bezierPath.cubicTo(13.99f, 12.56f, 18.35f, 9.64f, 23.35f, 8.24f);
        bezierPath.cubicTo(25.72f, 7.58f, 28.11f, 7.28f, 30.55f, 7.14f);
        bezierPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(StyleKit._78BAC950);
        canvas.drawPath(bezierPath, paint);
        
        // Bezier 2
        RectF bezier2Rect = CacheForSwitch_left.bezier2Rect;
        bezier2Rect.set(-92.58f, 8.55f, -47.68f, 53.45f);
        Path bezier2Path = CacheForSwitch_left.bezier2Path;
        bezier2Path.reset();
        bezier2Path.moveTo(-92.58f, 31f);
        bezier2Path.cubicTo(-92.58f, 24.8f, -90.07f, 19.19f, -86f, 15.12f);
        bezier2Path.cubicTo(-81.94f, 11.06f, -76.33f, 8.55f, -70.13f, 8.55f);
        bezier2Path.cubicTo(-63.93f, 8.55f, -58.32f, 11.06f, -54.25f, 15.12f);
        bezier2Path.cubicTo(-50.19f, 19.19f, -47.68f, 24.8f, -47.68f, 31f);
        bezier2Path.cubicTo(-47.68f, 37.2f, -50.19f, 42.81f, -54.25f, 46.88f);
        bezier2Path.cubicTo(-58.32f, 50.94f, -63.93f, 53.45f, -70.13f, 53.45f);
        bezier2Path.cubicTo(-76.33f, 53.45f, -81.94f, 50.94f, -86f, 46.88f);
        bezier2Path.cubicTo(-90.07f, 42.81f, -92.58f, 37.2f, -92.58f, 31f);
        bezier2Path.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezier2Path.setFillType(Path.FillType.EVEN_ODD);
        canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
        {
            canvas.translate(shadow.dx, shadow.dy);
            
            Paint shadowPaint = CacheForSwitch_left.shadowPaint;
            shadowPaint.set(paint);
            shadow.setBlurOfPaint(shadowPaint);
            canvas.drawPath(bezier2Path, shadowPaint);
            shadowPaint.setXfermode(GlobalCache.blendModeSourceIn);
            canvas.saveLayer(null, shadowPaint, Canvas.ALL_SAVE_FLAG);
            {
                canvas.drawColor(shadow.color);
            }
            canvas.restore();
        }
        canvas.restore();
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(StyleKit.fFFFFF);
        canvas.drawPath(bezier2Path, paint);
        
        // Bezier 3
        RectF bezier3Rect = CacheForSwitch_left.bezier3Rect;
        bezier3Rect.set(-92.58f, 8.55f, -47.68f, 53.45f);
        Path bezier3Path = CacheForSwitch_left.bezier3Path;
        bezier3Path.reset();
        bezier3Path.moveTo(-92.58f, 31f);
        bezier3Path.cubicTo(-92.58f, 24.8f, -90.07f, 19.19f, -86f, 15.12f);
        bezier3Path.cubicTo(-81.94f, 11.06f, -76.33f, 8.55f, -70.13f, 8.55f);
        bezier3Path.cubicTo(-63.93f, 8.55f, -58.32f, 11.06f, -54.25f, 15.12f);
        bezier3Path.cubicTo(-50.19f, 19.19f, -47.68f, 24.8f, -47.68f, 31f);
        bezier3Path.cubicTo(-47.68f, 37.2f, -50.19f, 42.81f, -54.25f, 46.88f);
        bezier3Path.cubicTo(-58.32f, 50.94f, -63.93f, 53.45f, -70.13f, 53.45f);
        bezier3Path.cubicTo(-76.33f, 53.45f, -81.94f, 50.94f, -86f, 46.88f);
        bezier3Path.cubicTo(-90.07f, 42.81f, -92.58f, 37.2f, -92.58f, 31f);
        bezier3Path.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezier3Path.setFillType(Path.FillType.EVEN_ODD);
        canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
        {
            canvas.translate(shadow2.dx, shadow2.dy);
            
            Paint shadowPaint = CacheForSwitch_left.shadowPaint;
            shadowPaint.set(paint);
            shadow2.setBlurOfPaint(shadowPaint);
            canvas.drawPath(bezier3Path, shadowPaint);
            shadowPaint.setXfermode(GlobalCache.blendModeSourceIn);
            canvas.saveLayer(null, shadowPaint, Canvas.ALL_SAVE_FLAG);
            {
                canvas.drawColor(shadow2.color);
            }
            canvas.restore();
        }
        canvas.restore();
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(StyleKit.fFFFFF);
        canvas.drawPath(bezier3Path, paint);
        
        // Oval
        RectF ovalRect = CacheForSwitch_left.ovalRect;
        ovalRect.set(6f, 9.3f, 49.4f, 52.7f);
        Path ovalPath = CacheForSwitch_left.ovalPath;
        ovalPath.reset();
        ovalPath.addOval(ovalRect, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(StyleKit.fFFFFF);
        canvas.drawPath(ovalPath, paint);
        
        // Oval 2
        RectF oval2Rect = CacheForSwitch_left.oval2Rect;
        oval2Rect.set(6f, 9.3f, 49.4f, 52.7f);
        Path oval2Path = CacheForSwitch_left.oval2Path;
        oval2Path.reset();
        oval2Path.addOval(oval2Rect, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1.55f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(Color.TRANSPARENT);
        canvas.drawPath(oval2Path, paint);
        canvas.restore();
        
        canvas.restore();
    }
    
    private static class CacheForSwitch_right {
        private static Paint paint = new Paint();
        private static Paint shadowPaint = new Paint();
        private static PaintCodeShadow shadow2 = new PaintCodeShadow();
        private static PaintCodeShadow shadow3 = new PaintCodeShadow();
        private static PaintCodeShadow shadow = new PaintCodeShadow();
        private static RectF originalFrame = new RectF(0f, 0f, 91f, 61f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF clip2Rect = new RectF();
        private static RectF bezier4Rect = new RectF();
        private static Path bezier4Path = new Path();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF oval2Rect = new RectF();
        private static Path oval2Path = new Path();
    }
    
    public static void drawSwitch_right(Canvas canvas) {
        StyleKit.drawSwitch_right(canvas, new RectF(0f, 0f, 91f, 61f), ResizingBehavior.AspectFit);
    }
    
    public static void drawSwitch_right(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForSwitch_right.paint;
        
        // Local Shadows
        PaintCodeShadow shadow2 = CacheForSwitch_right.shadow2.get(PaintCodeColor.colorByChangingAlpha(StyleKit._000000, (int) (Color.alpha(StyleKit._000000) * 0.16f * 255f)), 98f, 2f, 2f);
        PaintCodeShadow shadow3 = CacheForSwitch_right.shadow3.get(PaintCodeColor.colorByChangingAlpha(StyleKit._000000, (int) (Color.alpha(StyleKit._000000) * 0.15f * 255f)), 138f, 5f, 12f);
        PaintCodeShadow shadow = CacheForSwitch_right.shadow.get(PaintCodeColor.colorByChangingAlpha(StyleKit._000000, (int) (Color.alpha(StyleKit._000000) * 0.1f * 255f)), 98f, 5f, 2f);
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForSwitch_right.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForSwitch_right.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 91f, resizedFrame.height() / 61f);
        
        // Bezier
        RectF bezierRect = CacheForSwitch_right.bezierRect;
        bezierRect.set(6f, 7f, 84.97f, 55f);
        Path bezierPath = CacheForSwitch_right.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(30.55f, 7.14f);
        bezierPath.cubicTo(33.25f, 6.99f, 35.94f, 7f, 38.63f, 7f);
        bezierPath.lineTo(52.28f, 7f);
        bezierPath.cubicTo(55.03f, 7f, 57.72f, 6.99f, 60.41f, 7.14f);
        bezierPath.cubicTo(62.86f, 7.28f, 65.25f, 7.58f, 67.62f, 8.24f);
        bezierPath.cubicTo(72.62f, 9.64f, 76.98f, 12.56f, 80.14f, 16.69f);
        bezierPath.cubicTo(83.27f, 20.8f, 84.97f, 25.83f, 84.97f, 31f);
        bezierPath.cubicTo(84.97f, 36.17f, 83.27f, 41.2f, 80.14f, 45.31f);
        bezierPath.cubicTo(76.98f, 49.44f, 72.62f, 52.36f, 67.62f, 53.76f);
        bezierPath.cubicTo(65.25f, 54.42f, 62.86f, 54.72f, 60.41f, 54.86f);
        bezierPath.cubicTo(57.72f, 55.01f, 55.03f, 55f, 52.34f, 55f);
        bezierPath.cubicTo(52.32f, 55f, 38.68f, 55f, 38.68f, 55f);
        bezierPath.cubicTo(35.94f, 55f, 33.25f, 55.01f, 30.55f, 54.86f);
        bezierPath.cubicTo(28.11f, 54.72f, 25.72f, 54.42f, 23.35f, 53.76f);
        bezierPath.cubicTo(18.35f, 52.36f, 13.99f, 49.44f, 10.83f, 45.31f);
        bezierPath.cubicTo(7.7f, 41.2f, 6f, 36.17f, 6f, 31f);
        bezierPath.cubicTo(6f, 25.83f, 7.7f, 20.8f, 10.83f, 16.69f);
        bezierPath.cubicTo(13.99f, 12.56f, 18.35f, 9.64f, 23.35f, 8.24f);
        bezierPath.cubicTo(25.72f, 7.58f, 28.11f, 7.28f, 30.55f, 7.14f);
        bezierPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(StyleKit._78BAC950);
        canvas.drawPath(bezierPath, paint);
        
        // Bezier 2
        RectF bezier2Rect = CacheForSwitch_right.bezier2Rect;
        bezier2Rect.set(-57.58f, 8.23f, -12.68f, 53.13f);
        Path bezier2Path = CacheForSwitch_right.bezier2Path;
        bezier2Path.reset();
        bezier2Path.moveTo(-57.58f, 30.68f);
        bezier2Path.cubicTo(-57.58f, 24.48f, -55.07f, 18.86f, -51f, 14.8f);
        bezier2Path.cubicTo(-46.94f, 10.74f, -41.33f, 8.23f, -35.13f, 8.23f);
        bezier2Path.cubicTo(-28.93f, 8.23f, -23.32f, 10.74f, -19.25f, 14.8f);
        bezier2Path.cubicTo(-15.19f, 18.86f, -12.68f, 24.48f, -12.68f, 30.68f);
        bezier2Path.cubicTo(-12.68f, 36.88f, -15.19f, 42.49f, -19.25f, 46.55f);
        bezier2Path.cubicTo(-23.32f, 50.62f, -28.93f, 53.13f, -35.13f, 53.13f);
        bezier2Path.cubicTo(-41.33f, 53.13f, -46.94f, 50.62f, -51f, 46.55f);
        bezier2Path.cubicTo(-55.07f, 42.49f, -57.58f, 36.88f, -57.58f, 30.68f);
        bezier2Path.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezier2Path.setFillType(Path.FillType.EVEN_ODD);
        canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
        {
            canvas.translate(shadow.dx, shadow.dy);
            
            Paint shadowPaint = CacheForSwitch_right.shadowPaint;
            shadowPaint.set(paint);
            shadow.setBlurOfPaint(shadowPaint);
            canvas.drawPath(bezier2Path, shadowPaint);
            shadowPaint.setXfermode(GlobalCache.blendModeSourceIn);
            canvas.saveLayer(null, shadowPaint, Canvas.ALL_SAVE_FLAG);
            {
                canvas.drawColor(shadow.color);
            }
            canvas.restore();
        }
        canvas.restore();
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(StyleKit.fFFFFF);
        canvas.drawPath(bezier2Path, paint);
        
        // Bezier 3
        RectF bezier3Rect = CacheForSwitch_right.bezier3Rect;
        bezier3Rect.set(-57.58f, 8.23f, -12.68f, 53.13f);
        Path bezier3Path = CacheForSwitch_right.bezier3Path;
        bezier3Path.reset();
        bezier3Path.moveTo(-57.58f, 30.68f);
        bezier3Path.cubicTo(-57.58f, 24.48f, -55.07f, 18.86f, -51f, 14.8f);
        bezier3Path.cubicTo(-46.94f, 10.74f, -41.33f, 8.23f, -35.13f, 8.23f);
        bezier3Path.cubicTo(-28.93f, 8.23f, -23.32f, 10.74f, -19.25f, 14.8f);
        bezier3Path.cubicTo(-15.19f, 18.86f, -12.68f, 24.48f, -12.68f, 30.68f);
        bezier3Path.cubicTo(-12.68f, 36.88f, -15.19f, 42.49f, -19.25f, 46.55f);
        bezier3Path.cubicTo(-23.32f, 50.62f, -28.93f, 53.13f, -35.13f, 53.13f);
        bezier3Path.cubicTo(-41.33f, 53.13f, -46.94f, 50.62f, -51f, 46.55f);
        bezier3Path.cubicTo(-55.07f, 42.49f, -57.58f, 36.88f, -57.58f, 30.68f);
        bezier3Path.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezier3Path.setFillType(Path.FillType.EVEN_ODD);
        canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
        {
            canvas.translate(shadow2.dx, shadow2.dy);
            
            Paint shadowPaint = CacheForSwitch_right.shadowPaint;
            shadowPaint.set(paint);
            shadow2.setBlurOfPaint(shadowPaint);
            canvas.drawPath(bezier3Path, shadowPaint);
            shadowPaint.setXfermode(GlobalCache.blendModeSourceIn);
            canvas.saveLayer(null, shadowPaint, Canvas.ALL_SAVE_FLAG);
            {
                canvas.drawColor(shadow2.color);
            }
            canvas.restore();
        }
        canvas.restore();
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(StyleKit.fFFFFF);
        canvas.drawPath(bezier3Path, paint);
        
        // Clip 2
        RectF clip2Rect = CacheForSwitch_right.clip2Rect;
        clip2Rect.set(38.25f, 8.25f, 87.15f, 57.15f);
        
        // Bezier 4
        RectF bezier4Rect = CacheForSwitch_right.bezier4Rect;
        bezier4Rect.set(-97.58f, 8.23f, -52.68f, 53.13f);
        Path bezier4Path = CacheForSwitch_right.bezier4Path;
        bezier4Path.reset();
        bezier4Path.moveTo(-97.58f, 30.68f);
        bezier4Path.cubicTo(-97.58f, 24.48f, -95.07f, 18.86f, -91f, 14.8f);
        bezier4Path.cubicTo(-86.94f, 10.74f, -81.33f, 8.23f, -75.13f, 8.23f);
        bezier4Path.cubicTo(-68.93f, 8.23f, -63.32f, 10.74f, -59.25f, 14.8f);
        bezier4Path.cubicTo(-55.19f, 18.86f, -52.68f, 24.48f, -52.68f, 30.68f);
        bezier4Path.cubicTo(-52.68f, 36.88f, -55.19f, 42.49f, -59.25f, 46.55f);
        bezier4Path.cubicTo(-63.32f, 50.62f, -68.93f, 53.13f, -75.13f, 53.13f);
        bezier4Path.cubicTo(-81.33f, 53.13f, -86.94f, 50.62f, -91f, 46.55f);
        bezier4Path.cubicTo(-95.07f, 42.49f, -97.58f, 36.88f, -97.58f, 30.68f);
        bezier4Path.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezier4Path.setFillType(Path.FillType.EVEN_ODD);
        canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
        {
            canvas.translate(shadow3.dx, shadow3.dy);
            
            Paint shadowPaint = CacheForSwitch_right.shadowPaint;
            shadowPaint.set(paint);
            shadow3.setBlurOfPaint(shadowPaint);
            canvas.drawPath(bezier4Path, shadowPaint);
            shadowPaint.setXfermode(GlobalCache.blendModeSourceIn);
            canvas.saveLayer(null, shadowPaint, Canvas.ALL_SAVE_FLAG);
            {
                canvas.drawColor(shadow3.color);
            }
            canvas.restore();
        }
        canvas.restore();
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(StyleKit.fFFFFF);
        canvas.drawPath(bezier4Path, paint);
        
        // Oval
        RectF ovalRect = CacheForSwitch_right.ovalRect;
        ovalRect.set(41f, 9f, 84.4f, 52.4f);
        Path ovalPath = CacheForSwitch_right.ovalPath;
        ovalPath.reset();
        ovalPath.addOval(ovalRect, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(StyleKit.fFFFFF);
        canvas.drawPath(ovalPath, paint);
        
        // Oval 2
        RectF oval2Rect = CacheForSwitch_right.oval2Rect;
        oval2Rect.set(41f, 9f, 84.4f, 52.4f);
        Path oval2Path = CacheForSwitch_right.oval2Path;
        oval2Path.reset();
        oval2Path.addOval(oval2Rect, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1.55f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(Color.TRANSPARENT);
        canvas.drawPath(oval2Path, paint);
        canvas.restore();
        
        canvas.restore();
    }
    
    private static class CacheForClose_x_white {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 40f, 40f);
        private static RectF resizedFrame = new RectF();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static RectF rectangle2Rect = new RectF();
        private static Path rectangle2Path = new Path();
    }
    
    public static void drawClose_x_white(Canvas canvas) {
        StyleKit.drawClose_x_white(canvas, new RectF(0f, 0f, 40f, 40f), ResizingBehavior.AspectFit);
    }
    
    public static void drawClose_x_white(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint = CacheForClose_x_white.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForClose_x_white.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForClose_x_white.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 40f, resizedFrame.height() / 40f);
        
        // Rectangle
        canvas.save();
        canvas.translate(36.36f, 0f);
        currentTransformation.peek().postTranslate(36.36f, 0f);
        canvas.rotate(45f);
        currentTransformation.peek().postRotate(45f);
        RectF rectangleRect = CacheForClose_x_white.rectangleRect;
        rectangleRect.set(0f, 0f, 5.14f, 51.43f);
        Path rectanglePath = CacheForClose_x_white.rectanglePath;
        rectanglePath.reset();
        rectanglePath.moveTo(rectangleRect.left, rectangleRect.top);
        rectanglePath.lineTo(rectangleRect.right, rectangleRect.top);
        rectanglePath.lineTo(rectangleRect.right, rectangleRect.bottom);
        rectanglePath.lineTo(rectangleRect.left, rectangleRect.bottom);
        rectanglePath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(StyleKit.fFFFFF);
        canvas.drawPath(rectanglePath, paint);
        canvas.restore();
        
        // Rectangle 2
        canvas.save();
        canvas.translate(3.64f, 0f);
        currentTransformation.peek().postTranslate(3.64f, 0f);
        canvas.rotate(45f);
        currentTransformation.peek().postRotate(45f);
        RectF rectangle2Rect = CacheForClose_x_white.rectangle2Rect;
        rectangle2Rect.set(0f, 0f, 51.43f, 5.14f);
        Path rectangle2Path = CacheForClose_x_white.rectangle2Path;
        rectangle2Path.reset();
        rectangle2Path.moveTo(rectangle2Rect.left, rectangle2Rect.top);
        rectangle2Path.lineTo(rectangle2Rect.right, rectangle2Rect.top);
        rectangle2Path.lineTo(rectangle2Rect.right, rectangle2Rect.bottom);
        rectangle2Path.lineTo(rectangle2Rect.left, rectangle2Rect.bottom);
        rectangle2Path.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(StyleKit.fFFFFF);
        canvas.drawPath(rectangle2Path, paint);
        canvas.restore();
        
        canvas.restore();
    }
    
    private static class CacheForClose_x_black {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 40f, 40f);
        private static RectF resizedFrame = new RectF();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static RectF rectangle2Rect = new RectF();
        private static Path rectangle2Path = new Path();
    }
    
    public static void drawClose_x_black(Canvas canvas) {
        StyleKit.drawClose_x_black(canvas, new RectF(0f, 0f, 40f, 40f), ResizingBehavior.AspectFit);
    }
    
    public static void drawClose_x_black(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint = CacheForClose_x_black.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForClose_x_black.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForClose_x_black.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 40f, resizedFrame.height() / 40f);
        
        // Group
        {
            // Rectangle
            canvas.save();
            canvas.translate(36.36f, 0f);
            currentTransformation.peek().postTranslate(36.36f, 0f);
            canvas.rotate(45f);
            currentTransformation.peek().postRotate(45f);
            RectF rectangleRect = CacheForClose_x_black.rectangleRect;
            rectangleRect.set(0f, 0f, 5.14f, 51.43f);
            Path rectanglePath = CacheForClose_x_black.rectanglePath;
            rectanglePath.reset();
            rectanglePath.moveTo(rectangleRect.left, rectangleRect.top);
            rectanglePath.lineTo(rectangleRect.right, rectangleRect.top);
            rectanglePath.lineTo(rectangleRect.right, rectangleRect.bottom);
            rectanglePath.lineTo(rectangleRect.left, rectangleRect.bottom);
            rectanglePath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(StyleKit._000000);
            canvas.drawPath(rectanglePath, paint);
            canvas.restore();
            
            // Rectangle 2
            canvas.save();
            canvas.translate(3.64f, 0f);
            currentTransformation.peek().postTranslate(3.64f, 0f);
            canvas.rotate(45f);
            currentTransformation.peek().postRotate(45f);
            RectF rectangle2Rect = CacheForClose_x_black.rectangle2Rect;
            rectangle2Rect.set(0f, 0f, 51.43f, 5.14f);
            Path rectangle2Path = CacheForClose_x_black.rectangle2Path;
            rectangle2Path.reset();
            rectangle2Path.moveTo(rectangle2Rect.left, rectangle2Rect.top);
            rectangle2Path.lineTo(rectangle2Rect.right, rectangle2Rect.top);
            rectangle2Path.lineTo(rectangle2Rect.right, rectangle2Rect.bottom);
            rectangle2Path.lineTo(rectangle2Rect.left, rectangle2Rect.bottom);
            rectangle2Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(StyleKit._000000);
            canvas.drawPath(rectangle2Path, paint);
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForSliderButton {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 60f, 60f);
        private static RectF resizedFrame = new RectF();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF oval2Rect = new RectF();
        private static Path oval2Path = new Path();
    }
    
    public static void drawSliderButton(Canvas canvas) {
        StyleKit.drawSliderButton(canvas, new RectF(0f, 0f, 60f, 60f), ResizingBehavior.AspectFit);
    }
    
    public static void drawSliderButton(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForSliderButton.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForSliderButton.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForSliderButton.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 60f, resizedFrame.height() / 60f);
        
        // Oval
        RectF ovalRect = CacheForSliderButton.ovalRect;
        ovalRect.set(1f, 1f, 59f, 59f);
        Path ovalPath = CacheForSliderButton.ovalPath;
        ovalPath.reset();
        ovalPath.addOval(ovalRect, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(StyleKit._78BAC925);
        canvas.drawPath(ovalPath, paint);
        
        // Oval 2
        RectF oval2Rect = CacheForSliderButton.oval2Rect;
        oval2Rect.set(21f, 21f, 39f, 39f);
        Path oval2Path = CacheForSliderButton.oval2Path;
        oval2Path.reset();
        oval2Path.addOval(oval2Rect, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(StyleKit._78BAC9);
        canvas.drawPath(oval2Path, paint);
        
        canvas.restore();
    }
    
    private static class CacheForFilterIconBlue {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 48f, 40f);
        private static RectF resizedFrame = new RectF();
        private static RectF rectangle3Rect = new RectF();
        private static Path rectangle3Path = new Path();
        private static RectF rectangle4Rect = new RectF();
        private static Path rectangle4Path = new Path();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static RectF rectangle2Rect = new RectF();
        private static Path rectangle2Path = new Path();
    }
    
    public static void drawFilterIconBlue(Canvas canvas) {
        StyleKit.drawFilterIconBlue(canvas, new RectF(0f, 0f, 48f, 40f), ResizingBehavior.AspectFit);
    }
    
    public static void drawFilterIconBlue(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForFilterIconBlue.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForFilterIconBlue.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForFilterIconBlue.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 48f, resizedFrame.height() / 40f);
        
        // Group
        {
            // Rectangle 3
            RectF rectangle3Rect = CacheForFilterIconBlue.rectangle3Rect;
            rectangle3Rect.set(0f, 0f, 48f, 4f);
            Path rectangle3Path = CacheForFilterIconBlue.rectangle3Path;
            rectangle3Path.reset();
            rectangle3Path.addRect(rectangle3Rect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(StyleKit._78BAC9);
            canvas.drawPath(rectangle3Path, paint);
            
            // Rectangle 4
            RectF rectangle4Rect = CacheForFilterIconBlue.rectangle4Rect;
            rectangle4Rect.set(6f, 12f, 42f, 16f);
            Path rectangle4Path = CacheForFilterIconBlue.rectangle4Path;
            rectangle4Path.reset();
            rectangle4Path.addRect(rectangle4Rect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(StyleKit._78BAC9);
            canvas.drawPath(rectangle4Path, paint);
            
            // Rectangle
            RectF rectangleRect = CacheForFilterIconBlue.rectangleRect;
            rectangleRect.set(12f, 24f, 36f, 28f);
            Path rectanglePath = CacheForFilterIconBlue.rectanglePath;
            rectanglePath.reset();
            rectanglePath.addRect(rectangleRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(StyleKit._78BAC9);
            canvas.drawPath(rectanglePath, paint);
            
            // Rectangle 2
            RectF rectangle2Rect = CacheForFilterIconBlue.rectangle2Rect;
            rectangle2Rect.set(18f, 36f, 30f, 40f);
            Path rectangle2Path = CacheForFilterIconBlue.rectangle2Path;
            rectangle2Path.reset();
            rectangle2Path.addRect(rectangle2Rect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(StyleKit._78BAC9);
            canvas.drawPath(rectangle2Path, paint);
        }
        
        canvas.restore();
    }
    
    private static class CacheForFilterIconWhite {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 48f, 40f);
        private static RectF resizedFrame = new RectF();
        private static RectF rectangle3Rect = new RectF();
        private static Path rectangle3Path = new Path();
        private static RectF rectangle4Rect = new RectF();
        private static Path rectangle4Path = new Path();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static RectF rectangle2Rect = new RectF();
        private static Path rectangle2Path = new Path();
    }
    
    public static void drawFilterIconWhite(Canvas canvas) {
        StyleKit.drawFilterIconWhite(canvas, new RectF(0f, 0f, 48f, 40f), ResizingBehavior.AspectFit);
    }
    
    public static void drawFilterIconWhite(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForFilterIconWhite.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForFilterIconWhite.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForFilterIconWhite.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 48f, resizedFrame.height() / 40f);
        
        // Group
        {
            // Rectangle 3
            RectF rectangle3Rect = CacheForFilterIconWhite.rectangle3Rect;
            rectangle3Rect.set(0f, 0f, 48f, 4f);
            Path rectangle3Path = CacheForFilterIconWhite.rectangle3Path;
            rectangle3Path.reset();
            rectangle3Path.addRect(rectangle3Rect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(StyleKit.fFFFFF);
            canvas.drawPath(rectangle3Path, paint);
            
            // Rectangle 4
            RectF rectangle4Rect = CacheForFilterIconWhite.rectangle4Rect;
            rectangle4Rect.set(6f, 12f, 42f, 16f);
            Path rectangle4Path = CacheForFilterIconWhite.rectangle4Path;
            rectangle4Path.reset();
            rectangle4Path.addRect(rectangle4Rect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(StyleKit.fFFFFF);
            canvas.drawPath(rectangle4Path, paint);
            
            // Rectangle
            RectF rectangleRect = CacheForFilterIconWhite.rectangleRect;
            rectangleRect.set(12f, 24f, 36f, 28f);
            Path rectanglePath = CacheForFilterIconWhite.rectanglePath;
            rectanglePath.reset();
            rectanglePath.addRect(rectangleRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(StyleKit.fFFFFF);
            canvas.drawPath(rectanglePath, paint);
            
            // Rectangle 2
            RectF rectangle2Rect = CacheForFilterIconWhite.rectangle2Rect;
            rectangle2Rect.set(18f, 36f, 30f, 40f);
            Path rectangle2Path = CacheForFilterIconWhite.rectangle2Path;
            rectangle2Path.reset();
            rectangle2Path.addRect(rectangle2Rect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(StyleKit.fFFFFF);
            canvas.drawPath(rectangle2Path, paint);
        }
        
        canvas.restore();
    }
    
    private static class CacheForBlackArrowLeft {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 21f, 37f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    public static void drawBlackArrowLeft(Canvas canvas) {
        StyleKit.drawBlackArrowLeft(canvas, new RectF(0f, 0f, 21f, 37f), ResizingBehavior.AspectFit);
    }
    
    public static void drawBlackArrowLeft(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint = CacheForBlackArrowLeft.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForBlackArrowLeft.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForBlackArrowLeft.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 21f, resizedFrame.height() / 37f);
        
        // Bezier
        canvas.save();
        canvas.translate(10.5f, 18.5f);
        currentTransformation.peek().postTranslate(10.5f, 18.5f);
        RectF bezierRect = CacheForBlackArrowLeft.bezierRect;
        bezierRect.set(-10.5f, -18.5f, 10.5f, 18.5f);
        Path bezierPath = CacheForBlackArrowLeft.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(8.38f, -18.5f);
        bezierPath.lineTo(10.5f, -16.36f);
        bezierPath.lineTo(-6.5f, 0.5f);
        bezierPath.lineTo(10.5f, 16.36f);
        bezierPath.lineTo(8.38f, 18.5f);
        bezierPath.lineTo(-10.5f, 0.49f);
        bezierPath.lineTo(8.38f, -18.5f);
        bezierPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(StyleKit._000000);
        canvas.drawPath(bezierPath, paint);
        canvas.restore();
        
        canvas.restore();
    }
    
    private static class CacheForBlackArrowRight {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 21f, 37f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    public static void drawBlackArrowRight(Canvas canvas) {
        StyleKit.drawBlackArrowRight(canvas, new RectF(0f, 0f, 21f, 37f), ResizingBehavior.AspectFit);
    }
    
    public static void drawBlackArrowRight(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint = CacheForBlackArrowRight.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForBlackArrowRight.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForBlackArrowRight.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 21f, resizedFrame.height() / 37f);
        
        // Bezier
        canvas.save();
        canvas.translate(10.5f, 18.5f);
        currentTransformation.peek().postTranslate(10.5f, 18.5f);
        canvas.rotate(180f);
        currentTransformation.peek().postRotate(180f);
        RectF bezierRect = CacheForBlackArrowRight.bezierRect;
        bezierRect.set(-10.5f, -18.5f, 10.5f, 18.5f);
        Path bezierPath = CacheForBlackArrowRight.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(8.38f, -18.5f);
        bezierPath.lineTo(10.5f, -16.36f);
        bezierPath.lineTo(-6.5f, 0.5f);
        bezierPath.lineTo(10.5f, 16.36f);
        bezierPath.lineTo(8.38f, 18.5f);
        bezierPath.lineTo(-10.5f, 0.49f);
        bezierPath.lineTo(8.38f, -18.5f);
        bezierPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(StyleKit._000000);
        canvas.drawPath(bezierPath, paint);
        canvas.restore();
        
        canvas.restore();
    }
    
    private static class CacheForSplitValueCellActive {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 90f, 47f);
        private static RectF resizedFrame = new RectF();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
    }
    
    public static void drawSplitValueCellActive(Canvas canvas) {
        StyleKit.drawSplitValueCellActive(canvas, new RectF(0f, 0f, 90f, 47f), ResizingBehavior.AspectFit);
    }
    
    public static void drawSplitValueCellActive(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForSplitValueCellActive.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForSplitValueCellActive.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForSplitValueCellActive.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 90f, resizedFrame.height() / 47f);
        
        // Rectangle
        RectF rectangleRect = CacheForSplitValueCellActive.rectangleRect;
        rectangleRect.set(0f, 0f, 90f, 47f);
        Path rectanglePath = CacheForSplitValueCellActive.rectanglePath;
        rectanglePath.reset();
        rectanglePath.addRect(rectangleRect, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(2.7f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(StyleKit._000000);
        canvas.drawPath(rectanglePath, paint);
        canvas.restore();
        
        canvas.restore();
    }
    
    private static class CacheForSplitValueCellNotActive {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 90f, 47f);
        private static RectF resizedFrame = new RectF();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
    }
    
    public static void drawSplitValueCellNotActive(Canvas canvas) {
        StyleKit.drawSplitValueCellNotActive(canvas, new RectF(0f, 0f, 90f, 47f), ResizingBehavior.AspectFit);
    }
    
    public static void drawSplitValueCellNotActive(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForSplitValueCellNotActive.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForSplitValueCellNotActive.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForSplitValueCellNotActive.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 90f, resizedFrame.height() / 47f);
        
        // Rectangle
        RectF rectangleRect = CacheForSplitValueCellNotActive.rectangleRect;
        rectangleRect.set(0f, 0f, 90f, 47f);
        Path rectanglePath = CacheForSplitValueCellNotActive.rectanglePath;
        rectanglePath.reset();
        rectanglePath.addRect(rectangleRect, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(2.7f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(StyleKit.dAE4E9);
        canvas.drawPath(rectanglePath, paint);
        canvas.restore();
        
        canvas.restore();
    }
    
    private static class CacheForEllipsis {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 86f, 20f);
        private static RectF resizedFrame = new RectF();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF oval2Rect = new RectF();
        private static Path oval2Path = new Path();
        private static RectF oval3Rect = new RectF();
        private static Path oval3Path = new Path();
    }
    
    public static void drawEllipsis(Canvas canvas) {
        StyleKit.drawEllipsis(canvas, new RectF(0f, 0f, 86f, 20f), ResizingBehavior.AspectFit);
    }
    
    public static void drawEllipsis(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForEllipsis.paint;
        
        // Local Colors
        int c0D0D6IconColor = Color.argb(255, 192, 208, 214);
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForEllipsis.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForEllipsis.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 86f, resizedFrame.height() / 20f);
        
        // Oval
        RectF ovalRect = CacheForEllipsis.ovalRect;
        ovalRect.set(35f, 2f, 51f, 18f);
        Path ovalPath = CacheForEllipsis.ovalPath;
        ovalPath.reset();
        ovalPath.addOval(ovalRect, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(3f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(c0D0D6IconColor);
        canvas.drawPath(ovalPath, paint);
        canvas.restore();
        
        // Oval 2
        RectF oval2Rect = CacheForEllipsis.oval2Rect;
        oval2Rect.set(2f, 2f, 18f, 18f);
        Path oval2Path = CacheForEllipsis.oval2Path;
        oval2Path.reset();
        oval2Path.addOval(oval2Rect, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(3f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(c0D0D6IconColor);
        canvas.drawPath(oval2Path, paint);
        canvas.restore();
        
        // Oval 3
        RectF oval3Rect = CacheForEllipsis.oval3Rect;
        oval3Rect.set(68f, 2f, 84f, 18f);
        Path oval3Path = CacheForEllipsis.oval3Path;
        oval3Path.reset();
        oval3Path.addOval(oval3Rect, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(3f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(c0D0D6IconColor);
        canvas.drawPath(oval3Path, paint);
        canvas.restore();
        
        canvas.restore();
    }
    
    private static class CacheForDeleteRed {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 46f, 46f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
    }
    
    public static void drawDeleteRed(Canvas canvas) {
        StyleKit.drawDeleteRed(canvas, new RectF(0f, 0f, 46f, 46f), ResizingBehavior.AspectFit);
    }
    
    public static void drawDeleteRed(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForDeleteRed.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForDeleteRed.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForDeleteRed.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 46f, resizedFrame.height() / 46f);
        
        // Bezier
        RectF bezierRect = CacheForDeleteRed.bezierRect;
        bezierRect.set(14f, 14f, 31.64f, 31.64f);
        Path bezierPath = CacheForDeleteRed.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(31.64f, 31.64f);
        bezierPath.lineTo(14f, 14f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(2f);
        paint.setStrokeCap(Paint.Cap.SQUARE);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(StyleKit.fF6800);
        canvas.drawPath(bezierPath, paint);
        canvas.restore();
        
        // Bezier 2
        RectF bezier2Rect = CacheForDeleteRed.bezier2Rect;
        bezier2Rect.set(13f, 13.97f, 32.03f, 33f);
        Path bezier2Path = CacheForDeleteRed.bezier2Path;
        bezier2Path.reset();
        bezier2Path.moveTo(32.03f, 13.97f);
        bezier2Path.lineTo(13f, 33f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(2f);
        paint.setStrokeCap(Paint.Cap.SQUARE);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(StyleKit.fF6800);
        canvas.drawPath(bezier2Path, paint);
        canvas.restore();
        
        // Oval
        RectF ovalRect = CacheForDeleteRed.ovalRect;
        ovalRect.set(1f, 1f, 45f, 45f);
        Path ovalPath = CacheForDeleteRed.ovalPath;
        ovalPath.reset();
        ovalPath.addOval(ovalRect, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(2f);
        paint.setStrokeMiter(10f);
        canvas.save();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(StyleKit.fF6800);
        canvas.drawPath(ovalPath, paint);
        canvas.restore();
        
        canvas.restore();
    }
    
    private static class CacheForDeleteIconBlue {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 32f, 32f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
    }
    
    public static void drawDeleteIconBlue(Canvas canvas) {
        StyleKit.drawDeleteIconBlue(canvas, new RectF(0f, 0f, 32f, 32f), ResizingBehavior.AspectFit);
    }
    
    public static void drawDeleteIconBlue(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForDeleteIconBlue.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForDeleteIconBlue.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForDeleteIconBlue.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 32f, resizedFrame.height() / 32f);
        
        // Bezier
        RectF bezierRect = CacheForDeleteIconBlue.bezierRect;
        bezierRect.set(0f, 0f, 32f, 32f);
        Path bezierPath = CacheForDeleteIconBlue.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(16f, 32f);
        bezierPath.cubicTo(24.84f, 32f, 32f, 24.84f, 32f, 16f);
        bezierPath.cubicTo(32f, 7.16f, 24.84f, 0f, 16f, 0f);
        bezierPath.cubicTo(7.16f, 0f, 0f, 7.16f, 0f, 16f);
        bezierPath.cubicTo(0f, 24.84f, 7.16f, 32f, 16f, 32f);
        bezierPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(StyleKit.bBDCE4);
        canvas.drawPath(bezierPath, paint);
        
        // Rectangle
        RectF rectangleRect = CacheForDeleteIconBlue.rectangleRect;
        rectangleRect.set(8f, 15f, 24f, 18f);
        Path rectanglePath = CacheForDeleteIconBlue.rectanglePath;
        rectanglePath.reset();
        rectanglePath.addRoundRect(rectangleRect, 1.4f, 1.4f, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(StyleKit.fFFFFF);
        canvas.drawPath(rectanglePath, paint);
        
        canvas.restore();
    }
    
    private static class CacheForAddPlus_white {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 40f, 40f);
        private static RectF resizedFrame = new RectF();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static RectF rectangle2Rect = new RectF();
        private static Path rectangle2Path = new Path();
    }
    
    public static void drawAddPlus_white(Canvas canvas) {
        StyleKit.drawAddPlus_white(canvas, new RectF(0f, 0f, 40f, 40f), ResizingBehavior.AspectFit);
    }
    
    public static void drawAddPlus_white(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForAddPlus_white.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForAddPlus_white.resizedFrame;
        StyleKit.resizingBehaviorApply(resizing, CacheForAddPlus_white.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 40f, resizedFrame.height() / 40f);
        
        // Group
        {
            // Rectangle
            RectF rectangleRect = CacheForAddPlus_white.rectangleRect;
            rectangleRect.set(18f, 0f, 22f, 40f);
            Path rectanglePath = CacheForAddPlus_white.rectanglePath;
            rectanglePath.reset();
            rectanglePath.addRect(rectangleRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(StyleKit.fFFFFF);
            canvas.drawPath(rectanglePath, paint);
            
            // Rectangle 2
            RectF rectangle2Rect = CacheForAddPlus_white.rectangle2Rect;
            rectangle2Rect.set(0f, 18f, 40f, 22f);
            Path rectangle2Path = CacheForAddPlus_white.rectangle2Path;
            rectangle2Path.reset();
            rectangle2Path.addRect(rectangle2Rect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(StyleKit.fFFFFF);
            canvas.drawPath(rectangle2Path, paint);
        }
        
        canvas.restore();
    }
    
    
    // Canvas Images
    // Assets
    
    private static Bitmap imageOfPlan = null;
    public static Bitmap imageOfPlan() {
        if (imageOfPlan != null)
            return imageOfPlan;
        
        imageOfPlan = Bitmap.createBitmap(44, 44, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfPlan);
        StyleKit.drawPlan(canvas);
        
        return imageOfPlan;
    }
    
    private static Bitmap imageOfTouchID = null;
    public static Bitmap imageOfTouchID() {
        if (imageOfTouchID != null)
            return imageOfTouchID;
        
        imageOfTouchID = Bitmap.createBitmap(145, 145, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfTouchID);
        StyleKit.drawTouchID(canvas);
        
        return imageOfTouchID;
    }
    
    private static Bitmap imageOfRelationships = null;
    public static Bitmap imageOfRelationships() {
        if (imageOfRelationships != null)
            return imageOfRelationships;
        
        imageOfRelationships = Bitmap.createBitmap(44, 44, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfRelationships);
        StyleKit.drawRelationships(canvas);
        
        return imageOfRelationships;
    }
    
    private static Bitmap imageOfSettings = null;
    public static Bitmap imageOfSettings() {
        if (imageOfSettings != null)
            return imageOfSettings;
        
        imageOfSettings = Bitmap.createBitmap(44, 44, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfSettings);
        StyleKit.drawSettings(canvas);
        
        return imageOfSettings;
    }
    
    private static Bitmap imageOfProfile = null;
    public static Bitmap imageOfProfile() {
        if (imageOfProfile != null)
            return imageOfProfile;
        
        imageOfProfile = Bitmap.createBitmap(44, 44, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfProfile);
        StyleKit.drawProfile(canvas);
        
        return imageOfProfile;
    }
    
    private static Bitmap imageOfAlerts = null;
    public static Bitmap imageOfAlerts() {
        if (imageOfAlerts != null)
            return imageOfAlerts;
        
        imageOfAlerts = Bitmap.createBitmap(44, 44, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfAlerts);
        StyleKit.drawAlerts(canvas);
        
        return imageOfAlerts;
    }
    
    private static Bitmap imageOfResources = null;
    public static Bitmap imageOfResources() {
        if (imageOfResources != null)
            return imageOfResources;
        
        imageOfResources = Bitmap.createBitmap(44, 44, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfResources);
        StyleKit.drawResources(canvas);
        
        return imageOfResources;
    }
    
    private static Bitmap imageOfGoals = null;
    public static Bitmap imageOfGoals() {
        if (imageOfGoals != null)
            return imageOfGoals;
        
        imageOfGoals = Bitmap.createBitmap(44, 44, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfGoals);
        StyleKit.drawGoals(canvas);
        
        return imageOfGoals;
    }
    
    private static Bitmap imageOfHelp = null;
    public static Bitmap imageOfHelp() {
        if (imageOfHelp != null)
            return imageOfHelp;
        
        imageOfHelp = Bitmap.createBitmap(44, 44, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfHelp);
        StyleKit.drawHelp(canvas);
        
        return imageOfHelp;
    }
    
    private static Bitmap imageOfInitiatives = null;
    public static Bitmap imageOfInitiatives() {
        if (imageOfInitiatives != null)
            return imageOfInitiatives;
        
        imageOfInitiatives = Bitmap.createBitmap(44, 44, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfInitiatives);
        StyleKit.drawInitiatives(canvas);
        
        return imageOfInitiatives;
    }
    
    private static Bitmap imageOfAlertsSelected = null;
    public static Bitmap imageOfAlertsSelected() {
        if (imageOfAlertsSelected != null)
            return imageOfAlertsSelected;
        
        imageOfAlertsSelected = Bitmap.createBitmap(44, 44, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfAlertsSelected);
        StyleKit.drawAlertsSelected(canvas);
        
        return imageOfAlertsSelected;
    }
    
    private static Bitmap imageOfRelationshipsSelected = null;
    public static Bitmap imageOfRelationshipsSelected() {
        if (imageOfRelationshipsSelected != null)
            return imageOfRelationshipsSelected;
        
        imageOfRelationshipsSelected = Bitmap.createBitmap(44, 44, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfRelationshipsSelected);
        StyleKit.drawRelationshipsSelected(canvas);
        
        return imageOfRelationshipsSelected;
    }
    
    private static Bitmap imageOfHelpSelected = null;
    public static Bitmap imageOfHelpSelected() {
        if (imageOfHelpSelected != null)
            return imageOfHelpSelected;
        
        imageOfHelpSelected = Bitmap.createBitmap(44, 44, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfHelpSelected);
        StyleKit.drawHelpSelected(canvas);
        
        return imageOfHelpSelected;
    }
    
    private static Bitmap imageOfPlanSelected = null;
    public static Bitmap imageOfPlanSelected() {
        if (imageOfPlanSelected != null)
            return imageOfPlanSelected;
        
        imageOfPlanSelected = Bitmap.createBitmap(44, 44, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfPlanSelected);
        StyleKit.drawPlanSelected(canvas);
        
        return imageOfPlanSelected;
    }
    
    private static Bitmap imageOfInitiativesSelected = null;
    public static Bitmap imageOfInitiativesSelected() {
        if (imageOfInitiativesSelected != null)
            return imageOfInitiativesSelected;
        
        imageOfInitiativesSelected = Bitmap.createBitmap(44, 44, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfInitiativesSelected);
        StyleKit.drawInitiativesSelected(canvas);
        
        return imageOfInitiativesSelected;
    }
    
    private static Bitmap imageOfSettingsSelected = null;
    public static Bitmap imageOfSettingsSelected() {
        if (imageOfSettingsSelected != null)
            return imageOfSettingsSelected;
        
        imageOfSettingsSelected = Bitmap.createBitmap(44, 44, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfSettingsSelected);
        StyleKit.drawSettingsSelected(canvas);
        
        return imageOfSettingsSelected;
    }
    
    private static Bitmap imageOfProfileSelected = null;
    public static Bitmap imageOfProfileSelected() {
        if (imageOfProfileSelected != null)
            return imageOfProfileSelected;
        
        imageOfProfileSelected = Bitmap.createBitmap(44, 44, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfProfileSelected);
        StyleKit.drawProfileSelected(canvas);
        
        return imageOfProfileSelected;
    }
    
    private static Bitmap imageOfResourcesSelected = null;
    public static Bitmap imageOfResourcesSelected() {
        if (imageOfResourcesSelected != null)
            return imageOfResourcesSelected;
        
        imageOfResourcesSelected = Bitmap.createBitmap(44, 44, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfResourcesSelected);
        StyleKit.drawResourcesSelected(canvas);
        
        return imageOfResourcesSelected;
    }
    
    private static Bitmap imageOfGoalsSelected = null;
    public static Bitmap imageOfGoalsSelected() {
        if (imageOfGoalsSelected != null)
            return imageOfGoalsSelected;
        
        imageOfGoalsSelected = Bitmap.createBitmap(44, 44, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfGoalsSelected);
        StyleKit.drawGoalsSelected(canvas);
        
        return imageOfGoalsSelected;
    }
    
    private static Bitmap imageOfMenuIcon = null;
    public static Bitmap imageOfMenuIcon() {
        if (imageOfMenuIcon != null)
            return imageOfMenuIcon;
        
        imageOfMenuIcon = Bitmap.createBitmap(41, 28, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfMenuIcon);
        StyleKit.drawMenuIcon(canvas);
        
        return imageOfMenuIcon;
    }
    
    private static Bitmap imageOfViewLogo2 = null;
    public static Bitmap imageOfViewLogo2() {
        if (imageOfViewLogo2 != null)
            return imageOfViewLogo2;
        
        imageOfViewLogo2 = Bitmap.createBitmap(377, 223, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfViewLogo2);
        StyleKit.drawViewLogo2(canvas);
        
        return imageOfViewLogo2;
    }
    
    private static Bitmap imageOfUserIcon = null;
    public static Bitmap imageOfUserIcon() {
        if (imageOfUserIcon != null)
            return imageOfUserIcon;
        
        imageOfUserIcon = Bitmap.createBitmap(44, 44, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfUserIcon);
        StyleKit.drawUserIcon(canvas);
        
        return imageOfUserIcon;
    }
    
    private static Bitmap imageOfLockIcon = null;
    public static Bitmap imageOfLockIcon() {
        if (imageOfLockIcon != null)
            return imageOfLockIcon;
        
        imageOfLockIcon = Bitmap.createBitmap(44, 44, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfLockIcon);
        StyleKit.drawLockIcon(canvas);
        
        return imageOfLockIcon;
    }
    
    private static Bitmap imageOfArrow = null;
    public static Bitmap imageOfArrow() {
        if (imageOfArrow != null)
            return imageOfArrow;
        
        imageOfArrow = Bitmap.createBitmap(25, 34, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfArrow);
        StyleKit.drawArrow(canvas);
        
        return imageOfArrow;
    }
    
    private static Bitmap imageOfSearchIcon = null;
    public static Bitmap imageOfSearchIcon() {
        if (imageOfSearchIcon != null)
            return imageOfSearchIcon;
        
        imageOfSearchIcon = Bitmap.createBitmap(18, 18, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfSearchIcon);
        StyleKit.drawSearchIcon(canvas);
        
        return imageOfSearchIcon;
    }
    
    private static Bitmap imageOfMicIcon = null;
    public static Bitmap imageOfMicIcon() {
        if (imageOfMicIcon != null)
            return imageOfMicIcon;
        
        imageOfMicIcon = Bitmap.createBitmap(12, 22, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfMicIcon);
        StyleKit.drawMicIcon(canvas);
        
        return imageOfMicIcon;
    }
    
    private static Bitmap imageOfLeftArrowWhite = null;
    public static Bitmap imageOfLeftArrowWhite() {
        if (imageOfLeftArrowWhite != null)
            return imageOfLeftArrowWhite;
        
        imageOfLeftArrowWhite = Bitmap.createBitmap(17, 34, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfLeftArrowWhite);
        StyleKit.drawLeftArrowWhite(canvas);
        
        return imageOfLeftArrowWhite;
    }
    
    private static Bitmap imageOfWatsonIcon = null;
    public static Bitmap imageOfWatsonIcon(Context context) {
        if (imageOfWatsonIcon != null)
            return imageOfWatsonIcon;
        
        imageOfWatsonIcon = Bitmap.createBitmap(54, 51, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfWatsonIcon);
        StyleKit.drawWatsonIcon(canvas, context);
        
        return imageOfWatsonIcon;
    }
    
    private static Bitmap imageOfMicSearch = null;
    public static Bitmap imageOfMicSearch() {
        if (imageOfMicSearch != null)
            return imageOfMicSearch;
        
        imageOfMicSearch = Bitmap.createBitmap(28, 38, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfMicSearch);
        StyleKit.drawMicSearch(canvas);
        
        return imageOfMicSearch;
    }
    
    private static Bitmap imageOfDownArrow = null;
    public static Bitmap imageOfDownArrow() {
        if (imageOfDownArrow != null)
            return imageOfDownArrow;
        
        imageOfDownArrow = Bitmap.createBitmap(30, 34, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfDownArrow);
        StyleKit.drawDownArrow(canvas);
        
        return imageOfDownArrow;
    }
    
    private static Bitmap imageOfRadioBtnOn = null;
    public static Bitmap imageOfRadioBtnOn() {
        if (imageOfRadioBtnOn != null)
            return imageOfRadioBtnOn;
        
        imageOfRadioBtnOn = Bitmap.createBitmap(50, 50, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfRadioBtnOn);
        StyleKit.drawRadioBtnOn(canvas);
        
        return imageOfRadioBtnOn;
    }
    
    private static Bitmap imageOfRadioBtnOff = null;
    public static Bitmap imageOfRadioBtnOff() {
        if (imageOfRadioBtnOff != null)
            return imageOfRadioBtnOff;
        
        imageOfRadioBtnOff = Bitmap.createBitmap(50, 50, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfRadioBtnOff);
        StyleKit.drawRadioBtnOff(canvas);
        
        return imageOfRadioBtnOff;
    }
    
    private static Bitmap imageOfRightArrowGreen = null;
    public static Bitmap imageOfRightArrowGreen() {
        if (imageOfRightArrowGreen != null)
            return imageOfRightArrowGreen;
        
        imageOfRightArrowGreen = Bitmap.createBitmap(17, 34, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfRightArrowGreen);
        StyleKit.drawRightArrowGreen(canvas);
        
        return imageOfRightArrowGreen;
    }
    
    private static Bitmap imageOfDownArrDropdown = null;
    public static Bitmap imageOfDownArrDropdown() {
        if (imageOfDownArrDropdown != null)
            return imageOfDownArrDropdown;
        
        imageOfDownArrDropdown = Bitmap.createBitmap(26, 13, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfDownArrDropdown);
        StyleKit.drawDownArrDropdown(canvas);
        
        return imageOfDownArrDropdown;
    }
    
    private static Bitmap imageOfLogoutButton = null;
    public static Bitmap imageOfLogoutButton() {
        if (imageOfLogoutButton != null)
            return imageOfLogoutButton;
        
        imageOfLogoutButton = Bitmap.createBitmap(44, 44, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfLogoutButton);
        StyleKit.drawLogoutButton(canvas);
        
        return imageOfLogoutButton;
    }
    
    private static Bitmap imageOfMyplanButton = null;
    public static Bitmap imageOfMyplanButton() {
        if (imageOfMyplanButton != null)
            return imageOfMyplanButton;
        
        imageOfMyplanButton = Bitmap.createBitmap(44, 44, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfMyplanButton);
        StyleKit.drawMyplanButton(canvas);
        
        return imageOfMyplanButton;
    }
    
    private static Bitmap imageOfMyplanButtonSelected = null;
    public static Bitmap imageOfMyplanButtonSelected() {
        if (imageOfMyplanButtonSelected != null)
            return imageOfMyplanButtonSelected;
        
        imageOfMyplanButtonSelected = Bitmap.createBitmap(44, 44, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfMyplanButtonSelected);
        StyleKit.drawMyplanButtonSelected(canvas);
        
        return imageOfMyplanButtonSelected;
    }
    
    private static Bitmap imageOfLogoutButtonSelected = null;
    public static Bitmap imageOfLogoutButtonSelected() {
        if (imageOfLogoutButtonSelected != null)
            return imageOfLogoutButtonSelected;
        
        imageOfLogoutButtonSelected = Bitmap.createBitmap(44, 44, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfLogoutButtonSelected);
        StyleKit.drawLogoutButtonSelected(canvas);
        
        return imageOfLogoutButtonSelected;
    }
    
    private static Bitmap imageOfLeftArrowGrey = null;
    public static Bitmap imageOfLeftArrowGrey() {
        if (imageOfLeftArrowGrey != null)
            return imageOfLeftArrowGrey;
        
        imageOfLeftArrowGrey = Bitmap.createBitmap(17, 34, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfLeftArrowGrey);
        StyleKit.drawLeftArrowGrey(canvas);
        
        return imageOfLeftArrowGrey;
    }
    
    private static Bitmap imageOfLinkIcon = null;
    public static Bitmap imageOfLinkIcon() {
        if (imageOfLinkIcon != null)
            return imageOfLinkIcon;
        
        imageOfLinkIcon = Bitmap.createBitmap(32, 14, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfLinkIcon);
        StyleKit.drawLinkIcon(canvas);
        
        return imageOfLinkIcon;
    }
    
    private static Bitmap imageOfProgbarAspiration = null;
    public static Bitmap imageOfProgbarAspiration() {
        if (imageOfProgbarAspiration != null)
            return imageOfProgbarAspiration;
        
        imageOfProgbarAspiration = Bitmap.createBitmap(170, 12, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfProgbarAspiration);
        StyleKit.drawProgbarAspiration(canvas);
        
        return imageOfProgbarAspiration;
    }
    
    private static Bitmap imageOfProgbarProgressing = null;
    public static Bitmap imageOfProgbarProgressing() {
        if (imageOfProgbarProgressing != null)
            return imageOfProgbarProgressing;
        
        imageOfProgbarProgressing = Bitmap.createBitmap(170, 12, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfProgbarProgressing);
        StyleKit.drawProgbarProgressing(canvas);
        
        return imageOfProgbarProgressing;
    }
    
    private static Bitmap imageOfProgbarExecuting = null;
    public static Bitmap imageOfProgbarExecuting() {
        if (imageOfProgbarExecuting != null)
            return imageOfProgbarExecuting;
        
        imageOfProgbarExecuting = Bitmap.createBitmap(170, 12, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfProgbarExecuting);
        StyleKit.drawProgbarExecuting(canvas);
        
        return imageOfProgbarExecuting;
    }
    
    private static Bitmap imageOfProgbarClosed = null;
    public static Bitmap imageOfProgbarClosed() {
        if (imageOfProgbarClosed != null)
            return imageOfProgbarClosed;
        
        imageOfProgbarClosed = Bitmap.createBitmap(170, 12, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfProgbarClosed);
        StyleKit.drawProgbarClosed(canvas);
        
        return imageOfProgbarClosed;
    }
    
    private static Bitmap imageOfExpandRelationshipBut = null;
    public static Bitmap imageOfExpandRelationshipBut() {
        if (imageOfExpandRelationshipBut != null)
            return imageOfExpandRelationshipBut;
        
        imageOfExpandRelationshipBut = Bitmap.createBitmap(50, 50, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfExpandRelationshipBut);
        StyleKit.drawExpandRelationshipBut(canvas);
        
        return imageOfExpandRelationshipBut;
    }
    
    private static Bitmap imageOfExpandRelationshipBut2 = null;
    public static Bitmap imageOfExpandRelationshipBut2() {
        if (imageOfExpandRelationshipBut2 != null)
            return imageOfExpandRelationshipBut2;
        
        imageOfExpandRelationshipBut2 = Bitmap.createBitmap(50, 50, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfExpandRelationshipBut2);
        StyleKit.drawExpandRelationshipBut2(canvas);
        
        return imageOfExpandRelationshipBut2;
    }
    
    private static Bitmap imageOfExpandRelationshipBut3 = null;
    public static Bitmap imageOfExpandRelationshipBut3() {
        if (imageOfExpandRelationshipBut3 != null)
            return imageOfExpandRelationshipBut3;
        
        imageOfExpandRelationshipBut3 = Bitmap.createBitmap(50, 50, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfExpandRelationshipBut3);
        StyleKit.drawExpandRelationshipBut3(canvas);
        
        return imageOfExpandRelationshipBut3;
    }
    
    private static Bitmap imageOfExpandRelationshipBut4 = null;
    public static Bitmap imageOfExpandRelationshipBut4() {
        if (imageOfExpandRelationshipBut4 != null)
            return imageOfExpandRelationshipBut4;
        
        imageOfExpandRelationshipBut4 = Bitmap.createBitmap(50, 50, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfExpandRelationshipBut4);
        StyleKit.drawExpandRelationshipBut4(canvas);
        
        return imageOfExpandRelationshipBut4;
    }
    
    private static Bitmap imageOfTabRelationship = null;
    public static Bitmap imageOfTabRelationship() {
        if (imageOfTabRelationship != null)
            return imageOfTabRelationship;
        
        imageOfTabRelationship = Bitmap.createBitmap(20, 223, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfTabRelationship);
        StyleKit.drawTabRelationship(canvas);
        
        return imageOfTabRelationship;
    }
    
    private static Bitmap imageOfTabRelationship2 = null;
    public static Bitmap imageOfTabRelationship2() {
        if (imageOfTabRelationship2 != null)
            return imageOfTabRelationship2;
        
        imageOfTabRelationship2 = Bitmap.createBitmap(20, 223, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfTabRelationship2);
        StyleKit.drawTabRelationship2(canvas);
        
        return imageOfTabRelationship2;
    }
    
    private static Bitmap imageOfTabRelationship3 = null;
    public static Bitmap imageOfTabRelationship3() {
        if (imageOfTabRelationship3 != null)
            return imageOfTabRelationship3;
        
        imageOfTabRelationship3 = Bitmap.createBitmap(20, 223, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfTabRelationship3);
        StyleKit.drawTabRelationship3(canvas);
        
        return imageOfTabRelationship3;
    }
    
    private static Bitmap imageOfTabRelationship4 = null;
    public static Bitmap imageOfTabRelationship4() {
        if (imageOfTabRelationship4 != null)
            return imageOfTabRelationship4;
        
        imageOfTabRelationship4 = Bitmap.createBitmap(20, 223, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfTabRelationship4);
        StyleKit.drawTabRelationship4(canvas);
        
        return imageOfTabRelationship4;
    }
    
    private static Bitmap imageOfMoreButton = null;
    public static Bitmap imageOfMoreButton() {
        if (imageOfMoreButton != null)
            return imageOfMoreButton;
        
        imageOfMoreButton = Bitmap.createBitmap(50, 50, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfMoreButton);
        StyleKit.drawMoreButton(canvas);
        
        return imageOfMoreButton;
    }
    
    private static Bitmap imageOfTabRelationship5 = null;
    public static Bitmap imageOfTabRelationship5() {
        if (imageOfTabRelationship5 != null)
            return imageOfTabRelationship5;
        
        imageOfTabRelationship5 = Bitmap.createBitmap(20, 223, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfTabRelationship5);
        StyleKit.drawTabRelationship5(canvas);
        
        return imageOfTabRelationship5;
    }
    
    private static Bitmap imageOfExpandRelationshipBut5 = null;
    public static Bitmap imageOfExpandRelationshipBut5() {
        if (imageOfExpandRelationshipBut5 != null)
            return imageOfExpandRelationshipBut5;
        
        imageOfExpandRelationshipBut5 = Bitmap.createBitmap(50, 50, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfExpandRelationshipBut5);
        StyleKit.drawExpandRelationshipBut5(canvas);
        
        return imageOfExpandRelationshipBut5;
    }
    
    private static Bitmap imageOfCollapseRelationshipBut6 = null;
    public static Bitmap imageOfCollapseRelationshipBut6() {
        if (imageOfCollapseRelationshipBut6 != null)
            return imageOfCollapseRelationshipBut6;
        
        imageOfCollapseRelationshipBut6 = Bitmap.createBitmap(50, 50, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfCollapseRelationshipBut6);
        StyleKit.drawCollapseRelationshipBut6(canvas);
        
        return imageOfCollapseRelationshipBut6;
    }
    
    private static Bitmap imageOfCollapseRelationshipBut7 = null;
    public static Bitmap imageOfCollapseRelationshipBut7() {
        if (imageOfCollapseRelationshipBut7 != null)
            return imageOfCollapseRelationshipBut7;
        
        imageOfCollapseRelationshipBut7 = Bitmap.createBitmap(50, 50, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfCollapseRelationshipBut7);
        StyleKit.drawCollapseRelationshipBut7(canvas);
        
        return imageOfCollapseRelationshipBut7;
    }
    
    private static Bitmap imageOfCollapseRelationshipBut8 = null;
    public static Bitmap imageOfCollapseRelationshipBut8() {
        if (imageOfCollapseRelationshipBut8 != null)
            return imageOfCollapseRelationshipBut8;
        
        imageOfCollapseRelationshipBut8 = Bitmap.createBitmap(50, 50, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfCollapseRelationshipBut8);
        StyleKit.drawCollapseRelationshipBut8(canvas);
        
        return imageOfCollapseRelationshipBut8;
    }
    
    private static Bitmap imageOfCollapseRelationshipBut9 = null;
    public static Bitmap imageOfCollapseRelationshipBut9() {
        if (imageOfCollapseRelationshipBut9 != null)
            return imageOfCollapseRelationshipBut9;
        
        imageOfCollapseRelationshipBut9 = Bitmap.createBitmap(50, 50, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfCollapseRelationshipBut9);
        StyleKit.drawCollapseRelationshipBut9(canvas);
        
        return imageOfCollapseRelationshipBut9;
    }
    
    private static Bitmap imageOfSwitch_left = null;
    public static Bitmap imageOfSwitch_left() {
        if (imageOfSwitch_left != null)
            return imageOfSwitch_left;
        
        imageOfSwitch_left = Bitmap.createBitmap(91, 61, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfSwitch_left);
        StyleKit.drawSwitch_left(canvas);
        
        return imageOfSwitch_left;
    }
    
    private static Bitmap imageOfSwitch_right = null;
    public static Bitmap imageOfSwitch_right() {
        if (imageOfSwitch_right != null)
            return imageOfSwitch_right;
        
        imageOfSwitch_right = Bitmap.createBitmap(91, 61, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfSwitch_right);
        StyleKit.drawSwitch_right(canvas);
        
        return imageOfSwitch_right;
    }
    
    private static Bitmap imageOfClose_x_white = null;
    public static Bitmap imageOfClose_x_white() {
        if (imageOfClose_x_white != null)
            return imageOfClose_x_white;
        
        imageOfClose_x_white = Bitmap.createBitmap(40, 40, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfClose_x_white);
        StyleKit.drawClose_x_white(canvas);
        
        return imageOfClose_x_white;
    }
    
    private static Bitmap imageOfClose_x_black = null;
    public static Bitmap imageOfClose_x_black() {
        if (imageOfClose_x_black != null)
            return imageOfClose_x_black;
        
        imageOfClose_x_black = Bitmap.createBitmap(40, 40, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfClose_x_black);
        StyleKit.drawClose_x_black(canvas);
        
        return imageOfClose_x_black;
    }
    
    private static Bitmap imageOfSliderButton = null;
    public static Bitmap imageOfSliderButton() {
        if (imageOfSliderButton != null)
            return imageOfSliderButton;
        
        imageOfSliderButton = Bitmap.createBitmap(60, 60, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfSliderButton);
        StyleKit.drawSliderButton(canvas);
        
        return imageOfSliderButton;
    }
    
    private static Bitmap imageOfFilterIconBlue = null;
    public static Bitmap imageOfFilterIconBlue() {
        if (imageOfFilterIconBlue != null)
            return imageOfFilterIconBlue;
        
        imageOfFilterIconBlue = Bitmap.createBitmap(48, 40, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfFilterIconBlue);
        StyleKit.drawFilterIconBlue(canvas);
        
        return imageOfFilterIconBlue;
    }
    
    private static Bitmap imageOfFilterIconWhite = null;
    public static Bitmap imageOfFilterIconWhite() {
        if (imageOfFilterIconWhite != null)
            return imageOfFilterIconWhite;
        
        imageOfFilterIconWhite = Bitmap.createBitmap(48, 40, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfFilterIconWhite);
        StyleKit.drawFilterIconWhite(canvas);
        
        return imageOfFilterIconWhite;
    }
    
    private static Bitmap imageOfBlackArrowLeft = null;
    public static Bitmap imageOfBlackArrowLeft() {
        if (imageOfBlackArrowLeft != null)
            return imageOfBlackArrowLeft;
        
        imageOfBlackArrowLeft = Bitmap.createBitmap(21, 37, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfBlackArrowLeft);
        StyleKit.drawBlackArrowLeft(canvas);
        
        return imageOfBlackArrowLeft;
    }
    
    private static Bitmap imageOfBlackArrowRight = null;
    public static Bitmap imageOfBlackArrowRight() {
        if (imageOfBlackArrowRight != null)
            return imageOfBlackArrowRight;
        
        imageOfBlackArrowRight = Bitmap.createBitmap(21, 37, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfBlackArrowRight);
        StyleKit.drawBlackArrowRight(canvas);
        
        return imageOfBlackArrowRight;
    }
    
    private static Bitmap imageOfSplitValueCellActive = null;
    public static Bitmap imageOfSplitValueCellActive() {
        if (imageOfSplitValueCellActive != null)
            return imageOfSplitValueCellActive;
        
        imageOfSplitValueCellActive = Bitmap.createBitmap(90, 47, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfSplitValueCellActive);
        StyleKit.drawSplitValueCellActive(canvas);
        
        return imageOfSplitValueCellActive;
    }
    
    private static Bitmap imageOfSplitValueCellNotActive = null;
    public static Bitmap imageOfSplitValueCellNotActive() {
        if (imageOfSplitValueCellNotActive != null)
            return imageOfSplitValueCellNotActive;
        
        imageOfSplitValueCellNotActive = Bitmap.createBitmap(90, 47, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfSplitValueCellNotActive);
        StyleKit.drawSplitValueCellNotActive(canvas);
        
        return imageOfSplitValueCellNotActive;
    }
    
    private static Bitmap imageOfEllipsis = null;
    public static Bitmap imageOfEllipsis() {
        if (imageOfEllipsis != null)
            return imageOfEllipsis;
        
        imageOfEllipsis = Bitmap.createBitmap(86, 20, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfEllipsis);
        StyleKit.drawEllipsis(canvas);
        
        return imageOfEllipsis;
    }
    
    private static Bitmap imageOfDeleteRed = null;
    public static Bitmap imageOfDeleteRed() {
        if (imageOfDeleteRed != null)
            return imageOfDeleteRed;
        
        imageOfDeleteRed = Bitmap.createBitmap(46, 46, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfDeleteRed);
        StyleKit.drawDeleteRed(canvas);
        
        return imageOfDeleteRed;
    }
    
    private static Bitmap imageOfDeleteIconBlue = null;
    public static Bitmap imageOfDeleteIconBlue() {
        if (imageOfDeleteIconBlue != null)
            return imageOfDeleteIconBlue;
        
        imageOfDeleteIconBlue = Bitmap.createBitmap(32, 32, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfDeleteIconBlue);
        StyleKit.drawDeleteIconBlue(canvas);
        
        return imageOfDeleteIconBlue;
    }
    
    private static Bitmap imageOfAddPlus_white = null;
    public static Bitmap imageOfAddPlus_white() {
        if (imageOfAddPlus_white != null)
            return imageOfAddPlus_white;
        
        imageOfAddPlus_white = Bitmap.createBitmap(40, 40, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfAddPlus_white);
        StyleKit.drawAddPlus_white(canvas);
        
        return imageOfAddPlus_white;
    }
    
    
    // Resizing Behavior
    public static void resizingBehaviorApply(ResizingBehavior behavior, RectF rect, RectF target, RectF result) {
        if (rect.equals(target) || target == null) {
            result.set(rect);
            return;
        }
        
        if (behavior == ResizingBehavior.Stretch) {
            result.set(target);
            return;
        }
        
        float xRatio = Math.abs(target.width() / rect.width());
        float yRatio = Math.abs(target.height() / rect.height());
        float scale = 0f;
        
        switch (behavior) {
            case AspectFit: {
                scale = Math.min(xRatio, yRatio);
                break;
            }
            case AspectFill: {
                scale = Math.max(xRatio, yRatio);
                break;
            }
            case Center: {
                scale = 1f;
                break;
            }
        }
        
        float newWidth = Math.abs(rect.width() * scale);
        float newHeight = Math.abs(rect.height() * scale);
        result.set(target.centerX() - newWidth / 2,
            target.centerY() - newHeight / 2,
            target.centerX() + newWidth / 2,
            target.centerY() + newHeight / 2);
    }
    
    
}

class PaintCodeColor extends Color {
    private static float[] ColorToHSV(int originalColor) {
        float hsv[] = new float[3];
        RGBToHSV(red(originalColor), green(originalColor), blue(originalColor), hsv);
        return hsv;
    }
    
    public static int colorByChangingHue(int originalColor, float newHue) {
        float hsv[] = ColorToHSV(originalColor);
        hsv[0] = newHue;
        return HSVToColor(alpha(originalColor), hsv);
    }
    
    public static int colorByChangingSaturation(int originalColor, float newSaturation) {
        float hsv[] = ColorToHSV(originalColor);
        hsv[1] = newSaturation;
        return HSVToColor(alpha(originalColor), hsv);
    }
    
    public static int colorByChangingValue(int originalColor, float newValue) {
        float hsv[] = ColorToHSV(originalColor);
        hsv[2] = newValue;
        return HSVToColor(alpha(originalColor), hsv);
    }
    
    public static float hue(int color) {
        return ColorToHSV(color)[0];
    }
    
    public static float saturation(int color) {
        return ColorToHSV(color)[1];
    }
    
    public static float brightness(int color) {
        return ColorToHSV(color)[2];
    }
    
    public static int colorByChangingAlpha(int color, int newAlpha) {
        return argb(newAlpha, red(color), green(color), blue(color));
    }
    
    public static int colorByBlendingColors(int c1, float ratio, int c2) {
        return argb((int) ((1f - ratio) * alpha(c1) + ratio * alpha(c2)),
            (int) ((1f - ratio) * red(c1) + ratio * red(c2)),
            (int) ((1f - ratio) * green(c1) + ratio * green(c2)),
            (int) ((1f - ratio) * blue(c1) + ratio * blue(c2)));
    }
    
    public static int colorByApplyingHighlight(int color, float ratio) {
        return colorByBlendingColors(color, ratio, colorByChangingAlpha(WHITE, alpha(color)));
    }
    
    public static int colorByApplyingShadow(int color, float ratio) {
        return colorByBlendingColors(color, ratio, colorByChangingAlpha(BLACK, alpha(color)));
    }
}
class PaintCodeShadow {
    int color;
    float dx, dy;
    private float radius;
    private BlurMaskFilter blurMaskFilter;
    
    PaintCodeShadow() {
        
    }
    
    PaintCodeShadow(int color, float dx, float dy, float radius) {
        this.get(color, dx, dy, radius);
    }
    
    PaintCodeShadow get(int color, float dx, float dy, float radius) {
        this.color = color;
        this.dx = dx;
        this.dy = dy;
        
        if (this.radius != radius) {
            this.blurMaskFilter = null;
            this.radius = radius;
        }
        
        return this;
    }
    
    void setBlurOfPaint(Paint paint) {
        if (this.radius <= 0)
            return;
        
        if (this.blurMaskFilter == null)
            this.blurMaskFilter = new BlurMaskFilter(this.radius, BlurMaskFilter.Blur.NORMAL);
        
        paint.setMaskFilter(this.blurMaskFilter);
    }
}


class PaintCodeBitmap {
    private BitmapShader shader;
    private Bitmap bitmap;
    private RectF bounds;
    private int resource;
    private WeakReference<Context> context;
    
    PaintCodeBitmap get(Context context, int resource) {
        if (this.context == null || this.context.get() != context || this.resource != resource) {
            this.context = new WeakReference<>(context);
            this.resource = resource;
            this.bitmap = BitmapFactory.decodeResource(context.getResources(), resource);
            this.bounds = new RectF(0, 0, bitmap.getWidth(), bitmap.getHeight());
            this.shader = new BitmapShader(bitmap, Shader.TileMode.REPEAT, Shader.TileMode.REPEAT);
        }
        return this;
    }
    
    PaintCodeBitmap get(Bitmap bitmap) {
        if (this.bitmap != bitmap) {
            this.context = null;
            this.resource = 0;
            this.bitmap = bitmap;
            this.bounds = new RectF(0, 0, bitmap.getWidth(), bitmap.getHeight());
            this.shader = new BitmapShader(bitmap, Shader.TileMode.REPEAT, Shader.TileMode.REPEAT);
        }
        return this;
    }
    
    BitmapShader getShader() {
        return this.shader;
    }
    
    RectF getBounds() {
        return this.bounds;
    }
}
